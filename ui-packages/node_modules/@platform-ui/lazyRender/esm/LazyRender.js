import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["tagName", "children", "rootMargin"];
import React, { forwardRef } from 'react';
const LazyRender = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const {
    tagName = 'div',
    children,
    rootMargin
  } = props,
        rest = _objectWithoutPropertiesLoose(props, _excluded);

  const [rendered, setRendered] = React.useState(false);
  const rootRef = React.useRef(null);
  const ref = React.useCallback(el => {
    rootRef.current = el;

    if (!forwardedRef) {
      return;
    }

    if (typeof forwardedRef === 'function') {
      forwardedRef(el);
    } else {
      // eslint-disable-next-line no-param-reassign
      forwardedRef.current = el;
    }
  }, [forwardedRef]);
  React.useEffect(() => {
    if (typeof IntersectionObserver === 'undefined') {
      setRendered(true);
      return;
    } // eslint-disable-next-line compat/compat


    const observer = new IntersectionObserver(entries => {
      const entry = entries[0];

      if (entry.isIntersecting) {
        setRendered(true);
        observer.disconnect();
      }
    }, {
      threshold: 0,
      rootMargin
    });
    rootRef.current && observer.observe(rootRef.current);
    return () => {
      observer.disconnect();
    };
  }, [rootMargin]);
  return /*#__PURE__*/React.createElement(tagName, _extends({}, rest, {
    ref
  }), rendered ? children : null);
});
export default LazyRender;