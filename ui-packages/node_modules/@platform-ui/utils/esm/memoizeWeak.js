/**
 * Simple memoization using WeakMap.
 * Only suitable for functions with single argument of non-primitive type.
 *
 * @param {Function} fn
 * @returns {Function}
 * @example
 *     const obj = {};
 *     const memoized = memoizeWeak(obj => ({ ...obj }));
 *     console.log(memoized(obj) === memoized(obj)) // true
 */
const memoizeWeak = fn => {
  if (typeof WeakMap === 'undefined') {
    return fn;
  }

  const cache = new WeakMap();
  return obj => {
    if (cache.has(obj)) {
      return cache.get(obj);
    }

    const result = fn(obj);
    cache.set(obj, result);
    return result;
  };
};

export default memoizeWeak;