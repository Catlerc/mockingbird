import { isHexColor, isHexAColor, rgb2hex, rgba2hex, hexa2hex } from './color';
const linearGradientCheckRegex = /linear-gradient/;
const rgbCheckRegex = /^rgb/;
const rgbACheckRegex = /^rgba/;

function isLinearGradient(hexOrGradient) {
  return linearGradientCheckRegex.test(hexOrGradient);
}

function isRGB(rgbOrHexOrGradient) {
  return rgbCheckRegex.test(rgbOrHexOrGradient);
}

function isRGBA(rgbOrHexOrGradient) {
  return rgbACheckRegex.test(rgbOrHexOrGradient);
} // берем первый цвет из пары, задающей градиент
// Примеры градиента:
// linear-gradient(to right, #9cadbe 30%, #7e8fa3 51%)
// linear-gradient(to right, #9cadbe, #7e8fa3)
// linear-gradient(-45deg, rgb(23, 41, 73), rgb(23, 41, 73))
// linear-gradient(-45deg, rgb(23, 41, 73) 0%, rgb(23, 41, 73) 100%))


const linearGradientMainColorRegex = /linear-gradient\(.+?,\s?(?:(#[\w\d]*)|rgb\((\d+),\s?(\d+),\s?(\d+)\))/;
const rgbMainColorRegex = /\((\d+),\s?(\d+),\s?(\d+)/; // eslint-disable-next-line import/prefer-default-export

export default function getMainColor(rgbOrHexOrGradient) {
  let result;

  if (isRGBA(rgbOrHexOrGradient)) {
    result = rgba2hex(rgbOrHexOrGradient);
  } else if (isRGB(rgbOrHexOrGradient)) {
    const match = rgbMainColorRegex.exec(rgbOrHexOrGradient);
    result = rgb2hex({
      r: Number(match[1]),
      g: Number(match[2]),
      b: Number(match[3])
    });
  } else if (isHexColor(rgbOrHexOrGradient)) {
    result = rgbOrHexOrGradient;
  } else if (isHexAColor(rgbOrHexOrGradient)) {
    result = hexa2hex(rgbOrHexOrGradient);
  } else if (isLinearGradient(rgbOrHexOrGradient)) {
    const match = linearGradientMainColorRegex.exec(rgbOrHexOrGradient); // hex

    if (match[1] !== undefined) {
      // eslint-disable-next-line prefer-destructuring
      result = match[1]; // rgb
    } else if (match[2] !== undefined) {
      result = rgb2hex({
        r: Number(match[2]),
        g: Number(match[3]),
        b: Number(match[4])
      });
    }
  }

  return result;
}