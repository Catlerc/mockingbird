export const TIMING_FUNCS = {
  // no easing, no acceleration
  LINEAR: t => t,
  // accelerating from zero velocity
  EASE_IN: t => t * t,
  // decelerating to zero velocity
  EASE_OUT: t => t * (2 - t)
};
export default class Animation {
  constructor() {
    this.animate = time => {
      const timeStamp = Animation.hasPerformance ? time : Date.now(); // timeFraction от 0 до 1

      let timeFraction = (timeStamp - this.start) / this.options.duration;

      if (timeFraction > 1) {
        timeFraction = 1;
      } // текущее состояние анимации


      const progress = this.options.timing(timeFraction);
      this.options.draw(progress);

      if (timeFraction < 1) {
        this.id = requestAnimationFrame(this.animate);
      }
    };

    this.id = null;
  }

  play(options) {
    this.options = options;
    this.start = Animation.hasPerformance ? performance.now() : Date.now();
    this.id = requestAnimationFrame(this.animate);
    return this.id;
  }

  stop() {
    cancelAnimationFrame(this.id);
  }

}
Animation.hasPerformance = typeof performance !== 'undefined';