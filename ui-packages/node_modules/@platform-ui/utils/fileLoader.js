"use strict";

exports.__esModule = true;
exports.default = void 0;

/* eslint-disable import/no-commonjs, global-require */
var listLoaders = Object.create(null);
var fileLoader;

if (process.env.SERVER) {
  fileLoader = function fileLoader(url) {
    var fetch = require('node-fetch').default; // возможны url без протокола - //some.site - заменяем на протокол http для корректного
    // парсинга


    var fixedUrl = url.replace(/^\/\//, 'http://');
    listLoaders[url] = listLoaders[url] || fetch(fixedUrl, {
      timeout: 2000
    }).then(function (res) {
      if (res.status !== 200) {
        throw new Error("Status code is " + res.status + " - " + res.statusText + " for " + url);
      }

      return res.text();
    }).catch(function (err) {
      listLoaders[url] = undefined;
      throw err;
    });
    return listLoaders[url];
  };
} else {
  fileLoader = function fileLoader(url) {
    listLoaders[url] = listLoaders[url] || new Promise(function (resolve, reject) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url);

      xhr.onload = function onload() {
        if (this.status >= 200 && this.status < 300) {
          resolve(xhr.response);
        } else {
          reject({
            status: this.status,
            statusText: xhr.statusText
          });
        }

        listLoaders[url] = undefined;
      };

      xhr.onerror = function onerror() {
        reject({
          status: this.status,
          statusText: xhr.statusText
        });
        listLoaders[url] = undefined;
      };

      xhr.send();
    });
    return listLoaders[url];
  };
}

var _default = function _default(url) {
  return fileLoader(url);
};

exports.default = _default;