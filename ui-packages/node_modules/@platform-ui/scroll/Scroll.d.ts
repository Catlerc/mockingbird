import React, { PureComponent } from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { DeviceTypes } from '@platform-ui/device-info';
import type { Direction, DragProcessFn, MouseDownFn, ScrollPosition, ScrollbarVisibility, Theme, UpdateFn } from './types';
export declare const SCROLLBAR_VISIBILITY: {
    readonly ALWAYS: "always";
    readonly ONLY_ACTIVE: "onlyActive";
    readonly HIDDEN: "hidden";
};
export interface ScrollProps extends DataQaInterface, ScrollPosition {
    /**
     * Тема оформления скроллбара:
     * `default` – по умолчанию, темно-серая для светлых фонов
     * `light` – белая для тёмных фонов
     */
    theme?: Theme;
    /**
     * callback события скролла
     */
    onScroll?: (event: React.UIEvent | undefined, params: {
        scrollTop: number;
        scrollLeft: number;
        scrollWidth: number;
        scrollHeight: number;
        clientWidth: number;
        clientHeight: number;
    }) => void;
    /**
     * Режим отображения скроллбара
     */
    scrollbarVisibility?: ScrollbarVisibility;
    /**
     * Проставляется непосредственно на <div> со скроллом (нужен для механизма восставления борда)
     */
    id?: string;
    /**
     * Не дает скроллиться внешнему блоку, когда текущий доскроллился до предела
     */
    preventOuterScroll?: boolean;
    /**
     * Принудительно использовать фолбечный вариант
     */
    fallback?: boolean;
    /**
     * Опция по отключения создания дополнительного stack-контекста для элемента скролла (для fallback)
     */
    preventStackContext?: boolean;
    /**
     * ref на блок со скроллом (нужно для управления его позицией скролла в борде с анимацией)
     */
    setContainer?: React.RefCallback<HTMLDivElement | null>;
    /**
     * Внутренний отступ сверху для контента, не влияющий на скроллбар
     */
    contentInnerOffsetTop: number;
    /**
     * Внутренний отступ для снизу контента, не влияющий на скроллбар
     */
    contentInnerOffsetBottom: number;
    /**
     * Минимальная высота скроллбара в px (не может быть меньше дефолтного значения 17px)
     */
    barMinHeight: number;
    /**
     * Максимальная высота скроллбара в px
     */
    barMaxHeight?: number;
    /**
     * Ref внешнего вертикального скроллбара
     */
    verticalBarRef?: HTMLElement;
    /**
     * Ref внешнего горизонтального скроллбара
     */
    horizontalBarRef?: HTMLElement;
    /**
     * Callback обновления скролла.
     * Используется для внешнего скроллбара
     */
    onUpdate?: (params: {
        verticalSize?: number;
        horizontalSize?: number;
        verticalShow?: boolean;
        horizontalShow?: boolean;
        isVScrolling?: boolean;
        isHScrolling?: boolean;
        isVDragging?: boolean;
        isHDragging?: boolean;
    }) => void;
    /**
     * Позволяет получить снаружи функцию для явного вызова пересчета высоту скроллбара
     */
    getUpdateFunc?: (fn: UpdateFn) => void;
    /**
     * Позволяет получить callback onMouseDown для внешнего скроллбара
     */
    getMouseDownFunc?: (fn: MouseDownFn) => void;
    /**
     * Позволяет получить callback handleDragStartFunc для внешнего скроллбара
     */
    getDragStartFunc?: (fn: () => void) => void;
    /**
     * Позволяет получить callback handleDragProcessFunc для внешнего скроллбара
     */
    getDragProcessFunc?: (fn: DragProcessFn) => void;
    /**
     * Позволяет получить callback handleDragEndFunc для внешнего скроллбара
     */
    getDragEndFunc?: (fn: () => void) => void;
    /**
     * Отключение скролла
     */
    disabled?: boolean;
    /**
     * Основное содержимое
     */
    children?: React.ReactNode;
}
declare type ScrollState = {
    mounted?: boolean;
    hovered?: boolean;
    scrolling?: boolean;
    isVScrolling?: boolean;
    isHScrolling?: boolean;
    isVDragging?: boolean;
    isHDragging?: boolean;
    verticalOffset?: number;
    horizontalOffset?: number;
    verticalSize?: number;
    horizontalSize?: number;
    verticalShow?: boolean;
    horizontalShow?: boolean;
};
declare class Scroll extends PureComponent<ScrollProps, ScrollState> {
    content?: HTMLElement | null;
    container?: HTMLElement | null;
    verticalBar?: HTMLElement | null;
    horizontalBar?: HTMLElement | null;
    vTimeoutId?: number;
    hTimeoutId?: number;
    scrollingId?: number;
    startOffset?: number;
    isUnmounting?: boolean;
    resizeObserver?: ResizeObserver;
    direction?: Direction;
    deviceType: DeviceTypes;
    barMinHeight: number;
    horizontalProportion: number;
    verticalProportion: number;
    currentY: number;
    horizontalOffset: number;
    verticalOffset: number;
    getScrollBarVisibility: (direction: Direction) => boolean | undefined;
    setRef: (ref: 'container' | 'horizontalBar' | 'verticalBar') => (element: HTMLElement | null) => void;
    contentRef: (node: HTMLDivElement | null) => void;
    setCurrentY: (event: TouchEvent) => void;
    stopOuterScrollDecorator: (event: TouchEvent | WheelEvent) => void;
    setListeners: () => void;
    removeListeners: () => void;
    constructor(props: ScrollProps);
    static defaultProps: {
        theme: string;
        preventOuterScroll: boolean;
        scrollbarVisibility: "onlyActive";
        fallback: boolean;
        preventStackContext: boolean;
        dataQaType: string;
        contentInnerOffsetBottom: number;
        contentInnerOffsetTop: number;
        barMinHeight: number;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: ScrollProps): void;
    componentWillUnmount(): void;
    onStateUpdate(): void;
    onDragStart: () => void;
    onDragProcess: DragProcessFn;
    onDragEnd: () => void;
    handleScroll: (event?: React.MouseEvent<HTMLElement>) => void;
    handleMouseOver: () => void;
    handleMouseLeave: () => void;
    handleMouseDown: MouseDownFn;
    handleWheel: () => void;
    handleNativeContainerScroll: React.UIEventHandler<HTMLDivElement>;
    setScrollingTimeout(direction: Direction): void;
    updateWithProportions(props?: ScrollPosition, prevProps?: ScrollPosition): void;
    setDraggingDirection(): void;
    renderContent(): JSX.Element;
    renderScrollBar: (direction: Direction) => false | JSX.Element | undefined;
    renderNativeContainer(): JSX.Element;
    render(): JSX.Element;
}
export default Scroll;
