import _extends from "@babel/runtime/helpers/extends";
import isNumber from '@tinkoff/utils/is/number';
export const stopOuterScroll = (event, startY = 0) => {
  const {
    currentTarget: target
  } = event; // eslint-disable-next-line compat/compat

  const touches = window.TouchEvent && event instanceof TouchEvent ? event.touches : undefined;
  let deltaY = event instanceof WheelEvent ? event.deltaY : 0;

  if (touches) {
    const currentY = touches[0].clientY;
    deltaY = startY - currentY;
  } // если происходит скролл на величину большую расстояния на границы блока,
  // то явно скроллим к границе, чтобы предотвратить скролл внешнего контейнера


  if (deltaY < 0) {
    if (target.scrollTop < -deltaY) {
      target.scrollTop = 0;
      event.preventDefault();
    }
  } else {
    const maxScroll = target.scrollHeight - target.offsetHeight;

    if (maxScroll - target.scrollTop < deltaY) {
      target.scrollTop = maxScroll;
      event.preventDefault();
    }
  }
}; // на маке scrollbarWidth = 0, но чтобы визуально скрыть скроллбар нужен дополнительный отступ

export const SCROLLBAR_OFFSET = 20;
export const windowStyles = (vertical, horizontal, scrollbarWidth) => isNumber(scrollbarWidth) ? _extends({}, vertical ? {
  width: `calc(100% + ${scrollbarWidth}px)`,
  paddingRight: SCROLLBAR_OFFSET,
  marginRight: -scrollbarWidth
} : {}, horizontal ? {
  height: `calc(100% + ${scrollbarWidth}px)`,
  paddingBottom: SCROLLBAR_OFFSET,
  marginBottom: -scrollbarWidth
} : {}) : undefined;