import { useRef } from 'react';
export const useScrollCallback = params => {
  const {
    callOnFirstRender,
    topOffset = 0,
    bottomOffset = 0,
    leftOffset = 0,
    rightOffset = 0,
    onScroll,
    onScrollTop,
    onScrollBottom,
    onScrollLeft,
    onScrollRight
  } = params;
  const verticalPosition = useRef(callOnFirstRender ? null : undefined);
  const horizontalPosition = useRef(callOnFirstRender ? null : undefined);

  const handleScroll = (event, onScrollParams) => {
    const {
      scrollTop,
      scrollLeft,
      scrollHeight,
      scrollWidth,
      clientHeight,
      clientWidth
    } = onScrollParams;
    onScroll == null ? void 0 : onScroll(event, onScrollParams);

    if (scrollHeight > clientHeight) {
      if (onScrollTop && scrollTop <= topOffset) {
        if (verticalPosition.current !== null && verticalPosition.current !== 'top') {
          onScrollTop(event, onScrollParams);
        }

        verticalPosition.current = 'top';
      } else if (onScrollBottom && clientHeight + scrollTop >= scrollHeight - bottomOffset) {
        if (verticalPosition.current !== null && verticalPosition.current !== 'bottom') {
          onScrollBottom(event, onScrollParams);
        }

        verticalPosition.current = 'bottom';
      } else {
        verticalPosition.current = undefined;
      }
    }

    if (scrollWidth > clientWidth) {
      if (onScrollLeft && scrollLeft <= leftOffset) {
        if (horizontalPosition.current !== null && horizontalPosition.current !== 'left') {
          onScrollLeft(event, onScrollParams);
        }

        horizontalPosition.current = 'left';
      } else if (onScrollRight && clientWidth + scrollLeft >= scrollWidth - rightOffset) {
        if (horizontalPosition.current !== null && horizontalPosition.current !== 'right') {
          onScrollRight(event, onScrollParams);
        }

        horizontalPosition.current = 'right';
      } else {
        horizontalPosition.current = undefined;
      }
    }
  };

  return {
    onScroll: handleScroll
  };
};