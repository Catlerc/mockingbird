"use strict";

exports.__esModule = true;
exports.useScrollCallback = void 0;

var _react = require("react");

var useScrollCallback = function useScrollCallback(params) {
  var callOnFirstRender = params.callOnFirstRender,
      _params$topOffset = params.topOffset,
      topOffset = _params$topOffset === void 0 ? 0 : _params$topOffset,
      _params$bottomOffset = params.bottomOffset,
      bottomOffset = _params$bottomOffset === void 0 ? 0 : _params$bottomOffset,
      _params$leftOffset = params.leftOffset,
      leftOffset = _params$leftOffset === void 0 ? 0 : _params$leftOffset,
      _params$rightOffset = params.rightOffset,
      rightOffset = _params$rightOffset === void 0 ? 0 : _params$rightOffset,
      onScroll = params.onScroll,
      onScrollTop = params.onScrollTop,
      onScrollBottom = params.onScrollBottom,
      onScrollLeft = params.onScrollLeft,
      onScrollRight = params.onScrollRight;
  var verticalPosition = (0, _react.useRef)(callOnFirstRender ? null : undefined);
  var horizontalPosition = (0, _react.useRef)(callOnFirstRender ? null : undefined);

  var handleScroll = function handleScroll(event, onScrollParams) {
    var scrollTop = onScrollParams.scrollTop,
        scrollLeft = onScrollParams.scrollLeft,
        scrollHeight = onScrollParams.scrollHeight,
        scrollWidth = onScrollParams.scrollWidth,
        clientHeight = onScrollParams.clientHeight,
        clientWidth = onScrollParams.clientWidth;
    onScroll == null ? void 0 : onScroll(event, onScrollParams);

    if (scrollHeight > clientHeight) {
      if (onScrollTop && scrollTop <= topOffset) {
        if (verticalPosition.current !== null && verticalPosition.current !== 'top') {
          onScrollTop(event, onScrollParams);
        }

        verticalPosition.current = 'top';
      } else if (onScrollBottom && clientHeight + scrollTop >= scrollHeight - bottomOffset) {
        if (verticalPosition.current !== null && verticalPosition.current !== 'bottom') {
          onScrollBottom(event, onScrollParams);
        }

        verticalPosition.current = 'bottom';
      } else {
        verticalPosition.current = undefined;
      }
    }

    if (scrollWidth > clientWidth) {
      if (onScrollLeft && scrollLeft <= leftOffset) {
        if (horizontalPosition.current !== null && horizontalPosition.current !== 'left') {
          onScrollLeft(event, onScrollParams);
        }

        horizontalPosition.current = 'left';
      } else if (onScrollRight && clientWidth + scrollLeft >= scrollWidth - rightOffset) {
        if (horizontalPosition.current !== null && horizontalPosition.current !== 'right') {
          onScrollRight(event, onScrollParams);
        }

        horizontalPosition.current = 'right';
      } else {
        horizontalPosition.current = undefined;
      }
    }
  };

  return {
    onScroll: handleScroll
  };
};

exports.useScrollCallback = useScrollCallback;