import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { FCC } from '@platform-ui/types';
import type { SVGIconProps } from './SVGIcon';
import themes from './themes';
export declare const ICON_SIZES: readonly [16, 24, 32, 40, 44, 48, 64, 96, 128];
export declare const ROTATE: readonly [-90, 0, 90, 180, 270];
export declare const VERTICAL_ALIGN: readonly ["top", "middle", "bottom", "baseline"];
export declare const reverseMap: {
    horizontal: string;
    vertical: string;
};
export declare const roundSize: <T extends readonly number[]>(size: number, sizes: T) => T[number];
export declare type IconContainerProps = DataQaInterface & React.HTMLAttributes<HTMLElement> & React.PropsWithChildren<{
    /**
     * Задает цветовую тему иконки [color && background]
     */
    theme?: keyof typeof themes | {
        color?: string;
        background?: string;
    };
    /**
     * Выбор размера иконки
     * @default 64
     */
    iconSize?: typeof ICON_SIZES[number] | null;
    /**
     * Флаг рендера контейнера иконки
     */
    withContainer?: boolean;
    /**
     * Выбор размера контейнера иконки
     */
    containerSize?: typeof ICON_SIZES[number];
    /**
     * Флаг квадратной верстки контейнера
     */
    square?: boolean;
    /**
     * Содержимое svg иконки для отображения
     */
    svgCode?: React.ReactNode;
    /**
     * Атрибут data-svg-id иконки
     */
    dataSvgId?: string;
    /**
     * Выбор направления трансформации иконки
     */
    reverse?: keyof typeof reverseMap;
    /**
     * Выбор угла вращения иконки
     * @default: 0
     */
    rotate?: typeof ROTATE[number];
    /**
     * Выбор вертикального позиционирования конки
     * @default: top
     */
    verticalAlign?: typeof VERTICAL_ALIGN[number];
    /**
     * Задает размер подложки иконки
     */
    backgroundSize?: typeof ICON_SIZES[number];
    /**
     * Курсор при наведении
     * (React.CSSProperties['cursor'])
     */
    cursor?: React.CSSProperties['cursor'];
    /**
     * RegExp для поиска id в svgCode, которому будет присовен префикс при рендере
     */
    idRegExp?: RegExp;
}>;
export declare const IconContainer: FCC<IconContainerProps>;
export declare type IconProps = IconContainerProps & {
    path?: React.ReactNode;
    iconPath?: string;
    icon?: SVGIconProps['icon'];
};
declare const Icon: ({ icon, iconPath, ...otherProps }: IconProps) => JSX.Element;
export default Icon;
