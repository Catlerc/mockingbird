import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["dataQaType", "dataQaData", "iconSize", "withContainer", "containerSize", "square", "dataSvgId", "svgCode", "rotate", "reverse", "backgroundSize", "verticalAlign", "theme", "cursor", "children", "idRegExp"],
      _excluded2 = ["icon", "iconPath"];
import React, { useEffect, useState } from 'react';
import dataQa from '@platform-ui/dataQa';
import iconLoaderHoc from '@platform-ui/iconLoaderHOC';
import generateId from '@platform-ui/generateId';
import SVGIcon from './SVGIcon';
import themes from './themes';
import styles from './Icon.module.css';
export const ICON_SIZES = [16, 24, 32, 40, 44, 48, 64, 96, 128];
export const ROTATE = [-90, 0, 90, 180, 270];
export const VERTICAL_ALIGN = ['top', 'middle', 'bottom', 'baseline'];
const CONTAINER_BORDER_RADIUS = {
  32: 10,
  40: 12,
  44: 15,
  48: 15,
  64: 20,
  96: 30,
  128: 40
};
export const reverseMap = {
  horizontal: 'scaleX(-1)',
  vertical: 'scaleY(-1)'
};

const getTransform = (rotate, reverse) => {
  let str = rotate ? `rotate(${rotate}deg)` : '';
  const reverseString = reverse ? reverseMap[reverse] : undefined;

  if (reverseString) {
    str += ` ${reverseString}`;
  }

  return str.length ? str : 'none';
};

export const roundSize = (size, sizes) => {
  let prevDiff = Infinity;
  let prevVal;

  for (let i = 0; i < sizes.length; i++) {
    const m = Math.abs(size - sizes[i]);

    if (m < prevDiff) {
      prevDiff = m;
      prevVal = sizes[i];
    } else {
      return prevVal;
    }
  }

  return prevVal;
};
export const IconContainer = props => {
  const {
    dataQaType = 'uikit/icon',
    dataQaData,
    iconSize,
    withContainer,
    containerSize,
    square,
    dataSvgId,
    svgCode,
    rotate,
    reverse,
    backgroundSize,
    verticalAlign,
    theme,
    cursor,
    children,
    idRegExp
  } = props,
        otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  const {
    color,
    background
  } = themes[theme] || (typeof theme === 'object' ? theme : {});
  const transform = getTransform(rotate || 0, reverse);
  const roundedContainerSize = containerSize && roundSize(+containerSize, ICON_SIZES);
  const roundedIconSize = iconSize !== null && roundSize(+(iconSize || 64), ICON_SIZES);
  const [content, setContent] = useState();
  useEffect(() => {
    let cont;

    if (idRegExp) {
      const prefix = generateId();
      cont = svgCode == null ? void 0 : svgCode.toString().replace(idRegExp, prefix);
    } else {
      cont = svgCode;
    }

    setContent(cont);
  }, [idRegExp, svgCode]);
  return /*#__PURE__*/React.createElement("span", Object.assign({}, otherProps, dataQa({
    dataQaType,
    dataQaData
  }), {
    className: styles.container,
    style: {
      color,
      cursor,
      width: roundedContainerSize,
      height: roundedContainerSize,
      verticalAlign: verticalAlign || 'top'
    }
  }), withContainer && /*#__PURE__*/React.createElement("span", {
    className: styles.background,
    style: {
      background,
      width: backgroundSize,
      height: backgroundSize,
      borderRadius: square && containerSize && containerSize !== 16 && containerSize !== 24 && CONTAINER_BORDER_RADIUS[containerSize] || undefined
    }
  }), /*#__PURE__*/React.createElement("span", Object.assign({}, dataQa({
    dataQaType: `${dataQaType}.content`
  }), {
    "data-svg-id": dataSvgId,
    className: styles.icon,
    style: _extends({
      width: roundedIconSize || undefined,
      height: roundedIconSize || undefined,
      WebkitTransform: transform,
      transform
    }, otherProps.style),
    role: "presentation"
  }, content ? {
    dangerouslySetInnerHTML: {
      __html: content
    }
  } : {}), children));
};
const IconContainerWithLoader = iconLoaderHoc(IconContainer);

const Icon = _ref => {
  let {
    icon,
    iconPath
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded2);

  // TODO: сократить количество вариантов интрефейсов использования иконок
  if (icon) {
    // грузим и инлайним код, если в пропе icon url или содержимое иконки
    if (typeof icon === 'string') {
      return /*#__PURE__*/React.createElement(IconContainerWithLoader, Object.assign({}, otherProps, {
        iconPath: icon
      }));
    } // инлайним, если пришла jsx-разметка, или юзаем новый подход с use href, если в пропе icon объект


    return /*#__PURE__*/React.createElement(IconContainer, otherProps, /*#__PURE__*/React.createElement(SVGIcon, {
      icon: icon,
      className: styles.svgIcon
    }));
  } // грузим и инлайним код, если в iconPath url до иконки


  if (iconPath) {
    return /*#__PURE__*/React.createElement(IconContainerWithLoader, Object.assign({
      iconPath: iconPath
    }, otherProps));
  } // фолбек вариант, если был напрямую передан проп svgCode или children


  return /*#__PURE__*/React.createElement(IconContainer, otherProps);
};

export default Icon;