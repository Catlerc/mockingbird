import { PureComponent, createElement } from 'react';
import cn from 'classnames';

class CSSTransitionGroup extends PureComponent {
  constructor(props) {
    super(props);

    this.updateStatus = (transitionClass = this.state.transitionClass, children = this.state.children) => {
      this.setState({
        transitionClass,
        children
      });
    };

    this.handleTransitionEnd = () => {
      const {
        transitionName: {
          enter,
          leave,
          hide,
          show
        }
      } = this.props;
      const {
        transitionClass
      } = this.state;

      if (transitionClass === enter) {
        this.updateStatus(show);
      }

      if (transitionClass === leave) {
        this.updateStatus(hide, null);
      }
    };

    const {
      children: _children
    } = this.props;
    this.state = {
      transitionClass: null,
      children: _children
    };
  }

  componentDidMount() {
    const {
      transitionName: {
        enter,
        show
      },
      animateFirstRender,
      children
    } = this.props;
    this.updateStatus(animateFirstRender ? enter : show, children);
  }

  componentDidUpdate(prevProps) {
    const {
      children,
      transitionName: {
        leave,
        show,
        enter
      },
      animateFirstRender
    } = this.props;
    const {
      children: childrenState
    } = this.state; // @ts-ignore

    const newValue = children && children.props.children; // @ts-ignore

    const oldValue = childrenState && childrenState.props.children;

    if (newValue === null || newValue === false) {
      this.updateStatus(leave);
    }

    if ((newValue || newValue === undefined) && !oldValue) {
      this.updateStatus(animateFirstRender ? enter : show, children);
    }

    if (newValue && oldValue) {
      this.updateStatus(undefined, children);
    }
  }

  render() {
    const {
      children,
      transitionClass
    } = this.state;

    if (!children) {
      return null;
    } // @ts-ignore


    const {
      className: elementClass,
      style,
      children: content
    } = children.props; // @ts-ignore

    const tag = children.type; // eslint-disable-next-line react/no-children-prop

    return /*#__PURE__*/createElement(tag, {
      className: cn(elementClass, transitionClass),
      style,
      children: content,
      onTransitionEnd: this.handleTransitionEnd
    });
  }

}

CSSTransitionGroup.defaultProps = {
  children: null,
  transitionName: {},
  animateFirstRender: true
};
export default CSSTransitionGroup;