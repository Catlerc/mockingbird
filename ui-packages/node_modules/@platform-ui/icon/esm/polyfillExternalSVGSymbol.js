import generateId from '@platform-ui/generateId';

function supportsExternalSymbols() {
  if (typeof window === 'undefined') {
    return true;
  } // eslint-disable-next-line compat/compat


  const ua = window.navigator.userAgent;
  const isIE = ua.match(/Trident\//);

  if (isIE) {
    return false;
  }

  const isEdge = ua.match(/Edge\/(\d+)/);

  if (!isEdge) {
    return true;
  }

  const edgeVersion = +isEdge[1];
  return edgeVersion > 12;
}

function isExternalSymbol(href) {
  return !href.startsWith('#');
}

const polyfilledIds = {};

function loadSVG(href) {
  const req = new XMLHttpRequest(); // eslint-disable-next-line compat/compat

  return new Promise(resolve => {
    req.onreadystatechange = () => {
      if (req.readyState === 4) {
        const svgText = req.responseText;
        const doc = document.implementation.createHTMLDocument('');
        doc.body.innerHTML = svgText;
        const svg = doc.body.firstChild;
        resolve(svg);
      }
    };

    req.open('get', href);
    req.send();
  });
}

let svgContainer;

function getSVGContainer() {
  if (svgContainer) {
    return svgContainer;
  }

  svgContainer = document.createElement('svg');
  document.body.appendChild(svgContainer);
  return svgContainer;
}

function loadSymbol(href, polyfilledId) {
  const [svgHref, symbolId] = href.split('#');
  loadSVG(svgHref).then(svg => {
    const symbol = svg.getElementById(symbolId).cloneNode(true);
    const localSVG = getSVGContainer();
    symbol.id = polyfilledId;
    localSVG.appendChild(symbol);
  });
}

function getPolyfilledId(href) {
  if (polyfilledIds[href]) {
    return polyfilledIds[href];
  }

  const id = generateId();
  polyfilledIds[href] = id;
  loadSymbol(href, id);
  return id;
}

function externalSVGSymbol(href) {
  if (!isExternalSymbol(href) || supportsExternalSymbols()) {
    return href;
  }

  return `#${getPolyfilledId(href)}`;
}

export default externalSVGSymbol;