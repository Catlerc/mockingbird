"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = require("react");

var _classnames = _interopRequireDefault(require("classnames"));

var CSSTransitionGroup = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2.default)(CSSTransitionGroup, _PureComponent);

  function CSSTransitionGroup(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.updateStatus = function (transitionClass, children) {
      if (transitionClass === void 0) {
        transitionClass = _this.state.transitionClass;
      }

      if (children === void 0) {
        children = _this.state.children;
      }

      _this.setState({
        transitionClass: transitionClass,
        children: children
      });
    };

    _this.handleTransitionEnd = function () {
      var _this$props$transitio = _this.props.transitionName,
          enter = _this$props$transitio.enter,
          leave = _this$props$transitio.leave,
          hide = _this$props$transitio.hide,
          show = _this$props$transitio.show;
      var transitionClass = _this.state.transitionClass;

      if (transitionClass === enter) {
        _this.updateStatus(show);
      }

      if (transitionClass === leave) {
        _this.updateStatus(hide, null);
      }
    };

    var _children = _this.props.children;
    _this.state = {
      transitionClass: null,
      children: _children
    };
    return _this;
  }

  var _proto = CSSTransitionGroup.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props = this.props,
        _this$props$transitio2 = _this$props.transitionName,
        enter = _this$props$transitio2.enter,
        show = _this$props$transitio2.show,
        animateFirstRender = _this$props.animateFirstRender,
        children = _this$props.children;
    this.updateStatus(animateFirstRender ? enter : show, children);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props2 = this.props,
        children = _this$props2.children,
        _this$props2$transiti = _this$props2.transitionName,
        leave = _this$props2$transiti.leave,
        show = _this$props2$transiti.show,
        enter = _this$props2$transiti.enter,
        animateFirstRender = _this$props2.animateFirstRender;
    var childrenState = this.state.children; // @ts-ignore

    var newValue = children && children.props.children; // @ts-ignore

    var oldValue = childrenState && childrenState.props.children;

    if (newValue === null || newValue === false) {
      this.updateStatus(leave);
    }

    if ((newValue || newValue === undefined) && !oldValue) {
      this.updateStatus(animateFirstRender ? enter : show, children);
    }

    if (newValue && oldValue) {
      this.updateStatus(undefined, children);
    }
  };

  _proto.render = function render() {
    var _this$state = this.state,
        children = _this$state.children,
        transitionClass = _this$state.transitionClass;

    if (!children) {
      return null;
    } // @ts-ignore


    var _children$props = children.props,
        elementClass = _children$props.className,
        style = _children$props.style,
        content = _children$props.children; // @ts-ignore

    var tag = children.type; // eslint-disable-next-line react/no-children-prop

    return /*#__PURE__*/(0, _react.createElement)(tag, {
      className: (0, _classnames.default)(elementClass, transitionClass),
      style: style,
      children: content,
      onTransitionEnd: this.handleTransitionEnd
    });
  };

  return CSSTransitionGroup;
}(_react.PureComponent);

CSSTransitionGroup.defaultProps = {
  children: null,
  transitionName: {},
  animateFirstRender: true
};
var _default = CSSTransitionGroup;
exports.default = _default;