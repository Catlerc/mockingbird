"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _generateId = _interopRequireDefault(require("@platform-ui/generateId"));

function supportsExternalSymbols() {
  if (typeof window === 'undefined') {
    return true;
  } // eslint-disable-next-line compat/compat


  var ua = window.navigator.userAgent;
  var isIE = ua.match(/Trident\//);

  if (isIE) {
    return false;
  }

  var isEdge = ua.match(/Edge\/(\d+)/);

  if (!isEdge) {
    return true;
  }

  var edgeVersion = +isEdge[1];
  return edgeVersion > 12;
}

function isExternalSymbol(href) {
  return !href.startsWith('#');
}

var polyfilledIds = {};

function loadSVG(href) {
  var req = new XMLHttpRequest(); // eslint-disable-next-line compat/compat

  return new Promise(function (resolve) {
    req.onreadystatechange = function () {
      if (req.readyState === 4) {
        var svgText = req.responseText;
        var doc = document.implementation.createHTMLDocument('');
        doc.body.innerHTML = svgText;
        var svg = doc.body.firstChild;
        resolve(svg);
      }
    };

    req.open('get', href);
    req.send();
  });
}

var svgContainer;

function getSVGContainer() {
  if (svgContainer) {
    return svgContainer;
  }

  svgContainer = document.createElement('svg');
  document.body.appendChild(svgContainer);
  return svgContainer;
}

function loadSymbol(href, polyfilledId) {
  var _href$split = href.split('#'),
      svgHref = _href$split[0],
      symbolId = _href$split[1];

  loadSVG(svgHref).then(function (svg) {
    var symbol = svg.getElementById(symbolId).cloneNode(true);
    var localSVG = getSVGContainer();
    symbol.id = polyfilledId;
    localSVG.appendChild(symbol);
  });
}

function getPolyfilledId(href) {
  if (polyfilledIds[href]) {
    return polyfilledIds[href];
  }

  var id = (0, _generateId.default)();
  polyfilledIds[href] = id;
  loadSymbol(href, id);
  return id;
}

function externalSVGSymbol(href) {
  if (!isExternalSymbol(href) || supportsExternalSymbols()) {
    return href;
  }

  return "#" + getPolyfilledId(href);
}

var _default = externalSVGSymbol;
exports.default = _default;