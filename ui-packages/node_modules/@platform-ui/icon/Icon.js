"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.roundSize = exports.reverseMap = exports.default = exports.VERTICAL_ALIGN = exports.ROTATE = exports.IconContainer = exports.ICON_SIZES = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _iconLoaderHOC = _interopRequireDefault(require("@platform-ui/iconLoaderHOC"));

var _generateId = _interopRequireDefault(require("@platform-ui/generateId"));

var _SVGIcon = _interopRequireDefault(require("./SVGIcon"));

var _themes = _interopRequireDefault(require("./themes"));

var _IconModule = _interopRequireDefault(require("./Icon.module.css"));

var _excluded = ["dataQaType", "dataQaData", "iconSize", "withContainer", "containerSize", "square", "dataSvgId", "svgCode", "rotate", "reverse", "backgroundSize", "verticalAlign", "theme", "cursor", "children", "idRegExp"],
    _excluded2 = ["icon", "iconPath"];
var ICON_SIZES = [16, 24, 32, 40, 44, 48, 64, 96, 128];
exports.ICON_SIZES = ICON_SIZES;
var ROTATE = [-90, 0, 90, 180, 270];
exports.ROTATE = ROTATE;
var VERTICAL_ALIGN = ['top', 'middle', 'bottom', 'baseline'];
exports.VERTICAL_ALIGN = VERTICAL_ALIGN;
var CONTAINER_BORDER_RADIUS = {
  32: 10,
  40: 12,
  44: 15,
  48: 15,
  64: 20,
  96: 30,
  128: 40
};
var reverseMap = {
  horizontal: 'scaleX(-1)',
  vertical: 'scaleY(-1)'
};
exports.reverseMap = reverseMap;

var getTransform = function getTransform(rotate, reverse) {
  var str = rotate ? "rotate(" + rotate + "deg)" : '';
  var reverseString = reverse ? reverseMap[reverse] : undefined;

  if (reverseString) {
    str += " " + reverseString;
  }

  return str.length ? str : 'none';
};

var roundSize = function roundSize(size, sizes) {
  var prevDiff = Infinity;
  var prevVal;

  for (var i = 0; i < sizes.length; i++) {
    var m = Math.abs(size - sizes[i]);

    if (m < prevDiff) {
      prevDiff = m;
      prevVal = sizes[i];
    } else {
      return prevVal;
    }
  }

  return prevVal;
};

exports.roundSize = roundSize;

var IconContainer = function IconContainer(props) {
  var _props$dataQaType = props.dataQaType,
      dataQaType = _props$dataQaType === void 0 ? 'uikit/icon' : _props$dataQaType,
      dataQaData = props.dataQaData,
      iconSize = props.iconSize,
      withContainer = props.withContainer,
      containerSize = props.containerSize,
      square = props.square,
      dataSvgId = props.dataSvgId,
      svgCode = props.svgCode,
      rotate = props.rotate,
      reverse = props.reverse,
      backgroundSize = props.backgroundSize,
      verticalAlign = props.verticalAlign,
      theme = props.theme,
      cursor = props.cursor,
      children = props.children,
      idRegExp = props.idRegExp,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);

  var _ref = _themes.default[theme] || (typeof theme === 'object' ? theme : {}),
      color = _ref.color,
      background = _ref.background;

  var transform = getTransform(rotate || 0, reverse);
  var roundedContainerSize = containerSize && roundSize(+containerSize, ICON_SIZES);
  var roundedIconSize = iconSize !== null && roundSize(+(iconSize || 64), ICON_SIZES);

  var _useState = (0, _react.useState)(),
      content = _useState[0],
      setContent = _useState[1];

  (0, _react.useEffect)(function () {
    var cont;

    if (idRegExp) {
      var prefix = (0, _generateId.default)();
      cont = svgCode == null ? void 0 : svgCode.toString().replace(idRegExp, prefix);
    } else {
      cont = svgCode;
    }

    setContent(cont);
  }, [idRegExp, svgCode]);
  return /*#__PURE__*/_react.default.createElement("span", Object.assign({}, otherProps, (0, _dataQa.default)({
    dataQaType: dataQaType,
    dataQaData: dataQaData
  }), {
    className: _IconModule.default.container,
    style: {
      color: color,
      cursor: cursor,
      width: roundedContainerSize,
      height: roundedContainerSize,
      verticalAlign: verticalAlign || 'top'
    }
  }), withContainer && /*#__PURE__*/_react.default.createElement("span", {
    className: _IconModule.default.background,
    style: {
      background: background,
      width: backgroundSize,
      height: backgroundSize,
      borderRadius: square && containerSize && containerSize !== 16 && containerSize !== 24 && CONTAINER_BORDER_RADIUS[containerSize] || undefined
    }
  }), /*#__PURE__*/_react.default.createElement("span", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType + ".content"
  }), {
    "data-svg-id": dataSvgId,
    className: _IconModule.default.icon,
    style: (0, _extends2.default)({
      width: roundedIconSize || undefined,
      height: roundedIconSize || undefined,
      WebkitTransform: transform,
      transform: transform
    }, otherProps.style),
    role: "presentation"
  }, content ? {
    dangerouslySetInnerHTML: {
      __html: content
    }
  } : {}), children));
};

exports.IconContainer = IconContainer;
var IconContainerWithLoader = (0, _iconLoaderHOC.default)(IconContainer);

var Icon = function Icon(_ref2) {
  var icon = _ref2.icon,
      iconPath = _ref2.iconPath,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded2);

  // TODO: сократить количество вариантов интрефейсов использования иконок
  if (icon) {
    // грузим и инлайним код, если в пропе icon url или содержимое иконки
    if (typeof icon === 'string') {
      return /*#__PURE__*/_react.default.createElement(IconContainerWithLoader, Object.assign({}, otherProps, {
        iconPath: icon
      }));
    } // инлайним, если пришла jsx-разметка, или юзаем новый подход с use href, если в пропе icon объект


    return /*#__PURE__*/_react.default.createElement(IconContainer, otherProps, /*#__PURE__*/_react.default.createElement(_SVGIcon.default, {
      icon: icon,
      className: _IconModule.default.svgIcon
    }));
  } // грузим и инлайним код, если в iconPath url до иконки


  if (iconPath) {
    return /*#__PURE__*/_react.default.createElement(IconContainerWithLoader, Object.assign({
      iconPath: iconPath
    }, otherProps));
  } // фолбек вариант, если был напрямую передан проп svgCode или children


  return /*#__PURE__*/_react.default.createElement(IconContainer, otherProps);
};

var _default = Icon;
exports.default = _default;