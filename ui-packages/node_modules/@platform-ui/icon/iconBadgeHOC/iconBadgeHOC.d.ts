import React from 'react';
declare const SIZES_MAP: {
    readonly 128: "xxl";
    readonly 96: "xl";
    readonly 64: "l";
    readonly 48: "m";
    readonly 32: "s";
    readonly 24: "xs";
};
export declare const NOTIFICATION_TYPES: {
    ALERT: string;
    WARNING: string;
    SUCCESS: string;
};
export declare type IconBadgeProps = {
    /**
     * Цвет обводки бейджа/нотификации
     */
    badgeBorderColor?: string;
    /**
     * Цвет фона бейджа/нотификации
     */
    badgeBackgroundColor?: string;
    /**
     * Цвет обводки верхнего бейджа/нотификации
     */
    topBadgeBorderColor?: string;
    /**
     * Цвет фона верхнего бейджа/нотификации
     */
    topBadgeBackgroundColor?: string;
    /**
     * Цвет обводки нижнего бейджа/нотификации
     */
    bottomBadgeBorderColor?: string;
    /**
     * Цвет фона нижнего бейджа/нотификации
     */
    bottomBadgeBackgroundColor?: string;
    /**
     * Слот для нижнего бейджика
     */
    bottomBadge?: React.ReactNode;
    /**
     * Слот для вернего бейджика
     */
    topBadge?: React.ReactNode;
    /**
     * Позволяет отображать кружки нотификаций
     */
    withNotification?: boolean | number;
    /**
     * Включает анимацию при изменения withNotification c nullable значения на не nullable и обратно
     */
    animateNotification?: boolean;
    /**
     * Включает анимацию нотификаций не только при изменении значения, но и при первичной отрисовке
     */
    animateNotificationFirstRender?: boolean;
    /**
     * Флаг, дающий понять бейджу, что контент не круглый, а квадратный (для перепозиционирования)
     */
    square?: boolean;
    /**
     * Вертикальное выравнивание (добавлен для прозрачной подмены компонента Icon)
     */
    verticalAlign?: string;
    notificationType?: keyof typeof NOTIFICATION_TYPES;
    iconSize?: keyof typeof SIZES_MAP | typeof SIZES_MAP[keyof typeof SIZES_MAP];
};
declare const iconBadgeHOC: <T extends {}>(WrappedComponent: React.ComponentType<T>) => React.ComponentType<T & IconBadgeProps>;
export default iconBadgeHOC;
