"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = exports.NOTIFICATION_TYPES = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _CSSTransitionGroup = _interopRequireDefault(require("../utils/CSSTransitionGroup"));

var _Icon = require("../Icon");

var _iconBadgeHOCModule = _interopRequireDefault(require("./iconBadgeHOC.module.css"));

var _excluded = ["topBadge", "bottomBadge", "withNotification", "iconSize", "verticalAlign", "badgeBorderColor", "badgeBackgroundColor", "topBadgeBorderColor", "topBadgeBackgroundColor", "bottomBadgeBackgroundColor", "bottomBadgeBorderColor", "animateNotification", "animateNotificationFirstRender", "notificationType"];
var MOUNT_RENDER_DELAY = 400;
var SIZES_MAP = {
  128: 'xxl',
  96: 'xl',
  64: 'l',
  48: 'm',
  32: 's',
  24: 'xs'
};
var BORDER_WIDTH = {
  xxxl: '3',
  xxl: '3',
  xl: '3',
  l: '2',
  m: '2',
  s: '2',
  xs: '2'
};
var NOTIFICATION_TYPES = {
  ALERT: 'alert',
  WARNING: 'warning',
  SUCCESS: 'success'
};
exports.NOTIFICATION_TYPES = NOTIFICATION_TYPES;

var iconBadgeHOC = function iconBadgeHOC(WrappedComponent) {
  var BadgeWrapper = /*#__PURE__*/function (_PureComponent) {
    (0, _inheritsLoose2.default)(BadgeWrapper, _PureComponent);

    function BadgeWrapper(props) {
      var _this;

      _this = _PureComponent.call(this, props) || this;
      _this.timeoutId = void 0;
      _this.state = {
        mounted: false
      };
      return _this;
    }

    var _proto = BadgeWrapper.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var _this2 = this;

      // добавляем небольшую задержку, чтобы контент успел прогрузиться
      this.timeoutId = window.setTimeout(function () {
        _this2.setState({
          mounted: true
        });
      }, MOUNT_RENDER_DELAY);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      window.clearTimeout(this.timeoutId);
    };

    _proto.renderNotification = function renderNotification(size) {
      var _this$props = this.props,
          square = _this$props.square,
          badgeBorderColor = _this$props.badgeBorderColor,
          badgeBackgroundColor = _this$props.badgeBackgroundColor,
          topBadgeBorderColor = _this$props.topBadgeBorderColor,
          topBadgeBackgroundColor = _this$props.topBadgeBackgroundColor,
          withNotification = _this$props.withNotification,
          animateNotification = _this$props.animateNotification,
          animateNotificationFirstRender = _this$props.animateNotificationFirstRender,
          notificationType = _this$props.notificationType;
      var content;

      if (!this.state.mounted && animateNotificationFirstRender) {
        return;
      }

      if (!withNotification) {
        content = null;
      } else if (typeof withNotification === 'boolean') {
        var _cn;

        content = /*#__PURE__*/_react.default.createElement("span", {
          className: (0, _classnames.default)((_cn = {}, _cn[_iconBadgeHOCModule.default.notification] = true, _cn[_iconBadgeHOCModule.default.notification_square] = square, _cn[_iconBadgeHOCModule.default["notification_type_" + notificationType]] = notificationType, _cn)),
          style: {
            boxShadow: "0 0 0 " + BORDER_WIDTH[size] + "px " + (topBadgeBorderColor || badgeBorderColor),
            backgroundColor: topBadgeBackgroundColor || badgeBackgroundColor
          }
        });
      } else {
        content = this.renderBadge(withNotification > 99 ? '99+' : withNotification, 'top', size);
      }

      return animateNotification ? /*#__PURE__*/_react.default.createElement(_CSSTransitionGroup.default, {
        animateFirstRender: animateNotificationFirstRender,
        transitionName: {
          show: _iconBadgeHOCModule.default.transition_show,
          hide: _iconBadgeHOCModule.default.transition_hide,
          enter: _iconBadgeHOCModule.default.transition_enter,
          leave: _iconBadgeHOCModule.default.transition_leave
        }
      }, content) : content;
    };

    _proto.renderBadge = function renderBadge(badge, position, size) {
      var _cn2;

      if (!badge) {
        return null;
      }

      var _this$props2 = this.props,
          badgeBorderColor = _this$props2.badgeBorderColor,
          badgeBackgroundColor = _this$props2.badgeBackgroundColor,
          topBadgeBorderColor = _this$props2.topBadgeBorderColor,
          topBadgeBackgroundColor = _this$props2.topBadgeBackgroundColor,
          bottomBadgeBackgroundColor = _this$props2.bottomBadgeBackgroundColor,
          bottomBadgeBorderColor = _this$props2.bottomBadgeBorderColor,
          square = _this$props2.square;
      var isText;
      var badgeContent;
      var isLongText;

      switch (typeof badge) {
        case 'string':
        case 'number':
          isText = true;
          isLongText = badge.toString().length > 1;
          badgeContent = badge;
          break;

        case 'function':
          {
            badgeContent = badge({
              size: size
            });
            break;
          }
      }

      return /*#__PURE__*/_react.default.createElement("span", {
        className: (0, _classnames.default)((_cn2 = {}, _cn2[_iconBadgeHOCModule.default.badgeWrapper] = true, _cn2[_iconBadgeHOCModule.default["badgeWrapper_position_" + position]] = true, _cn2[_iconBadgeHOCModule.default.badgeWrapper_text] = isText, _cn2[_iconBadgeHOCModule.default.badgeWrapper_longText] = isLongText, _cn2[_iconBadgeHOCModule.default.badgeWrapper_square] = square, _cn2)),
        style: {
          boxShadow: position === 'top' ? "0 0 0 " + BORDER_WIDTH[size] + "px " + (topBadgeBorderColor || badgeBorderColor) : "0 0 0 " + BORDER_WIDTH[size] + "px " + (bottomBadgeBorderColor || badgeBorderColor),
          backgroundColor: position === 'top' ? topBadgeBackgroundColor || badgeBackgroundColor : bottomBadgeBackgroundColor || badgeBackgroundColor
        }
      }, badgeContent);
    };

    _proto.render = function render() {
      var _cn3;

      var _this$props3 = this.props,
          topBadge = _this$props3.topBadge,
          bottomBadge = _this$props3.bottomBadge,
          withNotification = _this$props3.withNotification,
          iconSize = _this$props3.iconSize,
          verticalAlign = _this$props3.verticalAlign,
          badgeBorderColor = _this$props3.badgeBorderColor,
          badgeBackgroundColor = _this$props3.badgeBackgroundColor,
          topBadgeBorderColor = _this$props3.topBadgeBorderColor,
          topBadgeBackgroundColor = _this$props3.topBadgeBackgroundColor,
          bottomBadgeBackgroundColor = _this$props3.bottomBadgeBackgroundColor,
          bottomBadgeBorderColor = _this$props3.bottomBadgeBorderColor,
          animateNotification = _this$props3.animateNotification,
          animateNotificationFirstRender = _this$props3.animateNotificationFirstRender,
          notificationType = _this$props3.notificationType,
          otherProps = (0, _objectWithoutPropertiesLoose2.default)(_this$props3, _excluded); // @ts-ignore

      var size = SIZES_MAP[(0, _Icon.roundSize)(iconSize, _Icon.ICON_SIZES)] || iconSize || 'l';
      return /*#__PURE__*/_react.default.createElement("span", {
        className: (0, _classnames.default)((_cn3 = {}, _cn3[_iconBadgeHOCModule.default.root] = true, _cn3[_iconBadgeHOCModule.default["root_size_" + size]] = true, _cn3)),
        style: {
          verticalAlign: verticalAlign
        }
      }, /*#__PURE__*/_react.default.createElement(WrappedComponent, Object.assign({}, otherProps, {
        iconSize: iconSize
      })), this.renderNotification(size), !withNotification ? this.renderBadge(topBadge, 'top', size) : undefined, this.renderBadge(bottomBadge, 'bottom', size));
    };

    return BadgeWrapper;
  }(_react.PureComponent);

  BadgeWrapper.defaultProps = (0, _extends2.default)({}, WrappedComponent.defaultProps, {
    badgeBorderColor: '#FFFFFF',
    topBadgeBorderColor: null,
    topBadgeBackgroundColor: null,
    bottomBadgeBackgroundColor: null,
    bottomBadgeBorderColor: null,
    bottomBadge: null,
    topBadge: null,
    withNotification: false,
    animateNotification: true,
    animateNotificationFirstRender: false,
    square: false,
    verticalAlign: 'top',
    notificationType: NOTIFICATION_TYPES.WARNING
  });
  (0, _hoistNonReactStatics.default)(BadgeWrapper, WrappedComponent);
  return BadgeWrapper;
};

var _default = iconBadgeHOC;
exports.default = _default;