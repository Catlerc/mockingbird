import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import debug from 'debug';
import map from '@tinkoff/utils/object/map';
import reduce from '@tinkoff/utils/object/reduce';
const log = debug('Tinkoff::errors::deprecated');
const setDefaults = map(deprecation => _extends({
  check: (props, propName) => props[propName] !== undefined,
  transform: props => props,
  message: (props, propName, componentName) => `'${propName} prop of '${componentName}' is deprecated'`
}, deprecation));
export const deprecateProps = options => {
  const deprecations = setDefaults(options);
  return WrappedComponent => {
    const withDeprecatedProps = originProps => {
      const props = reduce((prop, {
        check,
        transform,
        message
      }, propName) => {
        if (!check(prop, propName)) {
          return prop;
        }

        log(message(prop, propName, WrappedComponent.displayName));
        return transform(prop, propName);
      }, originProps, deprecations);
      return /*#__PURE__*/React.createElement(WrappedComponent, props);
    };

    withDeprecatedProps.displayName = `DeprecateProps(${Object.keys(deprecations).join(', ')})(${WrappedComponent.displayName || WrappedComponent.name || 'Component(!)'})`;
    process.env.NODE_ENV !== "production" ? withDeprecatedProps.propTypes = WrappedComponent.propTypes : void 0;
    withDeprecatedProps.defaultProps = WrappedComponent.defaultProps;
    return withDeprecatedProps;
  };
};