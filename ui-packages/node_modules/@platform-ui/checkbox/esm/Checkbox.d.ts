import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { CheckableProps } from '@platform-ui/checkable';
import type { CheckableInputProps } from '@platform-ui/types';
declare type CustomTheme = {
    background?: string;
    backgroundChecked?: string;
    color?: string;
    borderColor?: string;
    errorStyles?: Omit<CustomTheme, 'errorStyles'>;
};
export interface CheckboxStatelessProps extends DataQaInterface, CheckableInputProps {
    id?: string;
    /**
     * Размер инпута
     *
     * `"l"` – 24px
     *
     * `"s"` – 16px
     * @default "l"
     */
    size?: 'l' | 's';
    /**
     * Тема
     *
     * `"default"` – стандартная
     *
     * `"clear"` – полупрозрачная для цветных фонов
     *
     * `{ ... }` – объект с кастомными значениями, см. пример
     *
     * @default "default"
     */
    theme?: 'default' | 'clear' | CustomTheme;
    /**
     * Состояние ошибки
     */
    error?: boolean;
    /**
     * Неопределённое состояние
     * В основном нужно для отображения частичного выбора в древовидных структурах
     */
    indeterminate?: boolean;
    /**
     * Все прочие атрибуты элемента `input`, пробрасываются как есть.
     * Проп в первую очередь предназначен для проброса `aria-` и `data-` атрибутов в нетривиальных кейсах,
     * не стоит злоупотреблять его возможностями (напр. использовать для стилизации)
     */
    inputAttrs?: Omit<CheckableProps, keyof CheckboxStatelessProps | 'type' | 'className' | 'style'>;
}
export declare const CheckboxStateless: React.ComponentType<CheckboxStatelessProps>;
declare const Checkbox: React.ForwardRefExoticComponent<Omit<CheckboxStatelessProps, keyof import("@platform-ui/stateUtils").CheckableInputPropsConstraint<any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams>> & Partial<Pick<CheckboxStatelessProps, keyof import("@platform-ui/stateUtils").CheckableInputPropsConstraint<any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams>>> & {
    defaultChecked?: boolean | undefined;
} & React.RefAttributes<never>>;
export declare type CheckboxProps = React.ComponentProps<typeof Checkbox>;
export default Checkbox;
