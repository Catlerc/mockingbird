import type { ComponentProps } from 'react';
export declare const RadioLabeledStateless: (props: import("./withLabel").WithLabelProps<import("@platform-ui/radio").RadioStatelessProps>) => JSX.Element;
export declare type RadioLabeledStatelessProps = ComponentProps<typeof RadioLabeledStateless>;
export declare const RadioLabeled: import("react").ForwardRefExoticComponent<Omit<Omit<import("@platform-ui/radio").RadioStatelessProps, keyof import("./withLabel").LabeledInputProps> & Omit<import("./Label").LabelProps, "input"> & {
    hintBlock?: import("react").ReactNode;
}, keyof import("@platform-ui/stateUtils").CheckableInputPropsConstraint<any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams>> & Partial<Pick<Omit<import("@platform-ui/radio").RadioStatelessProps, keyof import("./withLabel").LabeledInputProps> & Omit<import("./Label").LabelProps, "input"> & {
    hintBlock?: import("react").ReactNode;
}, keyof import("@platform-ui/stateUtils").CheckableInputPropsConstraint<any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams>>> & {
    defaultChecked?: boolean | undefined;
} & import("react").RefAttributes<never>>;
export declare type RadioLabeledProps = ComponentProps<typeof RadioLabeled>;
