"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.registryIcon = exports.loadIcon = exports.isAbsoluteUrl = exports.getLoaderForIconPath = exports.getIcon = exports.getFileName = exports.beautify = void 0;

var _fileLoader = _interopRequireDefault(require("@platform-ui/utils/fileLoader"));

var _startsWith = _interopRequireDefault(require("@tinkoff/utils/string/startsWith"));

// @ts-ignore
var icons = {};
var loaders = Object.create(null);

var isAbsoluteUrl = function isAbsoluteUrl(str) {
  return ['http://', 'https://', '//'].some(function (prefix) {
    return (0, _startsWith.default)(prefix, str);
  });
};

exports.isAbsoluteUrl = isAbsoluteUrl;

var registryIcon = function registryIcon(id, icon) {
  icons[id] = icon;
};

exports.registryIcon = registryIcon;

var getIcon = function getIcon(id) {
  return icons[id];
};

exports.getIcon = getIcon;

var beautify = function beautify(text) {
  return text.replace(/[\t\n\r]+/g, '');
};

exports.beautify = beautify;

var getFileName = function getFileName(iconPathOrContent) {
  var svgFileNameRE = /[\w-]+\.svg/;
  var matches = iconPathOrContent.match(svgFileNameRE);
  var svgFileName = matches ? matches[0] : undefined;

  if (isAbsoluteUrl(iconPathOrContent)) {
    return svgFileName;
  }

  if (process.env.SERVER) {
    /*
     * ATTENTION! Ожидаем, при сборке у пользователя иконок для браузера - имя файла === md5 hash от контента файла
     * (механизм по умолчанию у webpack file-loader)
     * За счет этого результирующее  имя файла одной икони будет одинаковым на клиенте и сервере
     * (используется далее в атрибуте data-svg-id)
     * - иначе это будет вест к лишним загрузкам и перерендерам.
     * Но таким образом создается неявная связь со сборщиком платформенным :(
     */
    var md5 = require('spark-md5').hash;

    return md5(iconPathOrContent) + ".svg";
  }

  return svgFileName;
};

exports.getFileName = getFileName;

var loadIcon = function loadIcon(iconPathOrContent) {
  var id = getFileName(iconPathOrContent);

  if (id && icons[id]) {
    return Promise.resolve(icons[id]);
  }

  loaders[iconPathOrContent] = loaders[iconPathOrContent] || (0, _fileLoader.default)(iconPathOrContent);
  return loaders[iconPathOrContent].then(function (payload) {
    var icon = beautify(payload);
    registryIcon(id, icon);
    return icon;
  });
};

exports.loadIcon = loadIcon;

var getLoaderForIconPath = function getLoaderForIconPath(iconPath) {
  return loaders[iconPath];
};

exports.getLoaderForIconPath = getLoaderForIconPath;