"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _registry = require("./registry");

var _excluded = ["iconPath", "fallbackBlock"];
var serverIconPlaceholder = '';

var cacheAndGetBack = function cacheAndGetBack(id, icon) {
  (0, _registry.registryIcon)(id, icon);
  return icon;
};

var isBrowser = function isBrowser() {
  return typeof window !== 'undefined' && 'document' in window;
};

var getFileInPath = function getFileInPath(id, iconPathOrContent) {
  if (process.env.SERVER) {
    // для сервера и браузера разные способы получения иконки
    if ((0, _registry.isAbsoluteUrl)(iconPathOrContent)) {
      (0, _registry.loadIcon)(iconPathOrContent);
      return serverIconPlaceholder;
    }

    var iconContent = (0, _registry.beautify)(iconPathOrContent);
    return cacheAndGetBack(id, iconContent);
  }

  if (isBrowser()) {
    var element = document.querySelector("[data-svg-id=\"" + id + "\"]"); // мы проверяем, что сервер отрендерил иконку и мы можем просто получить код иконки

    if (!element) {
      return false; // если нет иконки, то значит это не ssr и мы должны сами скачать
    }

    var children = element.innerHTML;

    if (children === undefined) {
      // -_- ie не умеет в innerHTML у svg
      children = (0, _registry.beautify)(new XMLSerializer().serializeToString(element));
    }

    return cacheAndGetBack(id, children);
  }
};

var getFileIcon = function getFileIcon(id, iconPath) {
  if (process.env.NODE_ENV === 'test') {
    // при юнит-тестировании должно быть все равно на иконки
    return false;
  }

  if ((0, _registry.getIcon)(id)) {
    // если есть в кэше, то отдаем сразу же
    return (0, _registry.getIcon)(id);
  }

  return getFileInPath(id, iconPath);
};

var _default = function _default(Icon) {
  return function WithIconLoader(_ref) {
    var iconPath = _ref.iconPath,
        fallbackBlock = _ref.fallbackBlock,
        otherProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);

    var _useState = (0, _react.useState)((0, _registry.getFileName)(iconPath)),
        id = _useState[0],
        setId = _useState[1];

    var _useState2 = (0, _react.useState)(false),
        mounted = _useState2[0],
        setMounted = _useState2[1];

    var _useState3 = (0, _react.useState)(getFileIcon(id, iconPath)),
        icon = _useState3[0],
        setIcon = _useState3[1];

    var _useState4 = (0, _react.useState)(false),
        notLoaded = _useState4[0],
        setNotLoaded = _useState4[1];

    var loader = (0, _registry.getLoaderForIconPath)(iconPath);
    var prevPath = (0, _react.useRef)('');

    if (loader) {
      loader.then(function (i) {
        return i !== icon && setIcon(i);
      }).catch(function () {
        return setIcon('');
      });
    }

    (0, _react.useEffect)(function () {
      if (id && iconPath) {
        var i = getFileIcon(id, iconPath);
        i && setIcon(i);
      }

      setMounted(true);
      return function () {
        setMounted(false);
      }; // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    (0, _react.useEffect)(function () {
      if (prevPath.current !== iconPath) {
        setId((0, _registry.getFileName)(iconPath));
        (0, _registry.loadIcon)(iconPath).then(function (i) {
          if (mounted) {
            setIcon(i);
          }
        }).catch(function () {
          setNotLoaded(true);
        });
      }

      prevPath.current = iconPath;
    }, [icon, iconPath, mounted]);

    if (notLoaded && fallbackBlock) {
      return fallbackBlock;
    }

    return icon ? /*#__PURE__*/_react.default.createElement(Icon, Object.assign({}, otherProps, {
      svgCode: icon,
      dataSvgId: id
    })) : /*#__PURE__*/_react.default.createElement("div", {
      style: {
        width: otherProps.width || otherProps.size || otherProps.containerSize || otherProps.iconSize,
        height: otherProps.height || otherProps.size || otherProps.containerSize || otherProps.iconSize
      }
    });
  };
};

exports.default = _default;