import React, { PureComponent } from 'react';
import Mask from './utils/mask';
import type { StatelessInputProps } from './StatelessInput';
import type { InputOnChangeCallback, InputOnFocusCallback, InputOnBlurCallback, InputOnKeyDownCallback, InputOnKeyDownEvent, InputOnKeyDownParams, InputOnClickCallback, MaskedInputTypes, MaskedInputOnBlurCallback, MaskedInputOnChangeCallback, MaskedInputOnChangeEvent, MaskedInputOnChangeParams, MaskedInputOnFieldDoneCallback, MaskedInputOnFocusCallback } from './types';
export interface MaskedInputProps extends Omit<StatelessInputProps, 'type' | 'value' | 'onBlur' | 'onChange' | 'onFieldDone' | 'onFocus'> {
    inputComponent?: React.ComponentType<StatelessInputProps>;
    mask?: string;
    type?: MaskedInputTypes;
    maskTransitions?: Record<string, RegExp>;
    hintholder?: boolean;
    fieldDoneStrategy?: 'anyInput' | 'lastCharInput' | 'blur' | 'lastCharBlur';
    value?: string;
    /**
     * Используется вместо пропа value, нужен если передаётся сразу маскированное значение
     */
    maskedValue?: string;
    showMaskPrefix?: boolean;
    onBlur?: MaskedInputOnBlurCallback;
    onChange: MaskedInputOnChangeCallback;
    onFieldDone?: MaskedInputOnFieldDoneCallback;
    onFocus?: MaskedInputOnFocusCallback;
}
declare class MaskedInput extends PureComponent<MaskedInputProps> {
    input?: HTMLInputElement;
    mask: InstanceType<typeof Mask>;
    syncState: {
        value: string;
        maskedValue: string;
    };
    refInput: (ref: HTMLInputElement) => void;
    hasValue: (value?: string | undefined) => boolean;
    constructor(props: MaskedInputProps);
    static defaultProps: Partial<MaskedInputProps>;
    UNSAFE_componentWillReceiveProps(nextProps: MaskedInputProps): void;
    handleBlur: InputOnBlurCallback;
    handleFocus: InputOnFocusCallback;
    handleClick: InputOnClickCallback;
    handleChange: InputOnChangeCallback;
    handleKeyDown: InputOnKeyDownCallback;
    getPlaceholderProps(): {
        placeholder: string | undefined;
        partialPlaceholder: boolean | undefined;
    };
    adjustCaret(): void;
    updateInput(event: MaskedInputOnChangeEvent | InputOnKeyDownEvent | null, params: MaskedInputOnChangeParams | InputOnKeyDownParams | {}, pureValue: string, caretPosition: number, force?: boolean): void;
    calcNextEditPosition(firstPos: number, sign: number): number;
    get selection(): any;
    set selection(selection: any);
    shouldUpdateMask(nextProps: MaskedInputProps): boolean;
    initMask(props: MaskedInputProps): void;
    render(): JSX.Element;
}
export default MaskedInput;
