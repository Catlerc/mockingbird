import type React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type {
    InputEl,
    InputAttributes,
    InputTypes,
    InputOnKeyDownCallback,
    InputOnKeyPressCallback,
    InputOnKeyUpCallback,
    InputOnChangeCallback,
    InputOnFocusCallback,
    InputOnBlurCallback,
    InputOnCleanCallback,
    InputOnClickCallback,
    InputOnInputCallback
} from './types';

interface Callbacks {
    /**
     * Callback события onAnimationStart
     */
    onAnimationStart?: InputAttributes['onAnimationStart'];
    /**
     * Callback события onBlur
     */
    onBlur?: InputOnBlurCallback;
    /**
     * Callback события onChange
     */
    onChange: InputOnChangeCallback;
    /**
     * Callback события onClean
     */
    onClean?: InputOnCleanCallback;
    /**
     * Callback события onClick
     */
    onClick?: InputOnClickCallback;
    /**
     * Callback события onFocus
     */
    onFocus?: InputOnFocusCallback;
    /**
     * Callback события onInput
     */
    onInput?: InputOnInputCallback;
    /**
     * Callback события onKeyDown
     */
    onKeyDown?: InputOnKeyDownCallback;
    /**
     * Callback события onKeyPress
     */
    onKeyPress?: InputOnKeyPressCallback;
    /**
     * Callback события onKeyUp
     */
    onKeyUp?: InputOnKeyUpCallback;
    /**
     * Callback события onPaste
     */
    onPaste?: InputAttributes['onPaste'];
}

interface AriaProps {
    /**
     * Атрибут aria-label для нативного инпута
     */
    ariaLabel?: InputAttributes['aria-label'];
    /**
     * Атрибут aria-labelledby для нативного инпута
     */
    ariaLabelledby?: InputAttributes['aria-labelledby'];
    /**
     * Атрибут aria-autocomplete для нативного инпута
     */
    ariaAutocomplete?: InputAttributes['aria-autocomplete'];
    /**
     * Атрибут aria-controls для нативного инпута
     */
    ariaControls?: InputAttributes['aria-controls'];
    /**
     * Атрибут aria-describedby для нативного инпута
     */
    ariaDescribedBy?: InputAttributes['aria-describedby'];
    /**
     * Атрибут aria-errormessage для нативного инпута
     */
    ariaErrorMessage?: InputAttributes['aria-errormessage'];
}

export interface StatelessInputProps extends AriaProps, Callbacks, DataQaInterface {
    /**
     * Включает autoComplete у нативномого инпута
     */
    autoComplete?: InputAttributes['autoComplete'];
    /**
     * Включает подсветку автозаполнения
     */
    autofilled?: boolean;
    /**
     * Включает autoFocus у нативного инпута (нужен только для SSR)
     */
    autoFocus?: boolean;
    /**
     * Включает крестик для очистки поля
     */
    cleanable?: boolean;
    /**
     * Включает необходимые атрибуты для cobrowsing
     */
    cobrowsingSecure?: boolean;
    /**
     * Курсор при ховере на поле
     */
    cursor?: React.CSSProperties['cursor'];
    /**
     * Состояние disabled
     */
    disabled?: boolean;
    /**
     * Состояние error
     */
    error?: boolean;
    /**
     * Состояние filled
     */
    filled?: boolean;
    /**
     * Отключает скругление углов
     */
    flatCorners?: string;
    /**
     * Состояние focused
     */
    focused?: boolean;
    /**
     * Опции для передачи в focus
     */
    focusOptions?: {
        preventScroll?: boolean
    };
    /**
     * ref переданный через React.forwardRef
     */
    forwardedRef?: React.RefCallback<InputEl>;
    /**
     * Слот для вывода подсказки
     */
    hintBlock?: React.ReactNode;
    /**
     * Атрибут id для нативного инпута
     */
    id?: string;
    /**
     * Контейнер для информации по инпуту (логотип карты, флаг государства и тд.)
     * Контейнер расположен первым за инпутом
     */
    informationContent?: React.ReactNode;
    /**
     * Слот для иконки, например стрелка у select, календарь у inputDate, лупа у inputSearch
     */
    inputIcon?: React.ReactNode;
    /**
     * Модификация инпута.
     * Позволяет задать тип клавиатуры
     */
    inputMode?: InputAttributes['inputMode'];
    /**
     * Лейбл
     */
    label?: React.ReactNode;
    /**
     * Id лейбла
     */
    labelId?: string;
    /**
     * Слот для содержимого слева
     */
    leftContent?: React.ReactNode;
    /**
     * Максимальное значение для `type="number"`
     */
    max?: number;
    /**
     * Ограничивает максимальную длину содержимого инпута
     */
    maxLength?: number;
    /**
     * Минимальное значение для `type="number"`
     */
    min?: number;
    /**
     * Атрибут name для нативного инпута
     */
    name?: string;
    /**
     * Включает частичный плейсхолдер
     */
    partialPlaceholder?: boolean;
    /**
     * Паттерн для нативного инпута
     */
    pattern?: InputAttributes['pattern'];
    /**
     * Текст плейсхолдера
     */
    placeholder?: InputAttributes['placeholder'];
    /**
     * Текст перед значением
     */
    prefix?: string;
    /**
     * Текст после значения
     */
    postfix?: string;
    /**
     * Состояние readOnly
     */
    readOnly?: boolean;
    /**
     * Callback для установки рефа на нативный инпут.
     * Deprecated. Используйте ref.
     */
    refCallback?: React.RefCallback<InputEl>;
    /**
     * Обязательное поле, помечается звёздочкой
     */
    required?: boolean;
    /**
     * Слот для содержимого справа
     */
    rightContent?: React.ReactNode;
    /**
     * Размер инпута (default: l)
     * Доступные размеры: [l - 56px, m - 44px, s - 32px]
     */
    size?: 'l' | 'm' | 's';
    /**
     * Минимальный шаг значения для `type="number"`
     */
    step?: number;
    /**
     * Выключает стили контейнера
     */
    transparent?: boolean;
    /**
     * Атрибут type для нативного инпута
     */
    type?: InputTypes;
    /**
     * Включает валидное состояние
     */
    valid?: boolean;
    /**
     * Значение инпута
     */
    value: number | string;
    /**
     * Добавляет многоточие в расфокусированном состоянии.
     * Нужен для особых случаев, например readonly-инпут для копирования ссылок, для обычных инпутов применять не
     * рекомендуется
     */
    ellipsis?: boolean;
    /**
     * Кастомный компонент для отображения значения
     */
    valueComponent?: React.ComponentType;
}

declare const StatelessInput: React.ComponentType<StatelessInputProps>;

export declare const isDefinedValue: (value: unknown) => boolean;

export default StatelessInput;
