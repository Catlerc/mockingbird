/// <reference types="react" />
import InputNoFocus from './StatelessInput';
import MaskedInputNoFocus from './MaskedInput';
declare const MaskedInput: import("react").ComponentType<import("@platform-ui/focusStateHOC").WithOptionalFocus<Function, Function, import("./MaskedInput").MaskedInputProps>>;
declare const _default: import("react").ComponentType<import("@platform-ui/focusStateHOC").WithOptionalFocus<Function, Function, import("./StatelessInput").StatelessInputProps>>;
export default _default;
export { InputNoFocus, MaskedInputNoFocus, MaskedInput };
export { default as inputHintHOC } from './InputHintHOC';
export { default as inputLayoutHOC } from './InputLayoutHOC';
export { isDefinedValue } from './StatelessInput';
export { default as Mask } from './utils/mask';
export { toLatinOnlyCharStr, toCyrillicOnlyCharStr } from './utils/textConversion';
export type { StatelessInputProps as InputProps } from './StatelessInput';
export type { MaskedInputProps } from './MaskedInput';
export type { InputTypes, InputChangeEvent, InputKeyboardEvent, InputFocusEvent, InputClickEvent, InputNameParams, InputValueParams, InputMaskedValueParams, InputOnKeyDownEvent, InputOnKeyDownParams, InputOnKeyDownCallback, InputOnKeyPressEvent, InputOnKeyPressParams, InputOnKeyPressCallback, InputOnKeyUpEvent, InputOnKeyUpParams, InputOnKeyUpCallback, InputOnFocusEvent, InputOnFocusParams, InputOnFocusCallback, InputOnBlurEvent, InputOnBlurParams, InputOnBlurCallback, InputOnCleanEvent, InputOnCleanParams, InputOnCleanCallback, InputOnClickEvent, InputOnClickParams, InputOnClickCallback, InputOnChangeEvent, InputOnChangeParams, InputOnChangeCallback, InputOnInputEvent, InputOnInputParams, InputOnInputCallback, MaskedInputTypes, MaskedInputOnBlurEvent, MaskedInputOnBlurParams, MaskedInputOnBlurCallback, MaskedInputOnChangeEvent, MaskedInputOnChangeParams, MaskedInputOnChangeCallback, MaskedInputOnFieldDoneEvent, MaskedInputOnFieldDoneParams, MaskedInputOnFieldDoneCallback, MaskedInputOnFocusEvent, MaskedInputOnFocusParams, MaskedInputOnFocusCallback } from './types';
