import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["hintContent", "id", "isActiveHint", "isInactiveHint", "focusableHint", "hintBubbleTheme"];
import React from 'react';
import pt from 'prop-types';
import hoistStatics from 'hoist-non-react-statics';
import { useId } from '@platform-ui/generateId';
import { Hint } from '@platform-ui/tooltip';

const InputHintHOC = WrappedComponent => {
  const getName = Component => Component.displayName || Component.name || 'Component(!)';

  const HintWrapper = _ref => {
    let {
      hintContent,
      id: propsId,
      isActiveHint,
      isInactiveHint,
      focusableHint,
      hintBubbleTheme
    } = _ref,
        otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

    const id = useId(propsId);

    const handleMouseDown = event => {
      event.stopPropagation();
    };

    return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, otherProps, {
      id: id,
      hintBlock: hintContent ? /*#__PURE__*/React.createElement("span", {
        onMouseDown: handleMouseDown
      }, /*#__PURE__*/React.createElement(Hint, {
        popoverContent: hintContent,
        direction: "bottom",
        align: "end",
        theme: hintBubbleTheme,
        additionalShift: 12,
        ariaOwnsId: id,
        isActive: isActiveHint,
        isInactive: isInactiveHint,
        focusable: focusableHint
      })) : undefined
    }));
  };

  process.env.NODE_ENV !== "production" ? HintWrapper.propTypes = _extends({}, WrappedComponent.propTypes, {
    hintContent: pt.node,
    isActiveHint: pt.bool,
    isInactiveHint: pt.bool,
    hintBubbleTheme: pt.string
  }) : void 0;
  HintWrapper.defaultProps = _extends({}, WrappedComponent.defaultProps, {
    hintContent: null,
    isActiveHint: undefined,
    isInactiveHint: undefined,
    hintBubbleTheme: 'dark'
  });
  HintWrapper.displayName = getName(WrappedComponent);
  return hoistStatics(HintWrapper, WrappedComponent);
};

export default InputHintHOC;