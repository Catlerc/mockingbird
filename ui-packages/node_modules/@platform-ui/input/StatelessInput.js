"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.isDefinedValue = exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("@tinkoff/utils/function/noop"));

var _memoizeWeak = _interopRequireDefault(require("@platform-ui/memoizeWeak"));

var _generateId = _interopRequireDefault(require("@platform-ui/generateId"));

var _inputBox = _interopRequireDefault(require("@platform-ui/inputBox"));

var _inputTools = require("@platform-ui/inputTools");

var _InputModule = _interopRequireDefault(require("./Input.module.css"));

var _isAutoFill = _interopRequireDefault(require("./utils/isAutoFill"));

var InputComponent = (0, _inputTools.placeholderHOC)(_inputTools.InlinePlaceholder)(_inputTools.InlineInput);
var PrefixPostfixInputComponent = (0, _inputTools.placeholderHOC)(_inputTools.InlinePlaceholder)(_inputTools.PrefixPostfixInput);

var isDefinedValue = function isDefinedValue(value) {
  return Boolean(value) || value === 0;
};

exports.isDefinedValue = isDefinedValue;

var autoCompleteValue = function autoCompleteValue(autoCompleteProp) {
  if (typeof autoCompleteProp === 'string') {
    return autoCompleteProp;
  }

  return autoCompleteProp ? 'on' : 'off';
};

var Input = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2.default)(Input, _PureComponent);

  function Input() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.labelId = (0, _generateId.default)((0, _assertThisInitialized2.default)(_this));
    _this.decorateCallback = (0, _memoizeWeak.default)(function (callback) {
      return function (event, params) {
        return callback(event, (0, _extends2.default)({
          name: _this.props.name
        }, params));
      };
    });

    _this.setRef = function (elem) {
      var refCallback = _this.props.forwardedRef || _this.props.refCallback;
      _this.input = elem;
      refCallback(elem);
    };

    _this.handleBlur = function (event, params) {
      var onBlur = _this.props.onBlur; // отматывает значение в начало по блюру, исправляет баг в FF (https://)

      if (_this.input) {
        _this.input.scrollLeft = 0;
      }

      _this.decorateCallback(onBlur)(event, (0, _extends2.default)({}, params, {
        value: event.target.value
      }));
    };

    _this.handleCleanerClick = function (event, params) {
      _this.decorateCallback(_this.props.onChange)(event, (0, _extends2.default)({}, params, {
        value: ''
      }));

      _this.decorateCallback(_this.props.onClean)(event, params);
    };

    _this.handleChange = function (event, params) {
      var autofilled = event ? (0, _isAutoFill.default)(event) : false;

      _this.decorateCallback(_this.props.onChange)(event, (0, _extends2.default)({}, params, {
        value: event.target.value,
        autofilled: autofilled
      }));
    };

    return _this;
  }

  var _proto = Input.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.props.focused ? this.focus(this.props.focusOptions) : this.blur();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (!prevProps.focused && this.props.focused) {
      this.focus(this.props.focusOptions);
    }

    if (prevProps.focused && !this.props.focused) {
      this.blur();
    }
  };

  _proto.focus = function focus(options) {
    this.input && this.input.focus && this.input.focus(options);
  };

  _proto.blur = function blur() {
    this.input && this.input.blur && this.input.blur();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        ariaLabel = _this$props.ariaLabel,
        ariaLabelledby = _this$props.ariaLabelledby,
        ariaAutocomplete = _this$props.ariaAutocomplete,
        ariaControls = _this$props.ariaControls,
        ariaDescribedBy = _this$props.ariaDescribedBy,
        ariaErrorMessage = _this$props.ariaErrorMessage,
        autoComplete = _this$props.autoComplete,
        autofilled = _this$props.autofilled,
        autoFocus = _this$props.autoFocus,
        cleanable = _this$props.cleanable,
        cobrowsingSecure = _this$props.cobrowsingSecure,
        cursor = _this$props.cursor,
        dataQaData = _this$props.dataQaData,
        dataQaType = _this$props.dataQaType,
        disabled = _this$props.disabled,
        error = _this$props.error,
        filled = _this$props.filled,
        flatCorners = _this$props.flatCorners,
        focused = _this$props.focused,
        hintBlock = _this$props.hintBlock,
        id = _this$props.id,
        inputIcon = _this$props.inputIcon,
        inputMode = _this$props.inputMode,
        label = _this$props.label,
        labelId = _this$props.labelId,
        leftContent = _this$props.leftContent,
        max = _this$props.max,
        maxLength = _this$props.maxLength,
        min = _this$props.min,
        name = _this$props.name,
        onAnimationStart = _this$props.onAnimationStart,
        onClick = _this$props.onClick,
        onFocus = _this$props.onFocus,
        onInput = _this$props.onInput,
        onKeyDown = _this$props.onKeyDown,
        onKeyPress = _this$props.onKeyPress,
        onKeyUp = _this$props.onKeyUp,
        onPaste = _this$props.onPaste,
        partialPlaceholder = _this$props.partialPlaceholder,
        pattern = _this$props.pattern,
        placeholder = _this$props.placeholder,
        prefix = _this$props.prefix,
        postfix = _this$props.postfix,
        readOnly = _this$props.readOnly,
        required = _this$props.required,
        rightContent = _this$props.rightContent,
        informationContent = _this$props.informationContent,
        size = _this$props.size,
        step = _this$props.step,
        transparent = _this$props.transparent,
        type = _this$props.type,
        valid = _this$props.valid,
        value = _this$props.value,
        ellipsis = _this$props.ellipsis,
        __overrideStyles = _this$props.__overrideStyles,
        ValueComponent = _this$props.valueComponent;
    var showPrefixPostfix = isDefinedValue(value) && (prefix || postfix) && !(autoComplete && focused);
    var inputBoxProps = {
      autofilled: autofilled,
      cleanable: cleanable,
      cursor: cursor,
      dataQaType: dataQaType + ".inputBox",
      disabled: disabled,
      error: error,
      flatCorners: flatCorners,
      focused: focused,
      hintBlock: hintBlock,
      inputIcon: inputIcon,
      label: label,
      labelId: labelId,
      leftContent: leftContent,
      readOnly: readOnly,
      required: required,
      rightContent: rightContent,
      informationContent: informationContent,
      size: size,
      transparent: transparent,
      valid: valid,
      __overrideStyles: __overrideStyles,
      labelFor: id,
      filled: typeof filled === 'boolean' ? filled : isDefinedValue(value),
      onClean: this.handleCleanerClick
    };
    var inputProps = (0, _extends2.default)({
      dataQaType: dataQaType + ".value",
      autoFocus: autoFocus,
      cobrowsingSecure: cobrowsingSecure,
      disabled: disabled,
      id: id,
      inputMode: inputMode,
      max: max,
      maxLength: maxLength,
      min: min,
      name: name,
      onAnimationStart: onAnimationStart,
      partialPlaceholder: partialPlaceholder,
      pattern: pattern,
      placeholder: placeholder,
      readOnly: readOnly,
      required: required,
      step: step,
      type: type,
      value: value,
      __overrideStyles: __overrideStyles,
      ref: this.setRef,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      onClick: this.decorateCallback(onClick),
      onFocus: this.decorateCallback(onFocus),
      onInput: this.decorateCallback(onInput),
      onKeyDown: this.decorateCallback(onKeyDown),
      onKeyPress: this.decorateCallback(onKeyPress),
      onKeyUp: this.decorateCallback(onKeyUp),
      onPaste: onPaste,
      autoComplete: autoCompleteValue(autoComplete),
      ellipsis: ellipsis,
      'aria-controls': ariaControls,
      'aria-autocomplete': ariaAutocomplete,
      'aria-errormessage': ariaErrorMessage,
      'aria-describedby': ariaDescribedBy,
      'aria-invalid': error,
      'aria-label': ariaLabel,
      'aria-labelledby': ariaLabelledby || labelId || this.labelId
    }, showPrefixPostfix ? {
      prefix: prefix,
      postfix: postfix
    } : {
      minWidth: '100%'
    });
    return /*#__PURE__*/_react.default.createElement(_inputTools.FocusArea, {
      className: _InputModule.default.root,
      "data-qa-data": typeof dataQaData === 'object' ? JSON.stringify(dataQaData) : dataQaData,
      "data-qa-type": dataQaType
    }, /*#__PURE__*/_react.default.createElement(_inputBox.default, inputBoxProps, ValueComponent ? /*#__PURE__*/_react.default.createElement(ValueComponent, this.props) : /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(postfix || prefix ? PrefixPostfixInputComponent : InputComponent, inputProps))));
  };

  return Input;
}(_react.PureComponent);

Input.defaultProps = {
  ariaAutocomplete: null,
  ariaControls: null,
  ariaDescribedBy: null,
  ariaErrorMessage: null,
  autoComplete: false,
  autofilled: false,
  autoFocus: false,
  cleanable: false,
  cobrowsingSecure: false,
  cursor: undefined,
  dataQaType: 'uikit/input',
  disabled: false,
  error: false,
  flatCorners: '',
  focused: false,
  hintBlock: null,
  id: null,
  inputIcon: null,
  inputMode: null,
  label: '',
  labelId: null,
  maxLength: null,
  name: null,
  onAnimationStart: _noop.default,
  onBlur: _noop.default,
  onChange: _noop.default,
  onClean: _noop.default,
  onClick: _noop.default,
  onFocus: _noop.default,
  onInput: _noop.default,
  onKeyDown: _noop.default,
  onKeyPress: _noop.default,
  onKeyUp: _noop.default,
  partialPlaceholder: false,
  pattern: null,
  placeholder: '',
  readOnly: false,
  refCallback: _noop.default,
  required: false,
  size: 'l',
  type: 'text',
  valid: false,
  value: ''
};
process.env.NODE_ENV !== "production" ? Input.propTypes = {
  /**
   * Атрибут aria-label для нативного инпута
   */
  ariaLabel: _propTypes.default.string,

  /**
   * Атрибут aria-labelledby для нативного инпута
   */
  ariaLabelledby: _propTypes.default.string,

  /**
   * Атрибут aria-autocomplete для нативного инпута
   */
  ariaAutocomplete: _propTypes.default.string,

  /**
   * Атрибут aria-controls для нативного инпута
   */
  ariaControls: _propTypes.default.string,

  /**
   * Атрибут aria-describedby для нативного инпута
   */
  ariaDescribedBy: _propTypes.default.string,

  /**
   * Атрибут aria-errormessage для нативного инпута
   */
  ariaErrorMessage: _propTypes.default.string,

  /**
   * Включает autoComplete у нативномого инпута
   */
  autoComplete: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),

  /**
   * Включает подсветку автозаполнения
   */
  autofilled: _propTypes.default.bool,

  /**
   * Включает autoFocus у нативного инпута (нужен только для SSR)
   */
  autoFocus: _propTypes.default.bool,

  /**
   * Включает крестик для очистки поля
   */
  cleanable: _propTypes.default.bool,

  /**
   * Включает необходимые атрибуты для cobrowsing
   */
  cobrowsingSecure: _propTypes.default.bool,

  /**
   * Курсор при ховере на поле
   */
  cursor: _propTypes.default.string,

  /**
   * Атрибут data-qa-data
   */
  dataQaData: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array, _propTypes.default.object, _propTypes.default.number]),

  /**
   * Атрибут data-qa-type
   */
  dataQaType: _propTypes.default.string,

  /**
   * Состояние disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Состояние error
   */
  error: _propTypes.default.bool,

  /**
   * Состояние filled
   */
  filled: _propTypes.default.bool,

  /**
   * Отключает скругление углов
   */
  flatCorners: _propTypes.default.string,

  /**
   * Состояние focused
   */
  focused: _propTypes.default.bool,

  /**
   * Опции для передачи в focus
   */
  focusOptions: _propTypes.default.shape({
    preventScroll: _propTypes.default.bool
  }),

  /**
   * ref переданный через React.forwardRef
   */
  forwardedRef: _propTypes.default.func,

  /**
   * Слот для вывода подсказки
   */
  hintBlock: _propTypes.default.node,

  /**
   * Атрибут id для нативного инпута
   */
  id: _propTypes.default.string,

  /**
   * Контейнер для информации по инпуту (логотип карты, флаг государства и тд.)
   * Контейнер расположен первым за инпутом
   */
  informationContent: _propTypes.default.node,

  /**
   * Слот для иконки, например стрелка у select, календарь у inputDate, лупа у inputSearch
   */
  inputIcon: _propTypes.default.node,

  /**
   * Модификация инпута.
   * Позволяет задать тип клавиатуры
   */
  inputMode: _propTypes.default.string,

  /**
   * Лейбл
   */
  label: _propTypes.default.node,

  /**
   * Id лейбла
   */
  labelId: _propTypes.default.string,

  /**
   * Слот для содержимого слева
   */
  leftContent: _propTypes.default.node,

  /**
   * Максимальное значение для `type="number"`
   */
  max: _propTypes.default.number,

  /**
   * Ограничивает максимальную длину содержимого инпута
   */
  maxLength: _propTypes.default.number,

  /**
   * Минимальное значение для `type="number"`
   */
  min: _propTypes.default.number,

  /**
   * Атрибут name для нативного инпута
   */
  name: _propTypes.default.string,

  /**
   * Callback события onAnimationStart
   */
  onAnimationStart: _propTypes.default.func,

  /**
   * Callback события onBlur
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback события onChange
   */
  onChange: _propTypes.default.func,

  /**
   * Callback события onClean
   */
  onClean: _propTypes.default.func,

  /**
   * Callback события onClick
   */
  onClick: _propTypes.default.func,

  /**
   * Callback события onFocus
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback события onInput
   */
  onInput: _propTypes.default.func,

  /**
   * Callback события onKeyDown
   */
  onKeyDown: _propTypes.default.func,

  /**
   * Callback события onKeyPress
   */
  onKeyPress: _propTypes.default.func,

  /**
   * Callback события onKeyUp
   */
  onKeyUp: _propTypes.default.func,

  /**
   * Callback события onPaste
   */
  onPaste: _propTypes.default.func,

  /**
   * Включает частичный плейсхолдер
   */
  partialPlaceholder: _propTypes.default.bool,

  /**
   * Паттерн для нативного инпута
   */
  pattern: _propTypes.default.string,

  /**
   * Текст плейсхолдера
   */
  placeholder: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),

  /**
   * Текст перед значением
   */
  prefix: _propTypes.default.string,

  /**
   * Текст после значения
   */
  postfix: _propTypes.default.string,

  /**
   * Состояние readOnly
   */
  readOnly: _propTypes.default.bool,

  /**
   * Callback для установки рефа на нативный инпут.
   * Deprecated. Используйте ref.
   */
  refCallback: _propTypes.default.func,

  /**
   * Обязательное поле, помечается звёздочкой
   */
  required: _propTypes.default.bool,

  /**
   * Слот для содержимого справа
   */
  rightContent: _propTypes.default.node,

  /**
   * Размер инпута (default: l)
   * Доступные размеры: [l - 56px, m - 44px, s - 32px]
   */
  size: _propTypes.default.oneOf(['l', 'm', 's']),

  /**
   * Минимальный шаг значения для `type="number"`
   */
  step: _propTypes.default.number,

  /**
   * Выключает стили контейнера
   */
  transparent: _propTypes.default.bool,

  /**
   * Атрибут type для нативного инпута
   */
  type: _propTypes.default.oneOf(['text', 'password', 'email', 'number', 'tel', 'url']),

  /**
   * Включает валидное состояние
   */
  valid: _propTypes.default.bool,

  /**
   * Значение инпута
   */
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Добавляет многоточие в расфокусированном состоянии.
   * Нужен для особых случаев, например readonly-инпут для копирования ссылок, для обычных инпутов применять не
   * рекомендуется
   */
  ellipsis: _propTypes.default.bool,

  /**
   * Кастомный компонент для отображения значения
   */
  valueComponent: _propTypes.default.elementType
} : void 0;
var InputWithRef = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  return /*#__PURE__*/_react.default.createElement(Input, Object.assign({}, props, {
    forwardedRef: ref
  }));
});
InputWithRef.propTypes = Input.propTypes;
InputWithRef.defaultProps = Input.defaultProps;
var _default = InputWithRef;
exports.default = _default;
