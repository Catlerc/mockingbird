import pathOr from '@tinkoff/utils/object/pathOr';
import empty from '@tinkoff/utils/is/empty';
import currencies from './currencies.json';

// https://stackoverflow.com/a/12830454
function roundNumber(number, precision) {
  if (`${number}`.indexOf('e') === -1) {
    return +`${Math.round(Number(`${number}e+${precision}`))}e-${precision}`;
  }

  const parts = `${number}`.split('e');
  const sign = +parts[1] + precision > 0 ? '+' : '';
  return +`${Math.round(Number(`${+parts[0]}e${sign}${+parts[1] + precision}`))}e-${precision}`;
}

function getSign(number, showPlus) {
  if (number > 0) {
    return showPlus ? '+' : '';
  }

  return number < 0 ? 'âˆ’' : '';
}

function getNumerals(number) {
  return `${Math.abs(number)}`.split('.')[0].replace(/(\d)(?=(\d{3})+\b)/g, '$1,').split(',');
}

function getSmalls(settings) {
  const smalls = settings.number.toFixed(empty(settings.precision) ? 2 : settings.precision).replace(settings.trimZeros ? /(?:\.|(\.\d*?))0+$/g : '', '$1').split('.')[1];
  return smalls ? `${settings.decimalSeparator}${smalls}` : '';
}

export function formatMoney({
  value,
  currency,
  precision,
  showSmalls,
  showPlus,
  showCurrencyWithNull,
  trimZeros,
  decimalSeparator = ','
}) {
  const numberOfDecimalPlaces = pathOr([currency || '', 'numberOfDecimalPlaces'], 2, currencies);
  const calculatedPrecision = empty(precision) ? numberOfDecimalPlaces : precision;
  const number = roundNumber(typeof value === 'string' ? parseFloat(value) : value || 0, calculatedPrecision);
  const shouldTrimZeros = calculatedPrecision === 0 || trimZeros;
  const numerals = getNumerals(number);
  const smalls = getSmalls({
    number,
    trimZeros: shouldTrimZeros,
    precision,
    decimalSeparator
  });
  const sign = getSign(number, showPlus);
  return {
    number,
    sign,
    numerals,
    smalls: showSmalls ? smalls : '',
    currency: currency && !(number === 0 && !+smalls && !showCurrencyWithNull) && pathOr([currency, 'symbol'], currency, currencies)
  };
}