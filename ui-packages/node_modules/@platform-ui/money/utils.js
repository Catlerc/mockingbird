"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.formatMoney = formatMoney;

var _pathOr = _interopRequireDefault(require("@tinkoff/utils/object/pathOr"));

var _empty = _interopRequireDefault(require("@tinkoff/utils/is/empty"));

var _currencies = _interopRequireDefault(require("./currencies.json"));

// https://stackoverflow.com/a/12830454
function roundNumber(number, precision) {
  if (("" + number).indexOf('e') === -1) {
    return +(Math.round(Number(number + "e+" + precision)) + "e-" + precision);
  }

  var parts = ("" + number).split('e');
  var sign = +parts[1] + precision > 0 ? '+' : '';
  return +(Math.round(Number(+parts[0] + "e" + sign + (+parts[1] + precision))) + "e-" + precision);
}

function getSign(number, showPlus) {
  if (number > 0) {
    return showPlus ? '+' : '';
  }

  return number < 0 ? 'âˆ’' : '';
}

function getNumerals(number) {
  return ("" + Math.abs(number)).split('.')[0].replace(/(\d)(?=(\d{3})+\b)/g, '$1,').split(',');
}

function getSmalls(settings) {
  var smalls = settings.number.toFixed((0, _empty.default)(settings.precision) ? 2 : settings.precision).replace(settings.trimZeros ? /(?:\.|(\.\d*?))0+$/g : '', '$1').split('.')[1];
  return smalls ? "" + settings.decimalSeparator + smalls : '';
}

function formatMoney(_ref) {
  var value = _ref.value,
      currency = _ref.currency,
      precision = _ref.precision,
      showSmalls = _ref.showSmalls,
      showPlus = _ref.showPlus,
      showCurrencyWithNull = _ref.showCurrencyWithNull,
      trimZeros = _ref.trimZeros,
      _ref$decimalSeparator = _ref.decimalSeparator,
      decimalSeparator = _ref$decimalSeparator === void 0 ? ',' : _ref$decimalSeparator;
  var numberOfDecimalPlaces = (0, _pathOr.default)([currency || '', 'numberOfDecimalPlaces'], 2, _currencies.default);
  var calculatedPrecision = (0, _empty.default)(precision) ? numberOfDecimalPlaces : precision;
  var number = roundNumber(typeof value === 'string' ? parseFloat(value) : value || 0, calculatedPrecision);
  var shouldTrimZeros = calculatedPrecision === 0 || trimZeros;
  var numerals = getNumerals(number);
  var smalls = getSmalls({
    number: number,
    trimZeros: shouldTrimZeros,
    precision: precision,
    decimalSeparator: decimalSeparator
  });
  var sign = getSign(number, showPlus);
  return {
    number: number,
    sign: sign,
    numerals: numerals,
    smalls: showSmalls ? smalls : '',
    currency: currency && !(number === 0 && !+smalls && !showCurrencyWithNull) && (0, _pathOr.default)([currency, 'symbol'], currency, _currencies.default)
  };
}