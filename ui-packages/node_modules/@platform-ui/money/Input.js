"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.Input = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _inputTools = require("@platform-ui/inputTools");

var _Money = _interopRequireDefault(require("./Money"));

var _excluded = ["aria-describedby", "aria-errormessage", "autoComplete", "autoFocus", "cobrowsingSecure", "dataQaData", "dataQaType", "decimalSeparator", "digitGroupingSeparator", "disabled", "id", "max", "maxLength", "min", "name", "onBlur", "onChange", "onFocus", "onInput", "onKeyDown", "onKeyPress", "onKeyUp", "placeholder", "precision", "readOnly", "step", "tabIndex", "type", "value", "emptyValue", "currency", "focused"];
var Input = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {
  var ariaDescribedBy = _ref['aria-describedby'],
      ariaErrorMessage = _ref['aria-errormessage'],
      autoComplete = _ref.autoComplete,
      autoFocus = _ref.autoFocus,
      cobrowsingSecure = _ref.cobrowsingSecure,
      dataQaData = _ref.dataQaData,
      _ref$dataQaType = _ref.dataQaType,
      dataQaType = _ref$dataQaType === void 0 ? 'uikit/money' : _ref$dataQaType,
      _ref$decimalSeparator = _ref.decimalSeparator,
      decimalSeparator = _ref$decimalSeparator === void 0 ? ',' : _ref$decimalSeparator,
      _ref$digitGroupingSep = _ref.digitGroupingSeparator,
      digitGroupingSeparator = _ref$digitGroupingSep === void 0 ? ' ' : _ref$digitGroupingSep,
      disabled = _ref.disabled,
      id = _ref.id,
      max = _ref.max,
      maxLength = _ref.maxLength,
      min = _ref.min,
      name = _ref.name,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onInput = _ref.onInput,
      onKeyDown = _ref.onKeyDown,
      onKeyPress = _ref.onKeyPress,
      onKeyUp = _ref.onKeyUp,
      placeholder = _ref.placeholder,
      precision = _ref.precision,
      readOnly = _ref.readOnly,
      step = _ref.step,
      tabIndex = _ref.tabIndex,
      type = _ref.type,
      value = _ref.value,
      _ref$emptyValue = _ref.emptyValue,
      emptyValue = _ref$emptyValue === void 0 ? 0 : _ref$emptyValue,
      currency = _ref.currency,
      focused = _ref.focused,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);

  var handleBlur = function handleBlur(event) {
    onBlur == null ? void 0 : onBlur(event, {
      value: value,
      name: name
    });
  };

  var handleChange = function handleChange(event, params) {
    onChange == null ? void 0 : onChange(event, params);
  };

  var handleFocus = function handleFocus(event) {
    onFocus == null ? void 0 : onFocus(event, {
      value: value,
      name: name
    });
  };

  return /*#__PURE__*/_react.default.createElement(_Money.default, Object.assign({}, otherProps, {
    currency: currency,
    dataQaData: dataQaData,
    dataQaType: dataQaType,
    decimalSeparator: decimalSeparator,
    digitGroupingSeparator: digitGroupingSeparator,
    precision: precision,
    showSmalls: false,
    styledSmalls: false,
    value: value
  }), /*#__PURE__*/_react.default.createElement(_inputTools.UnitsInput, {
    "aria-describedby": ariaDescribedBy,
    "aria-errormessage": ariaErrorMessage,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    focused: focused,
    cobrowsingSecure: cobrowsingSecure,
    dataQaType: dataQaType,
    precision: precision,
    decimalSeparator: decimalSeparator,
    disabled: disabled,
    id: id,
    ref: forwardedRef,
    inputMode: "numeric",
    max: max,
    maxLength: maxLength,
    min: min,
    name: name,
    placeholder: placeholder,
    readOnly: readOnly,
    step: step,
    tabIndex: tabIndex,
    digitGroupingSeparator: digitGroupingSeparator,
    emptyValue: (0, _inputTools.getNumberValue)(emptyValue),
    type: type,
    value: (0, _inputTools.getNumberValue)(value),
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus,
    onInput: onInput,
    onKeyDown: onKeyDown,
    onKeyPress: onKeyPress,
    onKeyUp: onKeyUp
  }));
});
exports.Input = Input;