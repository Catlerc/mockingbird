"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var fontFamily = {
  default: 'haas, pragmatica, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, sans-serif',
  tinkoffSans: 'TinkoffSans, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, sans-serif',
  defaultMobile: '-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif'
};
var sizeParts = {
  heading1: {
    size: '50px/56px',
    type: 'title',
    'font-weight': '700'
  },
  heading2: {
    size: '44px/48px',
    type: 'title',
    'font-weight': '700'
  },
  heading3: {
    size: '36px/40px',
    type: 'title'
  },
  heading4: {
    size: '28px/32px',
    type: 'title'
  },
  heading5: {
    size: '24px/28px',
    type: 'title'
  },
  heading6: {
    size: '20px/24px',
    type: 'title'
  },
  body_x: {
    size: '19px/28px',
    type: 'body'
  },
  body_l: {
    size: '17px/24px',
    type: 'body'
  },
  'body_l/28': {
    size: '17px/28px',
    type: 'body'
  },
  body_m: {
    size: '15px/24px',
    type: 'body'
  },
  'body_m/20': {
    size: '15px/20px',
    type: 'body'
  },
  body_s: {
    size: '13px/20px',
    type: 'body'
  },
  'body_s/16': {
    size: '13px/16px',
    type: 'body'
  },
  body_xs: {
    size: '11px/16px',
    exception: {
      'letter-spacing': '.4px'
    },
    bold: false,
    type: 'body'
  },
  caption_l: {
    size: '13px/20px',
    exceptionBold: {
      'letter-spacing': '.9px'
    },
    type: 'caption'
  },
  caption_s: {
    size: '11px/16px',
    type: 'caption'
  },
  mobileHeading1: {
    size: '24px/28px',
    type: 'mobile',
    'font-weight': '700'
  },
  mobileHeading2: {
    size: '20px/24px',
    type: 'mobile',
    'font-weight': '700'
  },
  mobileHeading3: {
    size: '17px/24px',
    type: 'mobile',
    'font-weight': '700'
  },
  mobileHeading4: {
    size: '15px/20px',
    type: 'mobile',
    'font-weight': '700'
  },
  mobileHeading5: {
    size: '13px/20px',
    type: 'mobile',
    'font-weight': '700'
  },
  mobileBody_l: {
    size: '15px/24px',
    type: 'mobile'
  },
  mobileBody_m: {
    size: '13px/20px',
    type: 'mobile'
  },
  mobileBody_s: {
    size: '11px/16px',
    type: 'mobile'
  },
  mobileCaption: {
    size: '11px/16px',
    'font-weight': '700',
    exception: {
      'letter-spacing': '1px',
      'text-transform': 'uppercase'
    },
    type: 'mobile'
  }
};
var typeRules = {
  title: {
    'font-family': fontFamily.tinkoffSans,
    'font-weight': '500',
    styles: {
      'letter-spacing': '0',
      'font-variant-ligatures': 'no-contextual'
    },
    bold: false
  },
  body: {
    'font-family': fontFamily.default,
    'font-weight': '400',
    styles: {
      'letter-spacing': '0'
    }
  },
  caption: {
    'font-family': fontFamily.default,
    'font-weight': '400',
    styles: {
      'letter-spacing': '1px',
      'text-transform': 'uppercase'
    }
  },
  mobile: {
    'font-family': fontFamily.defaultMobile,
    'font-weight': '400',
    styles: {
      'letter-spacing': '0'
    },
    bold: false
  }
};
var mobileMixins = ['mobileHeading1', 'mobileHeading2', 'mobileHeading3', 'mobileHeading4', 'mobileHeading5', 'mobileBody_l', 'mobileBody_m', 'mobileBody_s', 'mobileCaption'];

var text = function text(_, name, bold) {
  if (name === void 0) {
    name = 'body_s';
  }

  if (bold === void 0) {
    bold = false;
  }

  if (!sizeParts[name]) {
    return;
  }

  var type = sizeParts[name].type;
  var isBold = bold && sizeParts[name].bold === undefined && typeRules[type].bold === undefined;
  var mainPart = {};
  var fontWeight = isBold ? '500' : sizeParts[name]['font-weight'] || typeRules[type]['font-weight'];

  if (mobileMixins.indexOf(name) === -1) {
    mainPart['word-wrap'] = 'break-word'; // TODO: убрать для десктопных миксинов в версии 3.0.0 (https://)
  }

  return (0, _extends2.default)({}, mainPart, {
    font: fontWeight + " " + sizeParts[name].size + " " + typeRules[type]['font-family']
  }, typeRules[type].styles, sizeParts[name].exception, isBold ? sizeParts[name].exceptionBold : {});
};

module.exports = {
  text: text,
  fontFamily: fontFamily,
  sizeParts: sizeParts
};
