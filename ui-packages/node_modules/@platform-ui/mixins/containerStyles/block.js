"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _baseTypeStyles, _hoverTypeStyles, _activeTypeStyles, _focusTypeStyles;

var BLOCK_TYPES = {
  PRIMARY: 'primary',
  SECONDARY: 'secondary',
  OUTLINE: 'outline',
  OUTLINE_LIGHT: 'outlineLight',
  OUTLINE_DARK: 'outlineDark',
  WHITE: 'white',
  WHITE2: 'white2'
};
var baseStyles = {
  'box-sizing': 'border-box',
  position: 'relative',
  'transition-property': 'background-color, border-color, box-shadow',
  'transition-duration': '.25s',
  'transition-timing-function': 'ease',
  color: 'var(--tds-color-text-01)'
};
var baseTypeStyles = (_baseTypeStyles = {}, _baseTypeStyles[BLOCK_TYPES.PRIMARY] = {
  border: '1px solid var(--tds-color-primary)',
  'background-color': 'var(--tds-color-primary)'
}, _baseTypeStyles[BLOCK_TYPES.SECONDARY] = {
  border: '1px solid var(--tds-color-secondary)',
  'background-color': 'var(--tds-color-secondary)'
}, _baseTypeStyles[BLOCK_TYPES.OUTLINE] = {
  border: '1px solid var(--tds-color-link)',
  color: 'var(--tds-color-link)',
  'background-color': 'transparent',
  'transition-property': 'background-color'
}, _baseTypeStyles[BLOCK_TYPES.OUTLINE_LIGHT] = {
  color: 'var(--tds-color-base-01)',
  'transition-property': undefined,
  'transition-duration': undefined,
  'transition-timing-function': undefined,
  '&::before': {
    content: "''",
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    'border-radius': 'inherit',
    'background-color': 'var(--tds-color-base-01)',
    opacity: 0,
    'transition-property': 'opacity',
    'transition-duration': '.25s',
    'transition-timing-function': 'ease'
  },
  '&::after': {
    content: "''",
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    border: '1px solid var(--tds-color-base-01)',
    'border-radius': 'inherit',
    opacity: 1,
    'transition-property': 'opacity',
    'transition-duration': '.25s',
    'transition-timing-function': 'ease',
    'pointer-events': 'none'
  }
}, _baseTypeStyles[BLOCK_TYPES.OUTLINE_DARK] = {
  border: '1px solid var(--tds-color-base-08)',
  'transition-property': undefined,
  'transition-duration': undefined,
  'transition-timing-function': undefined,
  '&::before': {
    content: "''",
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    'border-radius': 'inherit',
    'background-color': 'var(--tds-color-base-08)',
    opacity: 0,
    'transition-property': 'opacity',
    'transition-duration': '.25s',
    'transition-timing-function': 'ease'
  }
}, _baseTypeStyles[BLOCK_TYPES.WHITE] = {
  border: '1px solid var(--tds-color-base-04)',
  'background-color': 'var(--tds-color-base-01)',
  'transition-property': 'background-color, border-color, box-shadow'
}, _baseTypeStyles);
var hoverTypeStyles = (_hoverTypeStyles = {}, _hoverTypeStyles[BLOCK_TYPES.PRIMARY] = {
  'border-color': 'var(--tds-color-primary-hover)',
  'background-color': 'var(--tds-color-primary-hover)'
}, _hoverTypeStyles[BLOCK_TYPES.SECONDARY] = {
  'border-color': 'var(--tds-color-secondary-hover)',
  'background-color': 'var(--tds-color-secondary-hover)'
}, _hoverTypeStyles[BLOCK_TYPES.OUTLINE] = {
  color: 'var(--tds-color-link-hover)',
  'border-color': 'var(--tds-color-link-hover)',
  'background-color': 'var(--tds-color-secondary-hover)'
}, _hoverTypeStyles[BLOCK_TYPES.OUTLINE_LIGHT] = {
  '&::before': {
    opacity: 0.08
  },
  '&::after': {
    opacity: 0.64
  }
}, _hoverTypeStyles[BLOCK_TYPES.OUTLINE_DARK] = {
  'border-color': 'var(--tds-color-base-06)',
  '&::before': {
    opacity: 0.08
  }
}, _hoverTypeStyles[BLOCK_TYPES.WHITE] = {
  'border-color': 'var(--tds-color-base-04)',
  'background-color': 'var(--tds-color-base-01)',
  'box-shadow': '0 4px 24px 0 rgba(0, 0, 0, .12)'
}, _hoverTypeStyles[BLOCK_TYPES.WHITE2] = {
  'background-color': 'var(--tds-color-base-02)',
  border: '1px solid var(--tds-color-base-04)'
}, _hoverTypeStyles);
var activeTypeStyles = (_activeTypeStyles = {}, _activeTypeStyles[BLOCK_TYPES.PRIMARY] = {
  border: '1px solid var(--tds-color-primary-active)',
  'background-color': 'var(--tds-color-primary-active)'
}, _activeTypeStyles[BLOCK_TYPES.SECONDARY] = {
  border: '1px solid var(--tds-color-secondary-active)',
  'background-color': 'var(--tds-color-secondary-active)'
}, _activeTypeStyles[BLOCK_TYPES.OUTLINE] = {
  color: 'var(--tds-color-link-hover)',
  'border-color': 'var(--tds-color-link-hover)',
  'background-color': 'var(--tds-color-secondary-active)'
}, _activeTypeStyles[BLOCK_TYPES.OUTLINE_LIGHT] = {
  'background-clip': 'padding-box',
  '&::before': {
    opacity: 0.16
  },
  '&::after': {
    opacity: 0.64
  }
}, _activeTypeStyles[BLOCK_TYPES.OUTLINE_DARK] = {
  border: '1px solid var(--tds-color-base-06)',
  '&::before': {
    opacity: 0.16
  }
}, _activeTypeStyles[BLOCK_TYPES.WHITE] = {
  'background-color': 'var(--tds-color-base-01)',
  'border-color': 'var(--tds-color-primary)',
  'box-shadow': 'inset 0 0 0 1px var(--tds-color-primary)' // для корректного отображения тени в Firefox

}, _activeTypeStyles);
var focusBaseStyles = {
  transition: 'none',
  outline: 'none',
  'border-color': 'var(--tds-color-focus)',
  'box-shadow': 'inset 0 0 0 1px var(--tds-color-focus)',
  'background-clip': 'padding-box'
};
var focusTypeStyles = (_focusTypeStyles = {}, _focusTypeStyles[BLOCK_TYPES.OUTLINE_LIGHT] = {
  'border-color': 'var(--tds-color-base-01)',
  'box-shadow': 'inset 0 0 0 1px var(--tds-color-base-01)'
}, _focusTypeStyles);

var getTypeStyles = function getTypeStyles(stylesObj, type) {
  return type === BLOCK_TYPES.WHITE2 ? stylesObj[BLOCK_TYPES.WHITE2] || stylesObj[BLOCK_TYPES.WHITE] : stylesObj[type];
};

var block_hover = function block_hover(_, type) {
  if (type === void 0) {
    type = BLOCK_TYPES.PRIMARY;
  }

  return getTypeStyles(hoverTypeStyles, type);
};

var block_active = function block_active(_, type) {
  if (type === void 0) {
    type = BLOCK_TYPES.PRIMARY;
  }

  return getTypeStyles(activeTypeStyles, type);
};

var block_focus = function block_focus(_, type) {
  if (type === void 0) {
    type = BLOCK_TYPES.PRIMARY;
  }

  return (0, _extends2.default)({}, focusBaseStyles, getTypeStyles(focusTypeStyles, type));
};

var block = function block(_, type, withPseudoClasses) {
  if (type === void 0) {
    type = BLOCK_TYPES.PRIMARY;
  }

  if (withPseudoClasses === void 0) {
    withPseudoClasses = 'true';
  }

  return (0, _extends2.default)({}, baseStyles, getTypeStyles(baseTypeStyles, type), withPseudoClasses !== 'false' ? {
    '&:hover': block_hover(_, type),
    '&:active': block_active(_, type),
    '&:focus, &:focus:hover, &:focus:active': block_focus(_, type)
  } : {});
};

var disabledStyles = {
  opacity: 0.56,
  'pointer-events': 'none'
};

var node_disabled = function node_disabled() {
  return disabledStyles;
};

module.exports = {
  block: block,
  block_hover: block_hover,
  block_active: block_active,
  block_focus: block_focus,
  node_disabled: node_disabled
};