"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _clickable = _interopRequireDefault(require("@platform-ui/clickable"));

var _iconsPack = require("@platform-ui/iconsPack");

var _color = require("@platform-ui/utils/color");

var _getBackgroundMainColor = _interopRequireDefault(require("@platform-ui/utils/getBackgroundMainColor"));

var _loader = _interopRequireDefault(require("@platform-ui/loader"));

var _TagModule = _interopRequireDefault(require("./Tag.module.css"));

var _excluded = ["size", "theme", "children", "removable", "clickable", "background", "color", "loading", "icon", "onRemove", "onKeyDown", "contentTagName", "disabled", "removeButtonAriaLabel"];

var Tag = /*#__PURE__*/_react.default.forwardRef(function (props, forwardedRef) {
  var _cn, _cn2;

  var size = props.size,
      theme = props.theme,
      children = props.children,
      removable = props.removable,
      clickable = props.clickable,
      background = props.background,
      color = props.color,
      loading = props.loading,
      icon = props.icon,
      onRemove = props.onRemove,
      onKeyDown = props.onKeyDown,
      contentTagName = props.contentTagName,
      disabled = props.disabled,
      _props$removeButtonAr = props.removeButtonAriaLabel,
      removeButtonAriaLabel = _props$removeButtonAr === void 0 ? 'Remove' : _props$removeButtonAr,
      restProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  var smartColor = color || background && (0, _color.calcFontColor)((0, _getBackgroundMainColor.default)(background));
  var ContentTag = contentTagName;

  var handleRemoveButtonClick = _react.default.useMemo(function () {
    if (!removable || !onRemove) {
      return undefined;
    }

    return function (event) {
      event.stopPropagation();
      onRemove(event);
    };
  }, [removable, onRemove]);

  var buttonClose = !disabled && removable ? /*#__PURE__*/_react.default.createElement("span", {
    className: _TagModule.default.tagClose,
    onClick: handleRemoveButtonClick,
    "aria-label": removeButtonAriaLabel,
    role: "button"
  }, /*#__PURE__*/_react.default.createElement(_iconsPack.Int16Close, null)) : undefined;

  var handleKeyDown = _react.default.useMemo(function () {
    if (!removable || !onRemove) {
      return onKeyDown;
    }

    return function (event) {
      if (!event.repeat && (event.key === 'Backspace' || event.key === 'Delete')) {
        onRemove(event);
      }

      onKeyDown && onKeyDown(event);
    };
  }, [removable, onRemove, onKeyDown]);

  return /*#__PURE__*/_react.default.createElement(_clickable.default, Object.assign({
    ref: forwardedRef,
    disabled: disabled
  }, restProps, {
    "data-size": size,
    className: (0, _classnames.default)((_cn = {}, _cn[_TagModule.default.tag] = true, _cn[_TagModule.default["tag_theme_" + theme]] = theme && !background, _cn[_TagModule.default.tag_background] = background, _cn[_TagModule.default.tag_clickable] = clickable, _cn[_TagModule.default.tag_disabled] = disabled, _cn)),
    innerClassName: (0, _classnames.default)((_cn2 = {}, _cn2[_TagModule.default.inner] = true, _cn2[_TagModule.default["inner_size_" + size]] = size, _cn2[_TagModule.default.inner_leftContent] = !!icon, _cn2[_TagModule.default.inner_rightContent] = !disabled && removable || loading, _cn2)),
    style: {
      color: smartColor,
      background: background && background + " border-box"
    },
    onKeyDown: handleKeyDown
  }), icon && /*#__PURE__*/_react.default.createElement("span", {
    className: _TagModule.default.icon
  }, icon), /*#__PURE__*/_react.default.createElement(ContentTag, {
    className: _TagModule.default.content
  }, children), loading ? /*#__PURE__*/_react.default.createElement("span", {
    className: _TagModule.default.loader
  }, /*#__PURE__*/_react.default.createElement(_loader.default, {
    size: size === 's' ? 'xs' : 's',
    color: "currentColor"
  })) : buttonClose);
});

Tag.defaultProps = {
  size: 'l',
  removable: true,
  clickable: true,
  dataQaType: 'uikit/tag',
  contentTagName: 'span'
};
var _default = Tag;
exports.default = _default;