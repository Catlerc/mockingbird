import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["size", "theme", "children", "removable", "clickable", "background", "color", "loading", "icon", "onRemove", "onKeyDown", "contentTagName", "disabled", "removeButtonAriaLabel"];
import React from 'react';
import cn from 'classnames';
import Clickable from '@platform-ui/clickable';
import { Int16Close as Close } from '@platform-ui/iconsPack'; // TODO: перевести модули на TS, убрать @ts-ignore
// @ts-ignore

import { calcFontColor } from '@platform-ui/utils/color'; // @ts-ignore

import getBackgroundMainColor from '@platform-ui/utils/getBackgroundMainColor';
import Loader from '@platform-ui/loader';
import styles from './Tag.module.css';
const Tag = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
  const {
    size,
    theme,
    children,
    removable,
    clickable,
    background,
    color,
    loading,
    icon,
    onRemove,
    onKeyDown,
    contentTagName,
    disabled,
    removeButtonAriaLabel = 'Remove'
  } = props,
        restProps = _objectWithoutPropertiesLoose(props, _excluded);

  const smartColor = color || background && calcFontColor(getBackgroundMainColor(background));
  const ContentTag = contentTagName;
  const handleRemoveButtonClick = React.useMemo(() => {
    if (!removable || !onRemove) {
      return undefined;
    }

    return event => {
      event.stopPropagation();
      onRemove(event);
    };
  }, [removable, onRemove]);
  const buttonClose = !disabled && removable ? /*#__PURE__*/React.createElement("span", {
    className: styles.tagClose,
    onClick: handleRemoveButtonClick,
    "aria-label": removeButtonAriaLabel,
    role: "button"
  }, /*#__PURE__*/React.createElement(Close, null)) : undefined;
  const handleKeyDown = React.useMemo(() => {
    if (!removable || !onRemove) {
      return onKeyDown;
    }

    return event => {
      if (!event.repeat && (event.key === 'Backspace' || event.key === 'Delete')) {
        onRemove(event);
      }

      onKeyDown && onKeyDown(event);
    };
  }, [removable, onRemove, onKeyDown]);
  return /*#__PURE__*/React.createElement(Clickable, Object.assign({
    ref: forwardedRef,
    disabled: disabled
  }, restProps, {
    "data-size": size,
    className: cn({
      [styles.tag]: true,
      [styles[`tag_theme_${theme}`]]: theme && !background,
      [styles.tag_background]: background,
      [styles.tag_clickable]: clickable,
      [styles.tag_disabled]: disabled
    }),
    innerClassName: cn({
      [styles.inner]: true,
      [styles[`inner_size_${size}`]]: size,
      [styles.inner_leftContent]: !!icon,
      [styles.inner_rightContent]: !disabled && removable || loading
    }),
    style: {
      color: smartColor,
      background: background && `${background} border-box`
    },
    onKeyDown: handleKeyDown
  }), icon && /*#__PURE__*/React.createElement("span", {
    className: styles.icon
  }, icon), /*#__PURE__*/React.createElement(ContentTag, {
    className: styles.content
  }, children), loading ? /*#__PURE__*/React.createElement("span", {
    className: styles.loader
  }, /*#__PURE__*/React.createElement(Loader, {
    size: size === 's' ? 'xs' : 's',
    color: "currentColor"
  })) : buttonClose);
});
Tag.defaultProps = {
  size: 'l',
  removable: true,
  clickable: true,
  dataQaType: 'uikit/tag',
  contentTagName: 'span'
};
export default Tag;