"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = exports.THEMES = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _colors = _interopRequireDefault(require("@platform-ui/colors"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _LoaderModule = _interopRequireDefault(require("./Loader.module.css"));

// @ts-ignore
var THEMES = {
  yellow: _colors.default['yellow-100'],
  black: _colors.default['black-300'],
  current: 'currentColor'
};
exports.THEMES = THEMES;
var animationMap = {
  true: {
    animateStart: true,
    animateEnd: true
  },
  false: {
    animateStart: false,
    animateEnd: false
  },
  start: {
    animateStart: true,
    animateEnd: false
  },
  end: {
    animateStart: false,
    animateEnd: true
  }
};

var isDefined = function isDefined(val) {
  return val !== undefined && val !== null;
};

var Loader = function Loader(props) {
  var _cn2;

  var alignTop = props.alignTop,
      centered = props.centered,
      _props$color = props.color,
      color = _props$color === void 0 ? 'yellow' : _props$color,
      _props$dataQaType = props.dataQaType,
      dataQaType = _props$dataQaType === void 0 ? 'uikit/loader' : _props$dataQaType,
      _props$fadeAnimation = props.fadeAnimation,
      fadeAnimation = _props$fadeAnimation === void 0 ? 'true' : _props$fadeAnimation,
      hidden = props.hidden,
      overlay = props.overlay,
      _props$semiTransparen = props.semiTransparentBg,
      semiTransparentBg = _props$semiTransparen === void 0 ? true : _props$semiTransparen,
      _props$size = props.size,
      size = _props$size === void 0 ? 'xl' : _props$size;
  var _animationMap$fadeAni = animationMap[fadeAnimation],
      animateEnd = _animationMap$fadeAni.animateEnd,
      animateStart = _animationMap$fadeAni.animateStart;
  var withAnimation = !hidden && animateStart || hidden && animateEnd;

  var _useState = (0, _react.useState)(overlay ? !withAnimation && hidden : hidden),
      hiddenState = _useState[0],
      setHiddenState = _useState[1];

  var handleAnimationEnd = function handleAnimationEnd() {
    setHiddenState(hidden);
  };

  var renderLoader = function renderLoader() {
    var _cn;

    return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)({
      dataQaType: dataQaType + ".svgWrapper"
    }), {
      className: (0, _classnames.default)((_cn = {}, _cn[_LoaderModule.default.svgWrapper] = true, _cn[_LoaderModule.default["svgWrapper_size_" + size]] = size, _cn[_LoaderModule.default.svgWrapper_centered] = centered, _cn)),
      style: {
        color: THEMES[color] || color
      }
    }), /*#__PURE__*/_react.default.createElement("svg", Object.assign({}, (0, _dataQa.default)({
      dataQaType: dataQaType + ".svg"
    }), {
      viewBox: "0 0 100 100",
      className: _LoaderModule.default.svg
    }), /*#__PURE__*/_react.default.createElement("circle", {
      fill: "none",
      className: _LoaderModule.default.circle,
      stroke: "currentColor",
      cx: "50",
      cy: "50",
      r: "44"
    })));
  };

  (0, _react.useEffect)(function () {
    setHiddenState(overlay ? !withAnimation && hidden : hidden);
  }, [hidden, overlay, withAnimation]);

  if (hiddenState) {
    return null;
  }

  return overlay ? /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType
  }), {
    className: (0, _classnames.default)((_cn2 = {}, _cn2[_LoaderModule.default.layout] = true, _cn2[_LoaderModule.default.layout_alignTop] = isDefined(alignTop), _cn2[_LoaderModule.default.layout_notTransparent] = !semiTransparentBg, _cn2[_LoaderModule.default.layout_close] = animateEnd && hidden, _cn2[_LoaderModule.default.layout_open] = animateStart && !hidden, _cn2)),
    onTransitionEnd: animateEnd || animateStart ? handleAnimationEnd : undefined
  }), !!alignTop && /*#__PURE__*/_react.default.createElement("div", {
    className: _LoaderModule.default.alignSpace,
    style: {
      maxHeight: alignTop
    }
  }), renderLoader()) : renderLoader();
}; // TODO: убрать в мажорном обновлении


Loader.defaultProps = {
  dataQaType: 'uikit/loader',
  size: 'xl',
  color: 'yellow',
  centered: false,
  alignTop: null,
  hidden: false,
  semiTransparentBg: true,
  fadeAnimation: 'true'
};
var _default = Loader;
exports.default = _default;