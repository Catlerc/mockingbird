import React, { Component } from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
interface AccordionItems extends Pick<React.Attributes, 'key'> {
    title: React.ReactNode;
    content: React.ReactNode;
    icon?: React.ReactNode;
    onClick?: () => void;
    noPadding?: boolean;
    itemId?: string;
    /**
     * Включает дополнительную разметку для блока типа «Вопрос-ответ»
     * С включенным свойством содержимое айтема всегда находится в DOM'е
     */
    faq?: boolean;
}
export interface AccordionProps extends DataQaInterface {
    /**
     * Меняет цвет заголовков
     */
    colored?: boolean;
    /**
     * Убирает стрелочки
     */
    withoutArrow?: boolean;
    /**
     * Убирает бордеры и боковые пэддинги
     * @deprecated будет удален в будущем, используйте проп borderType со значением 'none'
     * TODO: убрать этот проп с следующем мажорном изменении
     */
    withoutBorders?: boolean;
    /**
     * Стиль границ
     */
    borderType?: 'all' | 'between' | 'none';
    /**
     * Индекс или id активного (раскрытого) дропдауна
     */
    activeIndex?: number | string | Array<number | string>;
    /**
     * Callback события клика по заголовку
     */
    onTitleClick?: (event: React.MouseEvent, params: Record<string, any>) => void;
    /**
     * Массив данных аккордеона
     */
    data: Array<AccordionItems>;
    /**
     *  Позволяет убирать скругления внешних краев
     */
    flatCorners?: string;
    /**
     *  Допускает только один открытый элемент
     */
    single?: boolean;
    /**
     * Размер аккордеона: l (56рх), m (44рх)
     */
    size?: 'l' | 'm';
    /**
     * Меняет тему компонента
     */
    theme?: 'default' | 'light' | 'dark';
    /**
     * Удалять из DOM контент схлопнутого элемента
     */
    removeCollapsedContent?: boolean;
    /**
     * Флаг, плавный подскрол к активному элементу [no smooth for ie & safari]
     */
    scrollToActive?: boolean;
    /**
     * Выбор вертикального позиционирования стрелочек
     */
    iconAlign?: 'top' | 'middle' | 'bottom';
    /**
     * Должен ли быть выставлен overflow:hidden у раскрытых пунктов
     * По-умолчанию true
     */
    overflowHidden?: boolean;
    /**
     * Включает дополнительную разметку для блока типа «Вопрос-ответ»
     * С включенным свойством содержимое айтемов всегда находится в DOM'е
     */
    faq?: boolean;
}
interface AccordionState {
    expanded?: any;
}
declare class Accordion extends Component<AccordionProps, AccordionState> {
    id: string;
    refsList: {
        [key: string]: HTMLDivElement;
    };
    refMemo: {
        [key: string]: (element: HTMLDivElement) => void | null;
    };
    setRef: (refName: string) => (element: HTMLDivElement) => void | null;
    constructor(props: AccordionProps);
    static defaultProps: {
        dataQaType: string;
        size: string;
        removeCollapsedContent: boolean;
        scrollToActive: boolean;
        iconAlign: string;
        theme: string;
        borderType: string;
        overflowHidden: boolean;
    };
    shouldComponentUpdate(nextProps: AccordionProps): boolean;
    handleTitleClick: (itemId: string | number, onClick?: ((event: React.MouseEvent, params: Record<string, any>) => void) | undefined) => (event: React.MouseEvent) => void;
    renderItem: (item: AccordionItems, index: number) => JSX.Element;
    render(): JSX.Element | null;
}
export default Accordion;
