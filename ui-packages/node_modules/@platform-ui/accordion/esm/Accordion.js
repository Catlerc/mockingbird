import React, { Component } from 'react';
import cn from 'classnames';
import IconArrowDown from '@platform-ui/iconsPack/interface/24/ArrowDown';
import * as corners from '@platform-ui/flatCorners';
import CollapseBlock from '@platform-ui/collapseBlock';
import generateId from '@platform-ui/generateId';
import includes from '@tinkoff/utils/array/includes';
import Clickable from '@platform-ui/clickable';
import dataQa from '@platform-ui/dataQa';
import styles from './Accordion.module.css';

const getExpanded = (data, activeIndex) => {
  if (typeof activeIndex === 'string') {
    return activeIndex;
  }

  if (Array.isArray(activeIndex)) {
    if (typeof activeIndex[0] === 'string') {
      return activeIndex;
    }

    return activeIndex.filter(index => index < data.length);
  }

  if (typeof activeIndex === 'number') {
    return activeIndex < data.length ? [activeIndex] : [];
  }

  return [];
};

class Accordion extends Component {
  constructor(props) {
    super(props);
    this.id = void 0;
    this.refsList = void 0;
    this.refMemo = void 0;

    this.setRef = refName => {
      if (!this.refMemo[refName]) {
        this.refMemo[refName] = element => {
          this.refsList[refName] = element;
        };
      }

      return this.refMemo[refName];
    };

    this.handleTitleClick = (itemId, onClick) => event => {
      const {
        expanded
      } = this.state;
      const {
        onTitleClick,
        single,
        data,
        scrollToActive
      } = this.props;
      let activeIndex;
      const isOpened = includes(itemId, expanded);

      if (isOpened) {
        if (single) {
          activeIndex = null;
        } else if (typeof expanded === 'string') {
          activeIndex = null;
        } else {
          activeIndex = expanded.filter(item => item !== itemId);
        }
      } else if (single) {
        activeIndex = itemId;
      } else {
        activeIndex = [...expanded, itemId];
      }

      onTitleClick && onTitleClick(event, {
        activeIndex
      });

      if (onClick) {
        onClick(event, {
          activeIndex
        });
      }

      if (!isOpened && scrollToActive) {
        this.refsList[`item-${itemId}`].scrollIntoView({
          behavior: 'smooth'
        });
      }

      this.setState({
        expanded: getExpanded(data, activeIndex)
      });
    };

    this.renderItem = (item, index) => {
      const {
        dataQaType,
        colored,
        size,
        theme,
        withoutArrow,
        withoutBorders,
        borderType,
        removeCollapsedContent,
        iconAlign,
        overflowHidden,
        faq: globalFaq
      } = this.props;
      const {
        expanded
      } = this.state;
      const {
        itemId,
        title,
        content,
        onClick,
        icon,
        noPadding,
        faq: itemFaq
      } = item;
      const id = itemId || index;
      const itemKey = `item-${id}`;
      const descriptionId = `${this.id}-description-${id}`;
      const contentId = `${this.id}-content-${id}`;
      const isOpened = includes(id, expanded);
      const faq = globalFaq || itemFaq;
      const removeContent = faq ? false : removeCollapsedContent;
      return /*#__PURE__*/React.createElement("div", Object.assign({}, faq ? {
        itemScope: true,
        itemProp: 'mainEntity',
        itemType: 'https://schema.org/Question'
      } : {}, {
        "data-qa-type": `${dataQaType}.item`,
        ref: this.setRef(itemKey),
        key: item.key || itemId || index,
        className: cn({
          [styles.item]: true,
          [styles[`item_size_${size}`]]: size,
          [styles[`item_theme_${theme}`]]: theme,
          [styles.item_opened]: isOpened,
          [styles.item_colored]: colored,
          [styles.item_withoutBorders]: withoutBorders,
          [styles[`item_borders_${borderType}`]]: borderType !== 'all' && !withoutBorders
        })
      }), /*#__PURE__*/React.createElement(Clickable, {
        dataQaType: `${dataQaType}.term`,
        className: styles.term,
        innerClassName: styles.termInner,
        onClick: this.handleTitleClick(id, onClick),
        id: contentId,
        "aria-expanded": isOpened,
        "aria-controls": descriptionId
      }, icon && /*#__PURE__*/React.createElement("div", {
        className: styles.icon
      }, icon), /*#__PURE__*/React.createElement("div", Object.assign({}, faq ? {
        itemProp: 'name'
      } : {}, {
        className: styles.title
      }), title), !withoutArrow && /*#__PURE__*/React.createElement("div", {
        className: cn({
          [styles.arrow]: true,
          [styles.arrow_opened]: isOpened,
          [styles[`arrow_verticalAlign_${iconAlign}`]]: styles[`arrow_verticalAlign_${iconAlign}`]
        })
      }, /*#__PURE__*/React.createElement(IconArrowDown, null))), /*#__PURE__*/React.createElement("div", Object.assign({}, faq ? {
        itemScope: true,
        itemProp: 'acceptedAnswer',
        itemType: 'https://schema.org/Answer'
      } : {}, {
        "data-qa-type": `${dataQaType}.description`,
        className: styles.description,
        id: descriptionId
      }), /*#__PURE__*/React.createElement(CollapseBlock, {
        removeCollapsedContent: removeContent,
        collapsed: !isOpened,
        overflowHidden: overflowHidden
      }, /*#__PURE__*/React.createElement("div", Object.assign({}, faq ? {
        itemProp: 'text'
      } : {}, {
        className: styles.content,
        "aria-labelledby": contentId,
        style: {
          padding: noPadding ? '0' : null
        }
      }), content))));
    };

    this.id = generateId(this);
    this.refMemo = {};
    this.refsList = {};
    this.state = {
      expanded: getExpanded(props.data, props.activeIndex)
    };
  }

  shouldComponentUpdate(nextProps) {
    if (nextProps.activeIndex !== this.props.activeIndex) {
      this.setState({
        expanded: getExpanded(nextProps.data, nextProps.activeIndex)
      });
    }

    return true;
  }

  render() {
    const {
      data,
      flatCorners,
      faq
    } = this.props;
    return data.length ? /*#__PURE__*/React.createElement("div", Object.assign({}, dataQa(this.props), faq ? {
      itemScope: true,
      itemType: 'https://schema.org/FAQPage'
    } : {}, {
      className: styles.root,
      style: corners.style(flatCorners)
    }), data.map(this.renderItem)) : null;
  }

}

Accordion.defaultProps = {
  dataQaType: 'uikit/accordion',
  size: 'l',
  removeCollapsedContent: true,
  scrollToActive: true,
  iconAlign: 'top',
  theme: 'default',
  borderType: 'all',
  overflowHidden: true
};
export default Accordion;