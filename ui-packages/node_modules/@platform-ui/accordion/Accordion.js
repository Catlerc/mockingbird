"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ArrowDown = _interopRequireDefault(require("@platform-ui/iconsPack/interface/24/ArrowDown"));

var corners = _interopRequireWildcard(require("@platform-ui/flatCorners"));

var _collapseBlock = _interopRequireDefault(require("@platform-ui/collapseBlock"));

var _generateId = _interopRequireDefault(require("@platform-ui/generateId"));

var _includes = _interopRequireDefault(require("@tinkoff/utils/array/includes"));

var _clickable = _interopRequireDefault(require("@platform-ui/clickable"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _AccordionModule = _interopRequireDefault(require("./Accordion.module.css"));

var getExpanded = function getExpanded(data, activeIndex) {
  if (typeof activeIndex === 'string') {
    return activeIndex;
  }

  if (Array.isArray(activeIndex)) {
    if (typeof activeIndex[0] === 'string') {
      return activeIndex;
    }

    return activeIndex.filter(function (index) {
      return index < data.length;
    });
  }

  if (typeof activeIndex === 'number') {
    return activeIndex < data.length ? [activeIndex] : [];
  }

  return [];
};

var Accordion = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2.default)(Accordion, _Component);

  function Accordion(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.id = void 0;
    _this.refsList = void 0;
    _this.refMemo = void 0;

    _this.setRef = function (refName) {
      if (!_this.refMemo[refName]) {
        _this.refMemo[refName] = function (element) {
          _this.refsList[refName] = element;
        };
      }

      return _this.refMemo[refName];
    };

    _this.handleTitleClick = function (itemId, onClick) {
      return function (event) {
        var expanded = _this.state.expanded;
        var _this$props = _this.props,
            onTitleClick = _this$props.onTitleClick,
            single = _this$props.single,
            data = _this$props.data,
            scrollToActive = _this$props.scrollToActive;
        var activeIndex;
        var isOpened = (0, _includes.default)(itemId, expanded);

        if (isOpened) {
          if (single) {
            activeIndex = null;
          } else if (typeof expanded === 'string') {
            activeIndex = null;
          } else {
            activeIndex = expanded.filter(function (item) {
              return item !== itemId;
            });
          }
        } else if (single) {
          activeIndex = itemId;
        } else {
          activeIndex = [].concat(expanded, [itemId]);
        }

        onTitleClick && onTitleClick(event, {
          activeIndex: activeIndex
        });

        if (onClick) {
          onClick(event, {
            activeIndex: activeIndex
          });
        }

        if (!isOpened && scrollToActive) {
          _this.refsList["item-" + itemId].scrollIntoView({
            behavior: 'smooth'
          });
        }

        _this.setState({
          expanded: getExpanded(data, activeIndex)
        });
      };
    };

    _this.renderItem = function (item, index) {
      var _cn, _cn2;

      var _this$props2 = _this.props,
          dataQaType = _this$props2.dataQaType,
          colored = _this$props2.colored,
          size = _this$props2.size,
          theme = _this$props2.theme,
          withoutArrow = _this$props2.withoutArrow,
          withoutBorders = _this$props2.withoutBorders,
          borderType = _this$props2.borderType,
          removeCollapsedContent = _this$props2.removeCollapsedContent,
          iconAlign = _this$props2.iconAlign,
          overflowHidden = _this$props2.overflowHidden,
          globalFaq = _this$props2.faq;
      var expanded = _this.state.expanded;
      var itemId = item.itemId,
          title = item.title,
          content = item.content,
          onClick = item.onClick,
          icon = item.icon,
          noPadding = item.noPadding,
          itemFaq = item.faq;
      var id = itemId || index;
      var itemKey = "item-" + id;
      var descriptionId = _this.id + "-description-" + id;
      var contentId = _this.id + "-content-" + id;
      var isOpened = (0, _includes.default)(id, expanded);
      var faq = globalFaq || itemFaq;
      var removeContent = faq ? false : removeCollapsedContent;
      return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, faq ? {
        itemScope: true,
        itemProp: 'mainEntity',
        itemType: 'https://schema.org/Question'
      } : {}, {
        "data-qa-type": dataQaType + ".item",
        ref: _this.setRef(itemKey),
        key: item.key || itemId || index,
        className: (0, _classnames.default)((_cn = {}, _cn[_AccordionModule.default.item] = true, _cn[_AccordionModule.default["item_size_" + size]] = size, _cn[_AccordionModule.default["item_theme_" + theme]] = theme, _cn[_AccordionModule.default.item_opened] = isOpened, _cn[_AccordionModule.default.item_colored] = colored, _cn[_AccordionModule.default.item_withoutBorders] = withoutBorders, _cn[_AccordionModule.default["item_borders_" + borderType]] = borderType !== 'all' && !withoutBorders, _cn))
      }), /*#__PURE__*/_react.default.createElement(_clickable.default, {
        dataQaType: dataQaType + ".term",
        className: _AccordionModule.default.term,
        innerClassName: _AccordionModule.default.termInner,
        onClick: _this.handleTitleClick(id, onClick),
        id: contentId,
        "aria-expanded": isOpened,
        "aria-controls": descriptionId
      }, icon && /*#__PURE__*/_react.default.createElement("div", {
        className: _AccordionModule.default.icon
      }, icon), /*#__PURE__*/_react.default.createElement("div", Object.assign({}, faq ? {
        itemProp: 'name'
      } : {}, {
        className: _AccordionModule.default.title
      }), title), !withoutArrow && /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)((_cn2 = {}, _cn2[_AccordionModule.default.arrow] = true, _cn2[_AccordionModule.default.arrow_opened] = isOpened, _cn2[_AccordionModule.default["arrow_verticalAlign_" + iconAlign]] = _AccordionModule.default["arrow_verticalAlign_" + iconAlign], _cn2))
      }, /*#__PURE__*/_react.default.createElement(_ArrowDown.default, null))), /*#__PURE__*/_react.default.createElement("div", Object.assign({}, faq ? {
        itemScope: true,
        itemProp: 'acceptedAnswer',
        itemType: 'https://schema.org/Answer'
      } : {}, {
        "data-qa-type": dataQaType + ".description",
        className: _AccordionModule.default.description,
        id: descriptionId
      }), /*#__PURE__*/_react.default.createElement(_collapseBlock.default, {
        removeCollapsedContent: removeContent,
        collapsed: !isOpened,
        overflowHidden: overflowHidden
      }, /*#__PURE__*/_react.default.createElement("div", Object.assign({}, faq ? {
        itemProp: 'text'
      } : {}, {
        className: _AccordionModule.default.content,
        "aria-labelledby": contentId,
        style: {
          padding: noPadding ? '0' : null
        }
      }), content))));
    };

    _this.id = (0, _generateId.default)((0, _assertThisInitialized2.default)(_this));
    _this.refMemo = {};
    _this.refsList = {};
    _this.state = {
      expanded: getExpanded(props.data, props.activeIndex)
    };
    return _this;
  }

  var _proto = Accordion.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (nextProps.activeIndex !== this.props.activeIndex) {
      this.setState({
        expanded: getExpanded(nextProps.data, nextProps.activeIndex)
      });
    }

    return true;
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        data = _this$props3.data,
        flatCorners = _this$props3.flatCorners,
        faq = _this$props3.faq;
    return data.length ? /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)(this.props), faq ? {
      itemScope: true,
      itemType: 'https://schema.org/FAQPage'
    } : {}, {
      className: _AccordionModule.default.root,
      style: corners.style(flatCorners)
    }), data.map(this.renderItem)) : null;
  };

  return Accordion;
}(_react.Component);

Accordion.defaultProps = {
  dataQaType: 'uikit/accordion',
  size: 'l',
  removeCollapsedContent: true,
  scrollToActive: true,
  iconAlign: 'top',
  theme: 'default',
  borderType: 'all',
  overflowHidden: true
};
var _default = Accordion;
exports.default = _default;