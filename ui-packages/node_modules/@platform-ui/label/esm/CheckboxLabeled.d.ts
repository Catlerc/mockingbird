import type { ComponentProps } from 'react';
export declare const CheckboxLabeledStateless: (props: import("./withLabel").WithLabelProps<import("@platform-ui/checkbox").CheckboxStatelessProps>) => JSX.Element;
export declare type CheckboxLabeledStatelessProps = ComponentProps<typeof CheckboxLabeledStateless>;
export declare const CheckboxLabeled: import("react").ForwardRefExoticComponent<Omit<Omit<import("@platform-ui/checkbox").CheckboxStatelessProps, keyof import("./withLabel").LabeledInputProps> & Omit<import("./Label").LabelProps, "input">, keyof import("@platform-ui/stateUtils").CheckableInputPropsConstraint<any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams>> & Partial<Pick<Omit<import("@platform-ui/checkbox").CheckboxStatelessProps, keyof import("./withLabel").LabeledInputProps> & Omit<import("./Label").LabelProps, "input">, keyof import("@platform-ui/stateUtils").CheckableInputPropsConstraint<any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams, any, import("@platform-ui/stateUtils").ChangeParams>>> & {
    defaultChecked?: boolean | undefined;
} & import("react").RefAttributes<never>>;
export declare type CheckboxLabeledProps = ComponentProps<typeof CheckboxLabeled>;
