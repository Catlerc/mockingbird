import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["title", "onClick", "additionalContent"];
import React from 'react';
import cn from 'classnames';
import TabsBlockButton from './TabsBlockButton/TabsBlockButton';
import { getKey, getOnClickHandler } from './utils';
import styles from './TabsBlock.module.css';

const TabsBlockInline = props => {
  const {
    items,
    activeIndex,
    disabled,
    size = 'm',
    align,
    width,
    onItemClick
  } = props;
  const buttonStyle = align === 'stretch' ? {
    flex: 1
  } : {};
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width
    },
    className: cn({
      [styles.inline]: true,
      [styles[`inline_align_${align}`]]: styles[`inline_align_${align}`]
    })
  }, items.map((_ref, index) => {
    let {
      title,
      onClick,
      additionalContent
    } = _ref,
        item = _objectWithoutPropertiesLoose(_ref, _excluded);

    return /*#__PURE__*/React.createElement(TabsBlockButton, Object.assign({}, buttonStyle, item, {
      key: getKey(_extends({
        title,
        additionalContent
      }, item), index),
      size: size,
      checked: index === activeIndex,
      disabled: item.disabled || disabled,
      first: index === 0,
      last: index === items.length - 1,
      afterActive: index === activeIndex + 1,
      onClick: getOnClickHandler([onItemClick, onClick], index, title)
    }), /*#__PURE__*/React.createElement("div", {
      className: styles.content
    }, title), additionalContent && /*#__PURE__*/React.createElement("div", {
      className: styles.additionalContent
    }, additionalContent));
  }));
};

export default TabsBlockInline;