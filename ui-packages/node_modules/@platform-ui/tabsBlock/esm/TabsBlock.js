import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["title", "additionalContent", "onClick"];
import React, { PureComponent, Fragment } from 'react';
import classNames from 'classnames';
import ArrowIcon from '@platform-ui/iconsPack/interface/24/ArrowDown';
import ContextMenu from '@platform-ui/contextMenu';
import TabsLayout from '@platform-ui/tabsLayout';
import TabsBlockButton from './TabsBlockButton/TabsBlockButton';
import TabsBlockCompact from './TabsBlockCompact';
import { getOnClickHandler, getContextMenuItems, getKey } from './utils';
import styles from './TabsBlock.module.css';

class TabsBlock extends PureComponent {
  constructor(props) {
    super(props);

    this.handleItemsVisibilityChange = (_, {
      itemsVisibility
    }) => {
      this.setState({
        itemsVisibility
      });
    };

    const {
      items = []
    } = props;
    this.state = {
      itemsVisibility: items.map(() => true)
    };
  }

  getContextMenuItems() {
    const {
      itemsVisibility
    } = this.state;
    return getContextMenuItems(this.props).filter((item, index) => !itemsVisibility[index]);
  }

  renderMoreButton() {
    const {
      size,
      disabled,
      activeIndex,
      showMoreOnHover,
      moreButtonText,
      moreButtonContent,
      rearrangeActiveElem
    } = this.props;
    const {
      itemsVisibility
    } = this.state;
    const items = this.getContextMenuItems();
    const afterActive = itemsVisibility.lastIndexOf(true) === activeIndex;
    const content = typeof moreButtonContent === 'function' ? moreButtonContent(moreButtonText) : moreButtonContent;
    return /*#__PURE__*/React.createElement(ContextMenu, {
      hideOnResize: true,
      items: items,
      showOnHover: showMoreOnHover,
      itemSize: {
        l: 'l',
        m: 'm',
        s: 'xs'
      }[size]
    }, /*#__PURE__*/React.createElement(TabsBlockButton, {
      size: size,
      last: true,
      disabled: disabled,
      afterActive: afterActive,
      checked: !rearrangeActiveElem && itemsVisibility[activeIndex] === false,
      tabIndex: -1
    }, content));
  }

  render() {
    const {
      size,
      align,
      onItemClick,
      activeIndex,
      items,
      disabled,
      mobileSingleButton,
      backgroundColor,
      rearrangeActiveElem,
      moreButtonWidth
    } = this.props;
    const {
      itemsVisibility
    } = this.state;
    const firstVisibleIndex = itemsVisibility.indexOf(true);
    const lastIndex = items.length - 1;
    let indexBeforeActive = activeIndex - 1;

    while (itemsVisibility[indexBeforeActive] === false) {
      indexBeforeActive--;
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, mobileSingleButton && /*#__PURE__*/React.createElement("div", {
      className: styles.hiddenOnTabletAndDesktop
    }, /*#__PURE__*/React.createElement(TabsBlockCompact, this.props)), /*#__PURE__*/React.createElement("div", {
      className: classNames({
        [styles.hiddenOnPhone]: mobileSingleButton
      })
    }, /*#__PURE__*/React.createElement(TabsLayout, {
      align: align,
      height: {
        s: 32,
        m: 44,
        l: 56
      }[size],
      moreButtonWidth: moreButtonWidth || {
        s: 80,
        m: 100,
        l: 124
      }[size],
      moreButton: this.renderMoreButton(),
      activeIndex: activeIndex,
      backgroundColor: backgroundColor,
      rearrangeActiveElem: rearrangeActiveElem && activeIndex <= lastIndex,
      onItemsVisibilityChange: this.handleItemsVisibilityChange
    }, items.map((_ref, index) => {
      let {
        title,
        additionalContent,
        onClick
      } = _ref,
          item = _objectWithoutPropertiesLoose(_ref, _excluded);

      return /*#__PURE__*/React.createElement(TabsBlockButton, Object.assign({}, item, {
        key: getKey(_extends({
          title,
          additionalContent
        }, item), index),
        tabIndex: -1,
        size: size,
        checked: index === activeIndex,
        disabled: disabled || item.disabled,
        first: index === firstVisibleIndex,
        last: itemsVisibility.every(i => i) && lastIndex === index,
        afterActive: index === activeIndex + 1,
        beforeActive: index === indexBeforeActive && activeIndex <= lastIndex,
        onClick: getOnClickHandler([onItemClick, onClick], index, title)
      }), /*#__PURE__*/React.createElement("div", {
        className: styles.content
      }, title), additionalContent && /*#__PURE__*/React.createElement("div", {
        className: styles.additionalContent
      }, additionalContent));
    }))));
  }

}

TabsBlock.defaultProps = {
  size: 'm',
  items: [],
  activeIndex: 0,
  align: 'left',
  rearrangeActiveElem: true,
  backgroundColor: 'var(--tds-color-base-01, #fff)',
  moreButtonText: 'Ещё',
  moreButtonContent: text => /*#__PURE__*/React.createElement(Fragment, null, text, /*#__PURE__*/React.createElement("span", {
    className: styles.icon
  }, /*#__PURE__*/React.createElement(ArrowIcon, null)))
};
export default TabsBlock;