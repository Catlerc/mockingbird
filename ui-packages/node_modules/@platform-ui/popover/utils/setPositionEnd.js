"use strict";

exports.__esModule = true;
exports.setPositionEnd = setPositionEnd;

var maxOffsetTooltip = function maxOffsetTooltip(shift, offset, size, parentSize) {
  if (parentSize === void 0) {
    parentSize = 0;
  }

  var sign = shift >= 0 ? 1 : -1;
  var limitPlus = sign * (size - offset);
  var limitMinus = sign * (parentSize - offset);
  return shift >= 0 ? Math.min(limitPlus, shift) : Math.max(limitMinus, shift);
};

var maxOffsetArrow = function maxOffsetArrow(shift, offset, size, parentSize) {
  if (parentSize === void 0) {
    parentSize = 0;
  }

  var sign = shift >= 0 ? 1 : -1;
  var limitPlus = sign * (size - parentSize / 2 - offset);
  var limitMinus = sign * (parentSize / 2 - offset);
  return shift >= 0 ? Math.min(limitPlus, shift) : Math.max(limitMinus, shift);
};

var setHorizontal = function setHorizontal(_ref) {
  var childrenRect = _ref.childrenRect,
      popoverRect = _ref.popoverRect,
      direction = _ref.direction,
      additionalShift = _ref.additionalShift,
      customPadding = _ref.customPadding,
      minArrowOffset = _ref.minArrowOffset,
      containerOffsets = _ref.containerOffsets;
  return {
    tooltipStyle: {
      top: childrenRect.bottom - popoverRect.height + maxOffsetTooltip(additionalShift, minArrowOffset, popoverRect.height, childrenRect.height) + containerOffsets.top,
      left: direction === 'right' ? childrenRect.right + customPadding + containerOffsets.left : childrenRect.left - popoverRect.width - customPadding + containerOffsets.left
    },
    cornerStyle: {
      top: popoverRect.height - childrenRect.height / 2 - maxOffsetArrow(additionalShift, minArrowOffset, popoverRect.height, childrenRect.height)
    }
  };
};

var setVertical = function setVertical(_ref2) {
  var childrenRect = _ref2.childrenRect,
      popoverRect = _ref2.popoverRect,
      direction = _ref2.direction,
      additionalShift = _ref2.additionalShift,
      customPadding = _ref2.customPadding,
      windowMargin = _ref2.windowMargin,
      minArrowOffset = _ref2.minArrowOffset,
      containerOffsets = _ref2.containerOffsets;
  var tooltipStyle = {
    top: direction === 'bottom' ? childrenRect.bottom + customPadding + containerOffsets.top : childrenRect.top - popoverRect.height - customPadding + containerOffsets.top,
    left: childrenRect.right - popoverRect.width + maxOffsetTooltip(additionalShift, minArrowOffset, popoverRect.width, childrenRect.width) + containerOffsets.left
  };
  var arrowLeft = popoverRect.width - childrenRect.width / 2;
  var cornerStyle = {
    left: arrowLeft - maxOffsetArrow(additionalShift, minArrowOffset, popoverRect.width, childrenRect.width)
  }; // не даем вылезти тултипу за экран

  var left = childrenRect.right - popoverRect.width + maxOffsetTooltip(additionalShift, minArrowOffset, popoverRect.width, childrenRect.width);
  var realWindowMargin = Math.min(windowMargin, childrenRect.left);

  if (left < realWindowMargin) {
    tooltipStyle.left = realWindowMargin;
    cornerStyle.marginLeft = left - realWindowMargin;
  }

  return {
    tooltipStyle: tooltipStyle,
    cornerStyle: cornerStyle
  };
};

function setPositionEnd(args) {
  switch (args.direction) {
    case 'left':
    case 'right':
      return setHorizontal(args);

    case 'top':
    case 'bottom':
      return setVertical(args);
  }
}