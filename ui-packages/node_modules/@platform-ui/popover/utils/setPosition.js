"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.setPosition = setPosition;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _setPositionStart = require("./setPositionStart");

var _setPositionCenter = require("./setPositionCenter");

var _setPositionEnd = require("./setPositionEnd");

var _isEnoughSpace = require("./isEnoughSpace");

var _getDirectionsQueue = require("./getDirectionsQueue");

var _getAlignsQueue = require("./getAlignsQueue");

var _setPositionAuto = require("./setPositionAuto");

var _excluded = ["smartDirection"];
var setPositionMap = {
  start: _setPositionStart.setPositionStart,
  center: _setPositionCenter.setPositionCenter,
  end: _setPositionEnd.setPositionEnd,
  stretch: _setPositionCenter.setPositionCenter,
  auto: _setPositionAuto.setPositionAuto
};

var setPosMethod = function setPosMethod(_ref) {
  var smartDirection = _ref.smartDirection,
      args = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);

  if (smartDirection && !(0, _isEnoughSpace.isEnoughSpace)(args)) {
    return;
  }

  return setPositionMap[args.align](args);
};

function setPosition(options) {
  var directionsQueue = (0, _getDirectionsQueue.getDirectionsQueue)(options.direction);
  var directionsQueueLength = directionsQueue.length;
  var mainDirection = directionsQueue[0];
  var mainAlign = options.align;
  var result;
  var direction;
  var alignsQueue;
  var alignsQueueLength;
  var i;
  var j;

  for (i = 0; !result && i < directionsQueueLength; i++) {
    direction = directionsQueue[i];
    alignsQueue = (0, _getAlignsQueue.getAlignsQueue)(mainDirection, mainAlign, direction);
    alignsQueueLength = alignsQueue.length;

    for (j = 0; !result && j < alignsQueueLength; j++) {
      result = setPosMethod((0, _extends2.default)({}, options, {
        direction: direction,
        align: alignsQueue[j]
      }));
    }
  } // если тултип вылезает по всем границам, то берем иначально заданное направление


  if (!result) {
    direction = mainDirection;
    result = setPosMethod((0, _extends2.default)({}, options, {
      direction: direction,
      smartDirection: false
    }));
  }

  return [direction, result];
}