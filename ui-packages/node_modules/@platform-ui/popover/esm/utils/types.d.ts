import type React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { PortalProps } from '@platform-ui/portal';
export declare type Direction = 'top' | 'bottom' | 'left' | 'right';
export declare type Align = 'start' | 'center' | 'end' | 'stretch' | 'auto';
export declare type TooltipStyle = {
    top: number;
    left: number;
    width?: number;
    height?: number;
};
export declare type CornerStyle = {
    top?: number;
    left?: number;
    marginTop?: number;
    marginLeft?: number;
};
export declare type StyleProps = {
    tooltipStyle: TooltipStyle;
    cornerStyle: CornerStyle;
};
export declare type PartialDOMRect = Pick<DOMRect, 'top' | 'bottom' | 'left' | 'right' | 'width' | 'height'>;
export interface PopoverProps extends DataQaInterface {
    /**
     * Флаг для preventDefault на событие click
     */
    preventDefaultClick?: boolean;
    /**
     * Задает атибут aria-owns, принимает id блока-владельца
     */
    ariaOwnsId?: string;
    /**
     * Принудительно отображает содержимое prop popoverContent
     */
    isActive?: boolean;
    /**
     * Принудительно скрывает содержимое prop popoverContent
     */
    isInactive?: boolean;
    /**
     * появление только по клику на элемент
     */
    toggleOnClick?: boolean;
    /**
     * конент блока, к которому прикреплена всплывашка
     */
    children?: React.ReactNode;
    /**
     * направление/массив приоритетов направлений появления всплывашки
     */
    direction?: Direction | Direction[];
    /**
     * флаг умного определения позиции всплывашки, не дающего вылазить ей за экран
     */
    smartDirection?: boolean;
    /**
     * Флаг, скрывать ли компонент при ресайзе
     */
    hideOnResize?: boolean;
    /**
     * контент всплывашки
     */
    popoverBlock?: React.ReactNode;
    /**
     * Функция для рендера всплывашки, принимающая this.close в качестве аргумента.
     * Нужна для компонентов, где требуется ручное закрытие Popover.
     */
    renderPopoverBlock?: (close: (params?: {
        isActive?: boolean;
    }) => void) => void;
    /**
     * отступ от границ контейнера (ближайший PortalContainer или body)
     */
    windowMargin?: number;
    /**
     * Выравнивание всплывашки относительно контента
     */
    align?: Align;
    /**
     * Увеличенная ховер-зона вокруг всплывашки
     */
    increasedTouchZone?: boolean;
    /**
     * Кастомный сдвиг перпендикулярно текущему направлению всплывашки
     */
    additionalShift?: number;
    /**
     * Кастомный отступ от контента
     */
    customPadding?: number;
    /**
     * Задержка появления при ховере
     */
    hoverDelay?: number;
    /**
     * Кастомный z-index (без крайней необходимости не использовать)
     */
    zIndex?: number;
    /**
     * Флаг, растягивает компонент на 100% по W x H
     */
    wide?: boolean;
    /**
     * Скрывать поповер по клику на него
     */
    closeOnPopoverClick?: boolean;
    /**
     * Скрывать поповер по ховеру на него
     */
    noBubbleHover?: boolean;
    /**
     * ВНИМАНИЕ: нейминг пропа не соответствует фактическому назначению:
     * Обработчик отвечает за изменение позиции самого поповера и уголка.
     * Для обработки открытия/закрытия нужно использовать onClose
     */
    onActiveToggle?: (newDirection: Direction, cornerStyle: Record<string, string>) => void;
    onClick?: (e: React.MouseEvent) => void;
    /**
     * Обработчик срабатывает при деактивации Popover'a
     */
    onClose?: (params: {
        active?: false;
        toggleOnClick?: boolean;
    }) => void;
    /**
     * Обработчик срабатывает при активации Popover'a
     */
    onShow?: (params: {
        active?: true;
        toggleOnClick?: boolean;
    }) => void;
    /**
     * Позволяет получить снаружи функцию для явного пересчета позиции тултипа (подробнее в README)
     */
    getSetPositionFunc?: (cb: () => void) => void;
    /**
     * Aтрибут role компонента
     */
    role?: string;
    /**
     * Атрибут aria-describedby компонента
     */
    ariaDescribedBy?: string;
    /**
     * Флаг анимированого появления/скрытия компонента
     */
    animated?: boolean;
    /**
     * Задает ограничения для позиционирования стрелок относительно краев
     */
    minArrowOffset?: number;
    /**
     * Включает скрытие PopoverBlock на мобильных при событии TouchMove
     */
    hideOnTouchMove?: boolean;
    /**
     * Включает скрытие поповера по внешнему клику
     */
    hideOnClickOutside?: boolean;
    /**
     * Отключает показ/скрытие по событиям внутри Popover (onClick, onMouseEnter, onMouseLeave)
     * [UIKIT-5013]
     */
    disableToggleOnInsideEvents?: boolean;
    /**
     *  Принудительно рендерит контент в <body>
     */
    toBody?: boolean;
    /**
     * Куда рендерить контент?: `body` либо значение `exitId` нужного PortalExit
     */
    to?: PortalProps['to'];
    /**
     * Обработчик на клик вне Popover'а
     */
    onClickOutside?: (e: React.MouseEvent) => void;
    /**
     * Включает состояние `disabled`
     */
    disabled?: boolean;
    /**
     * Инлайн-стили блока с контентом
     */
    blockStyles?: React.CSSProperties;
    /**
     * Тег создаваемый порталом
     */
    portalTagName?: PortalProps['tagName'];
}
