import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["animated", "popoverBlock", "direction", "increasedTouchZone", "refCallback", "opened", "animationDisabled", "dataQaType"];
import React, { useState, useEffect } from 'react';
import cn from 'classnames';
import dataQa from '@platform-ui/dataQa';
import styles from './Popover.module.css';

const PopoverBlock = props => {
  const {
    animated,
    popoverBlock,
    direction,
    increasedTouchZone,
    refCallback,
    opened,
    animationDisabled,
    dataQaType
  } = props,
        otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  const [mounted, setMounted] = useState(false);

  const handleAnimationEnd = () => setMounted(false);

  useEffect(() => {
    const withoutAnimation = animationDisabled || !animated;

    if (opened) {
      setMounted(true);
    }

    if (!opened && withoutAnimation) {
      setMounted(false);
    }
  }, [opened, animated, animationDisabled]);
  return mounted ? /*#__PURE__*/React.createElement("div", Object.assign({}, otherProps, dataQa({
    dataQaType
  }), {
    ref: refCallback,
    className: cn({
      [styles.container]: true,
      [styles.container_animated]: animated,
      [styles[`container_direction_${direction}`]]: direction,
      [styles.container_increasedTouchZone]: increasedTouchZone,
      [styles.container_open]: opened && direction,
      [styles.container_close]: !opened && direction
    }),
    onAnimationEnd: !opened ? handleAnimationEnd : undefined
  }), popoverBlock) : null;
};

export default PopoverBlock;