import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
export declare type TextPropsSizes = 'inherit' | 50 | 40 | 36 | 28 | 24 | 20 | 19 | 17 | 15 | '15_small' | 13 | '13_small' | 11;
export declare type TextPropsAlign = 'left' | 'center' | 'right' | 'inherit' | 'justify';
export interface TextProps extends DataQaInterface, React.HTMLAttributes<HTMLElement> {
    /**
     * Содержимое контейнера
     */
    children?: React.ReactNode;
    /**
     * Перевод в верхний регистр
     */
    uppercase?: boolean;
    /**
     * Тег контейнера
     */
    tagName?: string;
    /**
     * Размер текста
     */
    size?: TextPropsSizes;
    /**
     * Размер текста на разрешении TabletS
     */
    sizeTabletS?: TextPropsSizes;
    /**
     * Размер текста на разрешении TabletL
     */
    sizeTabletL?: TextPropsSizes;
    /**
     * Размер текста на разрешении DesktopS
     */
    sizeDesktopS?: TextPropsSizes;
    /**
     * Размер текста на разрешении DesktopM
     */
    sizeDesktopM?: TextPropsSizes;
    /**
     * Размер текста на разрешении DesktopL
     */
    sizeDesktopL?: TextPropsSizes;
    /**
     * Горизонтальное выравнивание
     */
    align?: TextPropsAlign;
    /**
     * Горизонтальное выравнивание на разрешении TabletS
     */
    alignTabletS?: TextPropsAlign;
    /**
     * Горизонтальное выравнивание на разрешении TabletL
     */
    alignTabletL?: TextPropsAlign;
    /**
     * Горизонтальное выравнивание на разрешении DesktopS
     */
    alignDesktopS?: TextPropsAlign;
    /**
     * Горизонтальное выравнивание на разрешении DesktopM
     */
    alignDesktopM?: TextPropsAlign;
    /**
     * Горизонтальное выравнивание на разрешении DesktopL
     */
    alignDesktopL?: TextPropsAlign;
    /**
     * Жирное начертание
     */
    bold?: boolean;
    /**
     * Правила переноса слов
     * (React.CSSProperties['wordWrap'])
     */
    wordWrap?: React.CSSProperties['wordWrap'];
    /**
     * Обрезание текста с троеточием на конце строки
     */
    overflowEllipsis?: boolean;
    /**
     * Правила обработки пробельных символов
     * (React.CSSProperties['whiteSpace'])
     */
    whiteSpace?: React.CSSProperties['whiteSpace'];
    /**
     * Вертикальное выравнивание
     * (React.CSSProperties['verticalAlign'])
     */
    verticalAlign?: React.CSSProperties['verticalAlign'];
    /**
     * Тип отображения контейнера
     * (React.CSSProperties['display'])
     */
    display?: React.CSSProperties['display'];
    /**
     * Зачеркнутый текст
     */
    lineThrough?: boolean;
    /**
     * Добавление cobrowsing атрибута
     */
    cobrowsingSecure?: boolean;
    /**
     *  Перевод в верхний регистр первого символа в слове
     */
    capitalize?: boolean;
    /**
     * Курсор при наведении
     * (React.CSSProperties['cursor'])
     */
    cursor?: React.CSSProperties['cursor'];
    /**
     * Цвет текста
     * (React.CSSProperties['color'])
     */
    color?: React.CSSProperties['color'];
}
declare const Text: React.FC<TextProps>;
export default Text;
