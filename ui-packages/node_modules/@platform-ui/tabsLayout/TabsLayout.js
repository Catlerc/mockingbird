"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _TabsLayoutModule = _interopRequireDefault(require("./TabsLayout.module.css"));

var TabsLayout = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inheritsLoose2.default)(TabsLayout, _React$PureComponent);

  function TabsLayout(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;
    _this.rootRef = /*#__PURE__*/_react.default.createRef();
    _this.moreRef = /*#__PURE__*/_react.default.createRef();
    _this.itemNodes = [];
    _this.itemsVisibility = [];
    _this.itemRefCallbacks = [];
    _this.itemsObserver = void 0;
    _this.state = {
      moreButtonWidth: props.moreButtonWidth,
      tabs: []
    };
    return _this;
  }

  TabsLayout.getDerivedStateFromProps = function getDerivedStateFromProps(props) {
    return {
      tabs: _react.default.Children.toArray(props.children)
    };
  };

  var _proto = TabsLayout.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    // eslint-disable-next-line compat/compat
    this.itemsObserver = new IntersectionObserver(function (entries) {
      var onItemsVisibilityChange = _this2.props.onItemsVisibilityChange;
      var tabs = _this2.state.tabs;
      _this2.itemsVisibility.length = tabs.length;
      entries.forEach(function (entry) {
        var item = entry.target;
        var index = +item.dataset.index;
        var visible = entry.intersectionRatio > 0;
        _this2.itemsVisibility[index] = visible;
      });
      onItemsVisibilityChange(null, {
        itemsVisibility: [].concat(_this2.itemsVisibility)
      });
    }, {
      root: this.rootRef.current,
      threshold: 1
    });
    this.itemNodes.forEach(function (itemNode) {
      if (itemNode) {
        _this2.itemsObserver.observe(itemNode);
      }
    });
    this.updateMoreWidth();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props = this.props,
        moreButton = _this$props.moreButton,
        moreButtonWidth = _this$props.moreButtonWidth;

    if (prevProps.moreButtonWidth !== moreButtonWidth || prevProps.moreButton !== moreButton) {
      this.updateMoreWidth();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.itemsObserver && this.itemsObserver.disconnect();
  };

  _proto.getItemRefCallback = function getItemRefCallback(index) {
    var _this3 = this;

    if (!this.itemRefCallbacks[index]) {
      this.itemRefCallbacks[index] = function (node) {
        if (_this3.itemsObserver) {
          var prevNode = _this3.itemNodes[index];

          if (node) {
            _this3.itemsObserver.observe(node);
          } else if (prevNode) {
            _this3.itemsObserver.unobserve(prevNode);
          }
        }

        _this3.itemNodes[index] = node;
      };
    }

    return this.itemRefCallbacks[index];
  } // eslint-disable-next-line max-statements
  ;

  _proto.getItemPosition = function getItemPosition(index) {
    var activeIndex = this.props.activeIndex;
    var rearrangeActiveElem = this.props.rearrangeActiveElem;
    var length = this.state.tabs.length;

    if (length === 1) {
      return 'last';
    }

    if (!rearrangeActiveElem) {
      if (index === length - 1) {
        return 'last';
      }

      return 'base';
    }

    if (activeIndex === length - 1) {
      if (index === length - 2) {
        return 'beforeLastActive';
      }
    } else if (index === length - 1) {
      return 'last';
    }

    if (index === activeIndex) {
      return 'active';
    }

    if (index < activeIndex) {
      return 'beforeActive';
    }

    return 'base';
  };

  _proto.updateMoreWidth = function updateMoreWidth() {
    var _this4 = this;

    requestAnimationFrame(function () {
      if (_this4.moreRef.current) {
        _this4.setState({
          moreButtonWidth: _this4.moreRef.current.getBoundingClientRect().width
        });
      }
    });
  };

  _proto.renderMoreButton = function renderMoreButton(index) {
    var moreButton = this.props.moreButton;

    if (typeof moreButton === 'function') {
      return moreButton({
        index: index
      });
    }

    return moreButton;
  };

  _proto.renderItem = function renderItem(tab, index) {
    var _cn;

    var gap = this.props.gap;
    var activeIndex = this.props.activeIndex;
    var _this$props2 = this.props,
        height = _this$props2.height,
        backgroundColor = _this$props2.backgroundColor,
        moreButton = _this$props2.moreButton;
    var _this$state = this.state,
        moreButtonWidth = _this$state.moreButtonWidth,
        tabs = _this$state.tabs;
    var position = this.getItemPosition(index);
    var style = {
      height: height,
      backgroundColor: backgroundColor,
      paddingRight: gap
    };
    var overflowContent;
    var overflowContentStyle = {}; // eslint-disable-next-line default-case

    switch (position) {
      case 'last':
        /**
         * Добавляем 1 пиксель ширины на тот случай, когда последний таб уже кнопки "Ещё":
         * Иначе последний таб занимает 0 пикселей по ширине и "вываливается" раньше времени
         * когда выбран предпоследний таб.
         * Также добавляем дополнительный паддинг в 100px на случай если moreButtonWidth подсчитан неправильно
         * (иногда случается после SSR)
         */
        style.minWidth = moreButtonWidth + 1;
        style.marginRight = -moreButtonWidth - 100;
        style.paddingRight = 100;
        break;

      case 'base':
      case 'active':
        overflowContent = this.renderMoreButton(index);
        break;

      case 'beforeLastActive':
        style.marginRight = -moreButtonWidth - gap;
        overflowContent = tabs[activeIndex];
        /**
         * Добавляем паддинг справа на случай, когда предпоследний таб уже кнопки "Ещё":
         * В этом случае кнопка Ещё выпирает из-под последнего таба
         */

        overflowContentStyle.paddingRight = moreButtonWidth;
        break;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      ref: this.getItemRefCallback(index),
      "data-index": index,
      style: style,
      className: (0, _classnames.default)((_cn = {}, _cn[_TabsLayoutModule.default.item] = true, _cn[_TabsLayoutModule.default["item_position_" + position]] = true, _cn))
    }, tab, overflowContent && /*#__PURE__*/_react.default.createElement("div", {
      className: _TabsLayoutModule.default.overflowContent,
      style: overflowContentStyle
    }, overflowContent));
  };

  _proto.render = function render() {
    var _cn2;

    var activeIndex = this.props.activeIndex;
    var _this$props3 = this.props,
        height = _this$props3.height,
        align = _this$props3.align,
        rearrangeActiveElem = _this$props3.rearrangeActiveElem,
        moreButton = _this$props3.moreButton;
    var tabs = this.state.tabs;
    var items = tabs.map(this.renderItem, this);
    var itemsBeforeActive;

    if (rearrangeActiveElem && activeIndex >= 0 && activeIndex < tabs.length) {
      itemsBeforeActive = items.splice(0, activeIndex + 1);
      itemsBeforeActive.unshift(itemsBeforeActive.pop());
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.rootRef,
      className: (0, _classnames.default)((_cn2 = {}, _cn2[_TabsLayoutModule.default.root] = true, _cn2[_TabsLayoutModule.default["root_align_" + align]] = true, _cn2)),
      style: {
        height: height
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _TabsLayoutModule.default.tabs
    }, itemsBeforeActive && /*#__PURE__*/_react.default.createElement("div", {
      className: _TabsLayoutModule.default.itemsBeforeActive
    }, itemsBeforeActive), items), /*#__PURE__*/_react.default.createElement("div", {
      className: _TabsLayoutModule.default.invisibleBlock,
      ref: this.moreRef
    }, this.renderMoreButton(null)));
  };

  return TabsLayout;
}(_react.default.PureComponent);

TabsLayout.defaultProps = {
  align: 'left',
  moreButtonWidth: 0,
  gap: 0,
  rearrangeActiveElem: true,
  activeIndex: -1
};
var _default = TabsLayout;
exports.default = _default;