import React, { PureComponent } from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
export declare type Position = 'right' | 'left';
export declare type SetScrollPosition = (position: number | Position, animated?: boolean) => void;
export declare type GetScrollPosition = () => number;
export declare type ScrollBlockProps = DataQaInterface & React.PropsWithChildren<{
    /**
     * id элемента со скроллом
     */
    scrollId: string;
    /**
     * Коллбек для получения контроллера компонента
     */
    getControllers(controllers: {
        setScrollPosition?: SetScrollPosition;
        getScrollPosition?: GetScrollPosition;
    }): void;
    /**
     * Длительность анимации
     */
    animationDuration: number;
    /**
     * Функция анимации
     */
    animationFunction(time: number): number;
    /**
     * Обработчик для скролла
     */
    onScroll(event: any): void;
    /**
     * Callback вызываемый при остановке скролла
     */
    onScrollStop?(event: any): void;
    /**
     * Задержка вызова onScrollStop после остановки скролла (ms)
     * @default 150
     */
    scrollStopDelay: number;
    /**
     * Флаг drag events
     */
    draggable: boolean;
    /**
     * Задает горизонтальные внутренние отступы
     */
    innerPadding: number;
    /**
     * Флаг отображения теней при скролле
     */
    withFade: boolean;
    /**
     * Цвет тени при скролле
     */
    fadeColor: string;
    /**
     * Задает высоту компонента
     * Если высота не задана, скролл становится доступен только после инициализации js
     */
    height: string;
    /**
     * Устанавливает ширину контента равной ширине компонента, тем самым убирая скролл
     * Необходимо для работы text-overflow: ellipsis; у контента
     */
    noScroll: boolean;
}>;
declare type ScrollBlockState = {
    leftFade?: boolean;
    rightFade?: boolean;
    scrollBarWidth: number;
    overflowX: 'scroll' | 'hidden';
    isOverflow: boolean;
};
declare class ScrollBlock extends PureComponent<ScrollBlockProps, ScrollBlockState> {
    private container?;
    private animation?;
    private scrollStartPosition?;
    private scrollTimerId?;
    mounted: boolean;
    checkFade: () => void;
    setScrollPosition: (animationValue: number | Position, animated?: boolean) => void;
    setRef: (elem: HTMLDivElement) => void;
    setStateSafe: InstanceType<typeof ScrollBlock>['setState'];
    constructor(props: ScrollBlockProps);
    static defaultProps: {
        dataQaType: string;
        draggable: boolean;
        innerPadding: null;
        getControllers: () => void;
        onScroll: () => void;
        scrollStopDelay: number;
        withFade: boolean;
        fadeColor: string;
        animationDuration: number;
        animationFunction: any;
        height: null;
        noScroll: boolean;
        children: null;
        scrollId: null;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: ScrollBlockProps): void;
    componentWillUnmount(): void;
    handleScroll: (event: React.UIEvent<HTMLElement>) => void;
    handleDragStart: () => void;
    handleDrag: (event: any) => void;
    renderFade(): JSX.Element;
    render(): JSX.Element;
}
export default ScrollBlock;
