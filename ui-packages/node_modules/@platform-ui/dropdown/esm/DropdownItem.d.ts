import React from 'react';
import type * as t from './types';
export declare const SIZES: readonly ["l", "m", "s"];
export declare const CHECKMARK_STYLES: readonly ["default", "checkbox"];
export interface DropdownItemProps extends t.SizeProp {
    options?: t.Options;
    key?: t.SimpleValue;
    /**
     * Вариант оформления галочки выбранного элемента
     * `default` – просто галочка
     * `checkbox` - чекбокс
     */
    checkmarkStyle?: typeof CHECKMARK_STYLES[number];
    /**
     * Значение элемента
     */
    value: t.SimpleValue;
    /**
     * Атрибут data-qa-type
     */
    dataQaType?: string;
    /**
     * Заголовок
     */
    title?: React.ReactNode;
    /**
     * Лейбл (мелким серым текстом сверху заголовка)
     */
    label?: React.ReactNode;
    /**
     * Описание элемента (мелким серым текстом снизу заголовка)
     */
    description?: React.ReactNode;
    /**
     * Содержимое левой части
     */
    leftContent?: React.ReactNode;
    /**
     * Содержимое правой части
     */
    rightContent?: React.ReactNode;
    /**
     *  Флаг неактивного состояния
     */
    disabled?: boolean;
    /**
     * Резервирует место под галочку справа, чтобы не было скачков контента при выборе
     */
    checkboxed?: boolean;
    /**
     * Подсвечен ли элемент (ховер либо выбор с клавиатуры)
     */
    highlighted?: boolean;
    /**
     * Флаг подсветки фрагмента title для поиска (тег <em/>)
     */
    highlightMatch?: boolean;
    /**
     * Выбран ли элемент
     */
    selected?: boolean;
    /**
     * Возможно ли выбрать элемент
     */
    selectable?: boolean;
    /**
     * Флаг закрытия после выбора элемента
     */
    closeOnSelect?: boolean;
    /**
     * ARIA-роль элемента
     */
    role?: string;
    /**
     * Callback выбора элемента
     */
    onOptionSelect?: t.OptionSelectHandler;
    /**
     * Обработчик клика
     */
    onMouseDown?: t.MouseEvent;
    /**
     * Обработчик наведения мыши
     */
    onMouseOver?: t.MouseEvent;
    /**
     * Установка референса
     */
    setRef?: (instance: HTMLDivElement | null) => void;
    /**
     * Временные пропы для переопределения стилей, не предназначен для широкого использования.
     * Создан специально для задачи https://
     * __parentOverrideStyles добавлен для оптимизации, т.к. в Dropdown стили уже мерджатся.
     * TODO: удалить когда появится общий механизм темизации.
     */
    __overrideStyles?: {
        Dropdown?: {
            [key: string]: string;
        };
        [key: string]: any;
    };
    __parentOverrideStyles?: {
        [key: string]: string;
    };
    /**
     * Проп для хранения индекса айтема в массиве айтемов в DOM
     * Нужен для делегирования событий мыши
     */
    dropdownItemIndex?: string;
    /**
     * Включает ленивый рендеринг
     */
    lazy?: boolean;
}
declare const DropdownItem: React.FC<DropdownItemProps>;
export default DropdownItem;
