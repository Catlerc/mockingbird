import React, { PureComponent } from 'react';
import hoistStatics from 'hoist-non-react-statics';
import type { DataQaInterface } from '@platform-ui/dataQa';
import * as t from './types';
export interface DropdownProps extends DataQaInterface, t.SizeProp {
    /**
     * Минимальная ширина выпадающего списка
     */
    listMinWidth?: number;
    /**
     * Максимальная ширина выпадающего списка
     */
    listMaxWidth?: number;
    /**
     * Фиксированная высота списка
     */
    listHeight?: number | string;
    /**
     * z-index выпадающего списка
     */
    listZIndex?: number;
    /**
     * Контент компонента
     */
    children: React.ReactNode;
    /**
     * Массив опций
     */
    options: t.Options;
    /**
     * Флаг открытого состояния
     */
    opened?: boolean;
    /**
     * Callback выбора опции
     */
    onOptionSelect?: t.OptionSelectHandler;
    /**
     * Callback подсветки опции
     */
    onOptionHighlight?: t.OptionSelectHandler;
    /**
     * Callback снятия подсветки с опции
     */
    onOptionLeave?: t.MouseEvent;
    /**
     * Callback закрытия меню
     */
    onClose?: () => void;
    /**
     * Callback события onKeyDown
     */
    onKeyDown?: t.KeyboardEvent;
    /**
     * Должен ли список закрываться после выбора нового значения
     */
    closeOnSelect?: boolean;
    /**
     * Callback для ref
     */
    forwardedRef?: React.Ref<HTMLDivElement>;
    /**
     * Подсветка определенной опции
     */
    highlightedOption?: t.SingleOption;
    /**
     * Флаг, включающий подсветку совпадающего фрагмента (тег <em/>)
     */
    highlightMatch?: boolean;
    /**
     * Id корневого элемента
     */
    id?: string;
    /**
     * Флаг состояния загрузки результатов
     */
    loading?: boolean;
    /**
     * Флаг состояния "Нет результатов"
     */
    noResults?: boolean;
    /**
     * Содержимое айтема для состояния "Нет результатов"
     */
    noResultsContent?: React.ReactNode;
    /**
     * Флаг наличия тени
     */
    shadow?: boolean;
    /**
     * Включает необходимые атрибуты для cobrowsing
     */
    cobrowsingSecure?: boolean;
    /**
     * Временный проп для переопределения стилей, не предназначен для широкого использования.
     * Создан специально для задачи https://
     * TODO: удалить когда появится общий механизм темизации.
     */
    __overrideStyles?: {
        Dropdown?: {
            [key: string]: string;
        };
        [key: string]: any;
    };
    /**
     * Выравнивание всплывашки относительно контента
     * @default 'stretch'
     */
    align?: 'start' | 'center' | 'end' | 'stretch';
    /**
     * Скрывать компонент по клику снаружи
     */
    hideOnClickOutside?: boolean;
    /**
     * Флаг для умного выбора позиции выпадающего списка
     */
    smartDirection?: boolean;
}
interface DropdownState {
    styles: {
        [key: string]: string;
    };
    highlightedOption?: t.SingleOption;
    disabledScroll: boolean;
    prevOptions: t.Options;
    prevOpened?: boolean;
    prevHighlightedOption?: t.Option;
}
export declare class Dropdown extends PureComponent<DropdownProps, DropdownState> {
    constructor(props: DropdownProps);
    static defaultProps: {
        dataQaType: string;
        listHeight: number;
        onOptionSelect: () => void;
        onOptionHighlight: () => void;
        onOptionLeave: () => void;
        onClose: () => void;
        onKeyDown: () => void;
        closeOnSelect: boolean;
        shadow: boolean;
        cobrowsingSecure: boolean;
        smartDirection: boolean;
        align: string;
        noResultsContent: string;
    };
    static getDerivedStateFromProps(props: DropdownProps, state: DropdownState): Partial<DropdownState>;
    handleArrow(event: React.KeyboardEvent, direction: number): void;
    handleOptionMouseOver: t.OptionSelectHandler;
    handleKeyDown: t.KeyboardEvent;
    handleListMouseLeave: t.MouseEvent;
    handleOptionClick: t.OptionMouseHandler;
    getNextOption(option: t.Option | undefined, direction?: number): any;
    selectOption(event: React.KeyboardEvent | React.MouseEvent, option: t.SingleOption): void;
    renderCustomContent(): JSX.Element | null;
    render(): JSX.Element;
}
declare const _default: React.ComponentType<DropdownProps> & hoistStatics.NonReactStatics<React.ForwardRefExoticComponent<DropdownProps & React.RefAttributes<HTMLDivElement>>, {}>;
export default _default;
