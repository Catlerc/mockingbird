import React from 'react';
import cn from 'classnames';
import { Int24Tip as IconTip24, Int16Tip as IconTip16 } from '@platform-ui/iconsPack';
import LazyRender from '@platform-ui/lazyRender';
import overrideStyles from '@platform-ui/overrideStyles';
import baseStyles from './Dropdown.module.css';
export const SIZES = ['l', 'm', 's'];
export const CHECKMARK_STYLES = ['default', 'checkbox'];
const DropdownItem = /*#__PURE__*/React.memo(props => {
  const {
    size: sizeProp,
    checkmarkStyle,
    label,
    title,
    description,
    rightContent,
    leftContent,
    checkboxed,
    selected,
    highlighted,
    role,
    onMouseDown,
    onMouseOver,
    disabled,
    setRef,
    highlightMatch,
    dropdownItemIndex,
    dataQaType,
    lazy,
    __overrideStyles,
    __parentOverrideStyles
  } = props;

  const getRealContent = prop => typeof prop === 'function' ? prop(props) : prop;

  const styles = __parentOverrideStyles || overrideStyles(baseStyles, __overrideStyles == null ? void 0 : __overrideStyles.Dropdown);

  const size = sizeProp || (!!label || !!description ? 'l' : 'm');
  const realRightContent = getRealContent(rightContent);
  const realLeftContent = getRealContent(leftContent);
  const IconTag = size === 's' ? IconTip16 : IconTip24;
  const showSubContent = size === 'l';
  const [Root, rootProps] = lazy ? [LazyRender, {
    rootMargin: '100px 0px'
  }] : ['div', {}];
  return /*#__PURE__*/React.createElement(Root, Object.assign({}, rootProps, {
    "data-qa-type": dataQaType,
    ref: setRef,
    className: cn({
      [styles.item]: true,
      [styles[`item_size_${size}`]]: true,
      [styles.item_selected]: selected,
      [styles.item_disabled]: disabled,
      [styles.item_highlighted]: highlighted,
      [styles[`item_checkmarkStyle_${checkmarkStyle}`]]: checkboxed
    }),
    role: role,
    "aria-selected": checkboxed ? selected : undefined,
    "aria-disabled": disabled || undefined,
    "data-dropdown-item-index": dropdownItemIndex,
    onMouseDown: onMouseDown,
    onMouseOver: onMouseOver
  }), realLeftContent && /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.sideContent]: true,
      [styles.sideContent_left]: true
    }),
    "data-qa-type": `${dataQaType}.leftContent`
  }, realLeftContent), /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.content]: true,
      [styles.content_highlight]: highlightMatch
    })
  }, showSubContent && label && /*#__PURE__*/React.createElement("div", {
    className: styles.label,
    role: "heading",
    "aria-level": 4,
    "data-qa-type": `${dataQaType}.label`
  }, label), title && /*#__PURE__*/React.createElement("div", {
    className: styles.title,
    role: "heading",
    "aria-level": 3,
    "data-qa-type": `${dataQaType}.title`
  }, title), showSubContent && description && /*#__PURE__*/React.createElement("div", {
    className: styles.description,
    "aria-level": 5,
    "data-qa-type": `${dataQaType}.description`
  }, description)), realRightContent && /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.sideContent]: true,
      [styles.sideContent_right]: true
    }),
    "data-qa-type": `${dataQaType}.rightContent`
  }, realRightContent), checkboxed && /*#__PURE__*/React.createElement("div", {
    className: styles.checkmark
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.checkmarkIcon,
    "data-qa-type": `${dataQaType}.checkmarkIcon`
  }, /*#__PURE__*/React.createElement(IconTag, null))));
});
DropdownItem.defaultProps = {
  checkmarkStyle: 'default',
  dataQaType: 'uikit/dropdown.item',
  selectable: true,
  role: 'option'
};
export default DropdownItem;