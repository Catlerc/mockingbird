"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.filterOption = void 0;
exports.filterOptions = filterOptions;
exports.renderCustomContent = exports.normalise = exports.noop = exports.isSimpleValue = exports.isSameOption = exports.isOptionSelected = exports.highlight = exports.getSelectedOptions = exports.flattenOptions = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _memoizeWeak = _interopRequireDefault(require("@platform-ui/memoizeWeak"));

var _DropdownNoResults = _interopRequireDefault(require("./DropdownNoResults"));

var _DropdownLoader = _interopRequireDefault(require("./DropdownLoader"));

/**
 * Проверяет выбрана ли опция
 *
 * @param {Array<String>|String} value Текущее значение поля
 * @param option Проверяемая опция
 * @returns {boolean}
 */
var isOptionSelected = function isOptionSelected(value, option) {
  var optionValue = typeof option.value !== 'undefined' ? option.value : option;
  return Array.isArray(value) ? value.indexOf(optionValue) !== -1 : optionValue === value;
};
/**
 * Возвращает только выбранные элементы из массива опций
 *
 * @param {Array<Object>} options Массив опций
 * @param {Array<String>|String} value Текущее значение поля
 * @returns {Array<Object|String>|Object|String}
 */


exports.isOptionSelected = isOptionSelected;

var getSelectedOptions = function getSelectedOptions(options, value) {
  var single = !Array.isArray(value);
  var result = [];

  if (single ? typeof value !== 'undefined' : value.length) {
    for (var i = 0; options && i < options.length; i++) {
      if (isOptionSelected(value, options[i])) {
        result.push(options[i]);
      } else {
        var subOpt = options[i].options && getSelectedOptions(options[i].options, value);

        if (subOpt) {
          result.push.apply(result, Array.isArray(subOpt) ? subOpt : [subOpt]);
        }
      }

      if (result.length && single) {
        return result[0];
      }
    }
  }

  return result;
};
/**
 * Делает массив вложенных опций плоским
 */


exports.getSelectedOptions = getSelectedOptions;
var flattenOptions = (0, _memoizeWeak.default)(function (options) {
  return options.reduce(function (acc, option) {
    return option.options ? acc.concat(option.options) : acc.concat(option);
  }, []);
});
/**
 * Нормализует строку для более правильного сравнения
 */

exports.flattenOptions = flattenOptions;

var normalise = function normalise(value) {
  switch (typeof value) {
    case 'string':
      {
        return value.toLocaleLowerCase().replace('ё', 'е');
      }

    case 'number':
      {
        return value.toString();
      }

    default:
      {
        return '';
      }
  }
};
/**
 * Оборачивает указанный кусок строки тегом <em>
 */


exports.normalise = normalise;

var highlight = function highlight(value, startIndex, length) {
  var string = value.toString();
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, string.substr(0, startIndex), /*#__PURE__*/_react.default.createElement("em", null, string.substr(startIndex, length)), string.substr(startIndex + length));
};
/**
 * Проверяет является ли значение строкой или числом
 */


exports.highlight = highlight;

var isSimpleValue = function isSimpleValue(value) {
  return typeof value === 'string' || typeof value === 'number';
};

exports.isSimpleValue = isSimpleValue;

var isObject = function isObject(option) {
  return typeof option === 'object';
};
/**
 * Проверяет подходит ли строка под указанную query-строку
 */


var filterOption = function filterOption(option, normalisedQuery, query, isHighLighted) {
  var fields = isObject(option) ? [option.value, option.title] : [option]; // TODO: why?

  if (!isObject(option) && query === option) {
    return false;
  }

  var result = fields.some(function (field) {
    if (isSimpleValue(field)) {
      return normalise(field).indexOf(normalisedQuery) > -1;
    }

    return false;
  });

  if (!result) {
    return false;
  }

  var title = isObject(option) ? option.title : option;
  var matchTitleIndex = isSimpleValue(title) ? normalise(title).indexOf(normalisedQuery) : -1;
  return (0, _extends2.default)({}, isObject(option) ? option : {}, {
    title: isHighLighted && matchTitleIndex !== -1 ? highlight(title, matchTitleIndex, normalisedQuery.length) : title,
    value: isObject(option) ? option.value : option
  });
};
/**
 * Возвращает отфильтрованный список опций
 */


exports.filterOption = filterOption;

function withSubOptions(option) {
  return typeof option === 'object' && Boolean(option.options);
}

function filterOptions(options, query, filterFunc, highlightMatch) {
  if (!query) {
    return options;
  }

  var normalisedQuery = normalise(query).trim();
  var newOptions = [];

  if (normalisedQuery.length && Array.isArray(options)) {
    options.forEach(function (option) {
      if (withSubOptions(option)) {
        var newSubOptions = filterOptions(option.options, query, filterFunc);

        if (newSubOptions.length) {
          newOptions.push((0, _extends2.default)({}, option, {
            options: newSubOptions
          }));
        }
      } else {
        var newOption = filterFunc(option, normalisedQuery, query, highlightMatch);

        if (newOption) {
          newOptions.push(newOption === true ? option : newOption);
        }
      }
    });
  }

  return newOptions;
}
/**
 * Сравнивает 2 опции (по-хорошему к этому методу не нужно прибегать, если объекты данных нормально кешируются)
 */


var isSameOption = function isSameOption(opt1, opt2) {
  return Boolean(opt1 === opt2 || opt1 && opt2 && opt1.value === opt2.value && opt1.value !== undefined);
}; // eslint-disable-next-line @typescript-eslint/no-empty-function


exports.isSameOption = isSameOption;

var noop = function noop() {};

exports.noop = noop;

/**
 * Возвращает контент для отображения состояний DropdownList, пример:
 * `<DropdownList>{renderCustomContent({ loading, noResults, noResultsContent })}</DropdownList>`
 */
var renderCustomContent = function renderCustomContent(_ref) {
  var loading = _ref.loading,
      noResults = _ref.noResults,
      noResultsContent = _ref.noResultsContent,
      _ref$customStyles = _ref.customStyles,
      customStyles = _ref$customStyles === void 0 ? {} : _ref$customStyles;

  if (loading) {
    return /*#__PURE__*/_react.default.createElement(_DropdownLoader.default, {
      className: customStyles.loader
    });
  }

  if (noResults) {
    return /*#__PURE__*/_react.default.createElement(_DropdownNoResults.default, {
      className: customStyles.noResults
    }, noResultsContent);
  }

  return null;
};

exports.renderCustomContent = renderCustomContent;