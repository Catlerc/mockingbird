"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _generateId = _interopRequireDefault(require("@platform-ui/generateId"));

var _scroll = _interopRequireWildcard(require("@platform-ui/scroll"));

var _overrideStyles = _interopRequireDefault(require("@platform-ui/overrideStyles"));

var _utils = require("./utils");

var t = _interopRequireWildcard(require("./types"));

var _DropdownItem = _interopRequireDefault(require("./DropdownItem"));

var _DropdownModule = _interopRequireDefault(require("./Dropdown.module.css"));

function getOptionProps(option) {
  if (typeof option === 'string' || typeof option === 'number') {
    return {
      key: option,
      title: option,
      value: option
    };
  }

  var title = option.title,
      value = option.value,
      key = option.key;

  if (title && key) {
    return option;
  }

  return (0, _extends2.default)({}, option, {
    key: key || value,
    title: title || value
  });
}

var DropdownList = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2.default)(DropdownList, _PureComponent);

  function DropdownList(props) {
    var _props$__overrideStyl;

    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.compId = void 0;
    _this.blockHover = void 0;
    _this.focusedOption = void 0;
    _this.scrollContainer = void 0;
    _this.listRef = void 0;

    _this.refFocusedItem = function (node) {
      _this.focusedOption = node;
    };

    _this.refScrollContainer = function (node) {
      _this.scrollContainer = node;
    };

    _this.handleMouseDown = function (event) {
      var option = _this.findTargetOption(event.target);

      if (option) {
        _this.props.onOptionClick(event, {
          option: option
        });
      }

      event.preventDefault();
    };

    _this.handleMouseOver = function (event) {
      if (_this.blockHover) {
        return;
      }

      var option = _this.findTargetOption(event.target);

      if (option && option !== _this.props.highlightedOption) {
        _this.props.onOptionMouseOver(event, {
          option: option
        });
      }
    };

    _this.handleMouseMove = function () {
      _this.blockHover = false;
    };

    _this.handleAnimationEnd = function (e) {
      if (e.target !== e.currentTarget) {
        return;
      }

      !_this.props.opened && _this.setState({
        mounted: false
      });
    };

    _this.compId = (0, _generateId.default)((0, _assertThisInitialized2.default)(_this));
    _this.blockHover = false;
    _this.focusedOption = null;
    _this.scrollContainer = null;
    _this.listRef = /*#__PURE__*/(0, _react.createRef)();
    _this.state = {
      mounted: props.opened,
      listHeight: null,
      styles: (0, _overrideStyles.default)(_DropdownModule.default, props == null ? void 0 : (_props$__overrideStyl = props.__overrideStyles) == null ? void 0 : _props$__overrideStyl.Dropdown)
    };
    return _this;
  }

  DropdownList.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var _props$__overrideStyl2;

    var styles = (0, _overrideStyles.default)(_DropdownModule.default, props == null ? void 0 : (_props$__overrideStyl2 = props.__overrideStyles) == null ? void 0 : _props$__overrideStyl2.Dropdown);

    if (props.opened) {
      return {
        styles: styles,
        mounted: true
      };
    }

    return {
      styles: styles
    };
  };

  var _proto = DropdownList.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateHeight();
    this.scrollToOption(this.focusedOption, true);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var _this$props = this.props,
        options = _this$props.options,
        highlightedOption = _this$props.highlightedOption,
        isScrollDisabled = _this$props.isScrollDisabled,
        opened = _this$props.opened;
    var isJustOpened = !prevProps.opened && opened;

    if (prevProps.options !== options || prevState.mounted !== this.state.mounted) {
      this.updateHeight();
    }

    if (!isScrollDisabled && (!(0, _utils.isSameOption)(prevProps.highlightedOption, highlightedOption) || isJustOpened)) {
      this.blockHover = true;
      this.scrollToOption(this.focusedOption, isJustOpened);
    }
  };

  _proto.findTargetOption = function findTargetOption(el) {
    var list = this.listRef.current;

    if (!list) {
      return null;
    }

    while (el && el !== list) {
      var _el$dataset;

      var index = (_el$dataset = el.dataset) == null ? void 0 : _el$dataset.dropdownItemIndex;

      if (index) {
        var path = index.split('_').map(Number);
        var option = this.props.options[path.shift()];
        return path.reduce(function (opt, i) {
          return opt.options[i];
        }, option);
      } // eslint-disable-next-line no-param-reassign


      el = el.parentElement;
    }

    return null;
  };

  _proto.getHeight = function getHeight() {
    var maxHeight = this.props.maxHeight;
    var listHeight = this.state.listHeight;
    return listHeight && maxHeight && listHeight < maxHeight ? 'auto' : maxHeight;
  };

  _proto.scrollToOption = function scrollToOption(optionNode, centered) {
    if (centered === void 0) {
      centered = false;
    }

    if (!optionNode || !this.scrollContainer) {
      return;
    }

    var scrollRect = this.scrollContainer.getBoundingClientRect();
    var optionRect = optionNode.getBoundingClientRect();
    var isTopDirection = optionRect.top < scrollRect.top;
    var isBottomDirection = optionRect.bottom > scrollRect.bottom;

    if (isBottomDirection || isTopDirection) {
      var scrollPosition = optionNode.offsetTop;
      var heightDiff = scrollRect.height - optionRect.height;

      if (centered) {
        scrollPosition -= heightDiff / 2;
      } else if (isBottomDirection) {
        scrollPosition -= heightDiff;
      }

      this.scrollContainer.scrollTop = scrollPosition;
    }
  };

  _proto.updateHeight = function updateHeight() {
    var listHeight = this.listRef && this.listRef.current && this.listRef.current.clientHeight;

    if (listHeight) {
      this.setState({
        listHeight: listHeight
      });
    }
  };

  _proto.renderOptions = function renderOptions(options, meta) {
    var index = 0;
    var length = options.length;
    var renderedOptions = [];
    var newMeta = meta;

    while (index < length) {
      var _this$renderOption = this.renderOption(options[index], (0, _extends2.default)({}, newMeta, {
        flatIndex: meta.flatIndex + 1,
        index: "" + meta.index + index
      })),
          nextOption = _this$renderOption[0],
          nextMeta = _this$renderOption[1];

      renderedOptions[index] = nextOption;
      newMeta = nextMeta;
      index++;
    }

    return [renderedOptions, newMeta];
  };

  _proto.renderOption = function renderOption(option, meta) {
    var _this$props2 = this.props,
        highlightedOption = _this$props2.highlightedOption,
        highlightMatch = _this$props2.highlightMatch,
        dataQaType = _this$props2.dataQaType,
        size = _this$props2.size;
    var styles = this.state.styles;

    if (t.isGroupOption(option)) {
      var _cn;

      var titleId = this.compId + "-gr" + meta.index;

      var _this$renderOptions = this.renderOptions(option.options, (0, _extends2.default)({}, meta, {
        index: meta.index + "_"
      })),
          groupOptions = _this$renderOptions[0],
          newMeta = _this$renderOptions[1];

      var groupSize = option.size || size;
      return [/*#__PURE__*/_react.default.createElement("div", {
        className: styles.group,
        key: option.key || meta.index,
        role: "group",
        "aria-labelledby": titleId
      }, option.title && /*#__PURE__*/_react.default.createElement("div", {
        id: titleId,
        className: (0, _classnames.default)((_cn = {}, _cn[styles.groupTitle] = true, _cn[styles["groupTitle_size_" + groupSize]] = styles["groupTitle_size_" + groupSize], _cn))
      }, option.title), groupOptions), newMeta];
    }

    var highlighted = option === highlightedOption;
    var optionProps = getOptionProps(option);
    return [/*#__PURE__*/_react.default.createElement(_DropdownItem.default, Object.assign({
      key: "option-item-" + optionProps.key,
      dataQaType: dataQaType + ".item"
    }, optionProps, {
      lazy: meta.flatIndex > meta.lazyIndex,
      setRef: highlighted ? this.refFocusedItem : undefined,
      highlighted: highlighted,
      highlightMatch: highlightMatch,
      dropdownItemIndex: meta.index,
      __parentOverrideStyles: styles,
      size: typeof option === 'object' && option.size ? option.size : size
    })), (0, _extends2.default)({}, meta, {
      lazyIndex: highlighted ? meta.flatIndex + 10 : meta.lazyIndex
    })];
  };

  _proto.render = function render() {
    var _cn2;

    var _this$props3 = this.props,
        opened = _this$props3.opened,
        children = _this$props3.children,
        options = _this$props3.options,
        onMouseLeave = _this$props3.onMouseLeave,
        minWidth = _this$props3.minWidth,
        maxWidth = _this$props3.maxWidth,
        shadow = _this$props3.shadow,
        zIndex = _this$props3.zIndex,
        cobrowsingSecure = _this$props3.cobrowsingSecure,
        highlightedOption = _this$props3.highlightedOption,
        dataQaType = _this$props3.dataQaType;
    var _this$state = this.state,
        mounted = _this$state.mounted,
        styles = _this$state.styles;

    if (!mounted) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, cobrowsingSecure ? {
      'data-cobrowsing-stub': ''
    } : {}, {
      "data-qa-type": dataQaType + ".list",
      onMouseMove: this.handleMouseMove,
      onAnimationEnd: this.handleAnimationEnd,
      onMouseLeave: onMouseLeave,
      className: (0, _classnames.default)((_cn2 = {}, _cn2[styles.dropdownList] = true, _cn2[styles.dropdownList_open] = opened, _cn2[styles.dropdownList_close] = !opened, _cn2[styles.dropdownList_shadow] = shadow, _cn2)),
      style: {
        height: this.getHeight(),
        zIndex: zIndex,
        minWidth: minWidth,
        maxWidth: maxWidth
      }
    }), children || /*#__PURE__*/_react.default.createElement(_scroll.default, {
      scrollbarVisibility: _scroll.SCROLLBAR_VISIBILITY.ALWAYS,
      setContainer: this.refScrollContainer
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.listRef,
      onMouseDown: this.handleMouseDown,
      onMouseOver: this.handleMouseOver
    }, this.renderOptions(options, {
      index: '',
      flatIndex: 0,
      lazyIndex: highlightedOption ? Infinity : 10
    })[0])));
  };

  return DropdownList;
}(_react.PureComponent);

DropdownList.defaultProps = {
  maxHeight: 254,
  zIndex: 100,
  shadow: true,
  options: [],
  onOptionClick: _utils.noop,
  onOptionMouseOver: _utils.noop,
  onMouseLeave: _utils.noop,
  cobrowsingSecure: false,
  dataQaType: 'uikit/dropdown'
};
var _default = DropdownList;
exports.default = _default;