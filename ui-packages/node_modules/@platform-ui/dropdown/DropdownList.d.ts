import React, { PureComponent } from 'react';
import * as t from './types';
export interface DropdownListProps extends React.CSSProperties, t.SizeProp {
    /**
     * Список опций
     */
    options: t.Options;
    /**
     * Текущая подсвеченная опция
     */
    highlightedOption?: t.SingleOption;
    /**
     * Кастомное содержимое листа (отрисовывается вместо опций)
     */
    children?: React.ReactNode;
    /**
     * Открыт ли дропдаун
     */
    opened?: boolean;
    /**
     * Блокирует скролл к выделенному элементу (highlightedOption).
     */
    isScrollDisabled?: boolean;
    /**
     * Флаг, включающий подсветку совпадающего фрагмента (тег <em/>)
     */
    highlightMatch?: boolean;
    /**
     * Флаг наличия тени
     */
    shadow?: boolean;
    /**
     * Callback клика по опции
     */
    onOptionClick: t.OptionMouseHandler;
    /**
     * Callback наведения на опцию
     */
    onOptionMouseOver: t.OptionMouseHandler;
    /**
     * Callback onMouseLeave на списке опций
     */
    onMouseLeave: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    /**
     * Включает необходимые атрибуты для cobrowsing
     */
    cobrowsingSecure?: boolean;
    /**
     * Атрибут data-qa-type
     */
    dataQaType?: string;
    /**
     * Временный проп для переопределения стилей, не предназначен для широкого использования.
     * Создан специально для задачи https://
     * TODO: удалить когда появится общий механизм темизации.
     */
    __overrideStyles?: {
        Dropdown?: {
            [key: string]: string;
        };
        [key: string]: any;
    };
}
interface DropdownListState {
    mounted: boolean | undefined;
    listHeight: number | string | null;
    styles: {
        [key: string]: string;
    };
}
interface OptionsRenderingMeta {
    index: string;
    flatIndex: number;
    lazyIndex: number;
}
declare class DropdownList extends PureComponent<DropdownListProps, DropdownListState> {
    compId: string;
    blockHover: boolean;
    focusedOption: HTMLDivElement | null;
    scrollContainer: HTMLDivElement | null;
    listRef: React.RefObject<HTMLDivElement>;
    refFocusedItem: (node: HTMLDivElement | null) => void;
    refScrollContainer: (node: HTMLDivElement | null) => void;
    constructor(props: DropdownListProps);
    static defaultProps: {
        maxHeight: number;
        zIndex: number;
        shadow: boolean;
        options: never[];
        onOptionClick: () => void;
        onOptionMouseOver: () => void;
        onMouseLeave: () => void;
        cobrowsingSecure: boolean;
        dataQaType: string;
    };
    static getDerivedStateFromProps(props: DropdownListProps, state: DropdownListState): {
        styles: {
            [key: string]: string;
        };
        mounted: boolean;
    } | {
        styles: {
            [key: string]: string;
        };
        mounted?: undefined;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: DropdownListProps, prevState: DropdownListState): void;
    handleMouseDown: (event: React.MouseEvent) => void;
    handleMouseOver: (event: React.MouseEvent) => void;
    handleMouseMove: () => void;
    handleAnimationEnd: (e: React.AnimationEvent) => void;
    findTargetOption(el: HTMLElement): t.SingleOption | null;
    getHeight(): string | number | undefined;
    scrollToOption(optionNode: HTMLDivElement | null, centered?: boolean): void;
    updateHeight(): void;
    renderOptions(options: t.Option[], meta: OptionsRenderingMeta): [React.ReactNode, OptionsRenderingMeta];
    renderOption(option: t.Option, meta: OptionsRenderingMeta): [React.ReactNode, OptionsRenderingMeta];
    render(): JSX.Element | null;
}
export default DropdownList;
