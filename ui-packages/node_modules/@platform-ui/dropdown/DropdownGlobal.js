"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = exports.Dropdown = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _keycode = _interopRequireDefault(require("keycode"));

var _classnames = _interopRequireDefault(require("classnames"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _popover = _interopRequireDefault(require("@platform-ui/popover"));

var _overrideStyles = _interopRequireDefault(require("@platform-ui/overrideStyles"));

var _DropdownList = _interopRequireDefault(require("./DropdownList"));

var _utils = require("./utils");

var t = _interopRequireWildcard(require("./types"));

var _DropdownModule = _interopRequireDefault(require("./Dropdown.module.css"));

var UP_DIRECTION = -1;
var DOWN_DIRECTION = 1;

var findInOptions = function findInOptions(conditionFn, options) {
  if (!options || !options.length) {
    return;
  }

  for (var i = 0, len = options.length; i < len; i++) {
    var option = options[i];

    if (conditionFn(option)) {
      return option;
    }

    if (t.isGroupOption(option)) {
      var result = findInOptions(conditionFn, option.options);

      if (result) {
        return result;
      }
    }
  }
};

function getHighlightedOption(props) {
  return props.highlightedOption || findInOptions(function (option) {
    return typeof option === 'object' && option.selected;
  }, props.options);
}

var Dropdown = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2.default)(Dropdown, _PureComponent);

  function Dropdown(props) {
    var _props$__overrideStyl;

    var _this;

    _this = _PureComponent.call(this, props) || this;

    _this.handleOptionMouseOver = function (event, _ref) {
      var option = _ref.option;
      var _this$props = _this.props,
          opened = _this$props.opened,
          onOptionHighlight = _this$props.onOptionHighlight;

      if (opened) {
        // защита от срабатывания mouseOver после handleOptionClick → залипания disabledScroll в true
        _this.setState({
          highlightedOption: option,
          disabledScroll: true
        });

        onOptionHighlight && onOptionHighlight(event, {
          option: option
        });
      }
    };

    _this.handleKeyDown = function (event) {
      var highlightedOption = _this.state.highlightedOption;
      var _this$props2 = _this.props,
          onClose = _this$props2.onClose,
          onKeyDown = _this$props2.onKeyDown; // @ts-ignore

      switch ((0, _keycode.default)(event)) {
        case 'esc':
          {
            onClose && onClose();
            break;
          }

        case 'up':
          {
            event.preventDefault();

            _this.handleArrow(event, UP_DIRECTION);

            break;
          }

        case 'down':
          {
            event.preventDefault();

            _this.handleArrow(event, DOWN_DIRECTION);

            break;
          }

        case 'enter':
          {
            if (highlightedOption) {
              event.preventDefault();

              _this.selectOption(event, highlightedOption);
            }

            break;
          }
      }

      onKeyDown && onKeyDown(event);
    };

    _this.handleListMouseLeave = function (event) {
      var onOptionLeave = _this.props.onOptionLeave;

      _this.setState({
        highlightedOption: undefined
      });

      onOptionLeave && onOptionLeave(event);
    };

    _this.handleOptionClick = function (e, _ref2) {
      var option = _ref2.option;
      return _this.selectOption(e, option);
    };

    _this.state = {
      highlightedOption: getHighlightedOption(props),
      disabledScroll: false,
      prevOptions: props.options,
      prevOpened: props.opened,
      prevHighlightedOption: props.highlightedOption,
      styles: (0, _overrideStyles.default)(_DropdownModule.default, props == null ? void 0 : (_props$__overrideStyl = props.__overrideStyles) == null ? void 0 : _props$__overrideStyl.Dropdown)
    };
    return _this;
  }

  Dropdown.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var _props$__overrideStyl2;

    var newState = {
      styles: (0, _overrideStyles.default)(_DropdownModule.default, props == null ? void 0 : (_props$__overrideStyl2 = props.__overrideStyles) == null ? void 0 : _props$__overrideStyl2.Dropdown)
    };

    if (!(0, _utils.isSameOption)(state.prevHighlightedOption, props.highlightedOption) || props.opened && !state.prevOpened) {
      newState = (0, _extends2.default)({}, newState, {
        highlightedOption: getHighlightedOption(props),
        prevHighlightedOption: props.highlightedOption,
        prevOpened: props.opened
      });
    } else if (props.options !== state.prevOptions) {
      if (!findInOptions(function (option) {
        return option.selected && (0, _utils.isSameOption)(option, state.highlightedOption);
      }, props.options)) {
        newState = (0, _extends2.default)({}, newState, {
          highlightedOption: undefined,
          prevOptions: props.options
        });
      }
    }

    if (state.prevOpened && !props.opened) {
      newState = (0, _extends2.default)({}, newState, {
        highlightedOption: undefined,
        disabledScroll: false,
        prevOpened: props.opened
      });
    }

    return newState;
  };

  var _proto = Dropdown.prototype;

  _proto.handleArrow = function handleArrow(event, direction) {
    var _this$props3 = this.props,
        opened = _this$props3.opened,
        onOptionHighlight = _this$props3.onOptionHighlight;
    var option = this.getNextOption(this.state.highlightedOption, direction);

    if (opened) {
      this.setState({
        highlightedOption: option,
        disabledScroll: false
      });
      onOptionHighlight && onOptionHighlight(event, {
        option: option
      });
    }
  };

  _proto.getNextOption = function getNextOption(option, direction) {
    if (direction === void 0) {
      direction = DOWN_DIRECTION;
    }

    var options = (0, _utils.flattenOptions)(this.props.options).filter(function (opt) {
      return !opt.disabled;
    });
    var isDownDirection = direction === DOWN_DIRECTION;
    var lastIndex = options.length - 1;
    var optionIndex = options.indexOf(option);

    if (optionIndex === 0 && !isDownDirection) {
      return options[lastIndex];
    }

    if (optionIndex === -1 || optionIndex === lastIndex && isDownDirection) {
      return options[0];
    }

    return options[optionIndex + direction];
  };

  _proto.selectOption = function selectOption(event, option) {
    var _this$props4 = this.props,
        closeOnSelect = _this$props4.closeOnSelect,
        onOptionSelect = _this$props4.onOptionSelect,
        onClose = _this$props4.onClose;

    if (typeof option === 'object') {
      option.onOptionSelect && option.onOptionSelect(event, {
        value: option.value,
        option: option
      });
      option.selectable !== false && onOptionSelect && onOptionSelect(event, {
        value: option.value,
        option: option
      });

      if (closeOnSelect && option.closeOnSelect !== false) {
        onClose && onClose();
      }

      return;
    }

    onOptionSelect && onOptionSelect(null, {
      value: option,
      option: option
    });

    if (closeOnSelect) {
      onClose && onClose();
    }
  };

  _proto.renderCustomContent = function renderCustomContent() {
    var _this$props5 = this.props,
        loading = _this$props5.loading,
        noResults = _this$props5.noResults,
        noResultsContent = _this$props5.noResultsContent;
    var styles = this.state.styles; // Стили могли быть перезаписаны через "__overrideStyles" prop, поэтому здесь они берутся из стейта

    var customStyles = {
      loader: (0, _classnames.default)(styles.customContent, styles.customContent_loader),
      noResults: (0, _classnames.default)(styles.customContent, styles.customContent_noResults)
    };
    return (0, _utils.renderCustomContent)({
      loading: loading,
      noResults: noResults,
      noResultsContent: noResultsContent,
      customStyles: customStyles
    });
  };

  _proto.render = function render() {
    var _this$props6 = this.props,
        children = _this$props6.children,
        listHeight = _this$props6.listHeight,
        options = _this$props6.options,
        opened = _this$props6.opened,
        forwardedRef = _this$props6.forwardedRef,
        highlightMatch = _this$props6.highlightMatch,
        id = _this$props6.id,
        loading = _this$props6.loading,
        noResults = _this$props6.noResults,
        listMinWidth = _this$props6.listMinWidth,
        listMaxWidth = _this$props6.listMaxWidth,
        listZIndex = _this$props6.listZIndex,
        shadow = _this$props6.shadow,
        cobrowsingSecure = _this$props6.cobrowsingSecure,
        dataQaType = _this$props6.dataQaType,
        smartDirection = _this$props6.smartDirection,
        align = _this$props6.align,
        onClose = _this$props6.onClose,
        hideOnClickOutside = _this$props6.hideOnClickOutside,
        size = _this$props6.size;
    var _this$state = this.state,
        highlightedOption = _this$state.highlightedOption,
        disabledScroll = _this$state.disabledScroll,
        styles = _this$state.styles;
    var customContent = this.renderCustomContent();
    return /*#__PURE__*/_react.default.createElement(_popover.default, Object.assign({
      align: align,
      popoverBlock: !!(customContent || options && options.length) && /*#__PURE__*/_react.default.createElement(_DropdownList.default, {
        isScrollDisabled: disabledScroll,
        maxHeight: loading || noResults ? 'auto' : listHeight,
        options: options,
        highlightedOption: highlightedOption,
        highlightMatch: highlightMatch,
        opened: true,
        onMouseLeave: this.handleListMouseLeave,
        onOptionClick: this.handleOptionClick,
        onOptionMouseOver: this.handleOptionMouseOver,
        minWidth: listMinWidth,
        maxWidth: listMaxWidth,
        shadow: shadow,
        cobrowsingSecure: cobrowsingSecure,
        dataQaType: dataQaType,
        __overrideStyles: this.props.__overrideStyles,
        size: size
      }, customContent),
      smartDirection: smartDirection,
      wide: true,
      increasedTouchZone: false,
      isActive: opened,
      isInactive: !opened,
      zIndex: listZIndex
    }, hideOnClickOutside ? {
      onClose: onClose,
      disableToggleOnInsideEvents: true
    } : {}), /*#__PURE__*/_react.default.createElement("div", Object.assign({
      className: styles.root,
      onKeyDownCapture: this.handleKeyDown,
      ref: forwardedRef,
      id: id,
      role: "listbox",
      "aria-expanded": opened
    }, (0, _dataQa.default)(this.props)), children));
  };

  return Dropdown;
}(_react.PureComponent);

exports.Dropdown = Dropdown;
Dropdown.defaultProps = {
  dataQaType: 'uikit/dropdown',
  listHeight: _DropdownList.default.defaultProps.maxHeight,
  onOptionSelect: _utils.noop,
  onOptionHighlight: _utils.noop,
  onOptionLeave: _utils.noop,
  onClose: _utils.noop,
  onKeyDown: _utils.noop,
  closeOnSelect: true,
  shadow: true,
  cobrowsingSecure: false,
  smartDirection: false,
  align: 'stretch',
  noResultsContent: 'No results'
};

var _default = (0, _hoistNonReactStatics.default)(Dropdown, /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  return /*#__PURE__*/_react.default.createElement(Dropdown, Object.assign({
    forwardedRef: ref
  }, props));
}));

exports.default = _default;