"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.props = exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _noop = _interopRequireDefault(require("@tinkoff/utils/function/noop"));

var _clickable = _interopRequireDefault(require("@platform-ui/clickable"));

var _useButtonStyles = _interopRequireDefault(require("./useButtonStyles"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _excluded = ["ariaBusy", "ariaLabel", "children", "dataQaData", "dataQaType", "disabled", "flatCorners", "href", "icon", "inGroup", "isButtonLink", "progressiveFill", "round", "size", "tabIndex", "tagName", "target", "theme", "type", "unselectable", "uppercase", "vertical", "wide", "wideDesktopL", "wideDesktopM", "wideDesktopS", "wideTabletL", "wideTabletS", "onClick", "onMouseLeave", "onMouseOver", "innerRef", "disableHorizontalPadding", "disableVerticalPadding"];
// Используется в stories компонентов Button и Group
var props = {
  sizes: ['xl', 'l', 'm', 's', 'xs'],
  themes: ['primary', 'secondary', 'outline', 'outlineDark', 'outlineLight', 'flat', 'flatDark', 'flatLight', 'mono']
};
exports.props = props;
var Button = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var ariaBusy = props.ariaBusy,
      ariaLabel = props.ariaLabel,
      children = props.children,
      dataQaData = props.dataQaData,
      dataQaType = props.dataQaType,
      disabled = props.disabled,
      flatCorners = props.flatCorners,
      href = props.href,
      icon = props.icon,
      inGroup = props.inGroup,
      isButtonLink = props.isButtonLink,
      progressiveFill = props.progressiveFill,
      round = props.round,
      size = props.size,
      tabIndex = props.tabIndex,
      tagName = props.tagName,
      target = props.target,
      theme = props.theme,
      type = props.type,
      unselectable = props.unselectable,
      uppercase = props.uppercase,
      vertical = props.vertical,
      wide = props.wide,
      wideDesktopL = props.wideDesktopL,
      wideDesktopM = props.wideDesktopM,
      wideDesktopS = props.wideDesktopS,
      wideTabletL = props.wideTabletL,
      wideTabletS = props.wideTabletS,
      onClick = props.onClick,
      onMouseLeave = props.onMouseLeave,
      onMouseOver = props.onMouseOver,
      innerRef = props.innerRef,
      disableHorizontalPadding = props.disableHorizontalPadding,
      disableVerticalPadding = props.disableVerticalPadding,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  var buttonStyles = (0, _useButtonStyles.default)(props);
  return /*#__PURE__*/_react.default.createElement(_clickable.default, Object.assign({}, otherProps, {
    "data-size": size,
    ref: ref,
    "aria-busy": ariaBusy,
    dataQaData: dataQaData,
    dataQaType: dataQaType,
    tagName: tagName,
    target: target,
    type: href ? undefined : type,
    href: href,
    "aria-label": (!children || typeof children !== 'string') && ariaLabel || undefined,
    disabled: disabled,
    onClick: onClick,
    onMouseOver: onMouseOver,
    onMouseLeave: onMouseLeave,
    tabIndex: tabIndex,
    className: buttonStyles.button.className,
    style: buttonStyles.button.style,
    innerClassName: buttonStyles.buttonWrapper.className,
    innerRef: innerRef
  }), progressiveFill ? /*#__PURE__*/_react.default.createElement("span", {
    className: buttonStyles.progressiveFillContainer.className
  }, /*#__PURE__*/_react.default.createElement("span", {
    "data-qa-type": dataQaType + ".progressiveFill",
    className: buttonStyles.progressiveFill.className,
    style: buttonStyles.progressiveFill.style
  })) : null, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: buttonStyles.icon.className,
    "data-qa-type": dataQaType + ".icon"
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: icon
  })), children && /*#__PURE__*/_react.default.createElement("span", {
    className: buttonStyles.content.className,
    "data-qa-type": dataQaType + ".content"
  }, children));
});
Button.defaultProps = {
  dataQaType: 'uikit/button',
  size: 'xl',
  theme: 'primary',
  type: 'button',
  onClick: _noop.default,
  onMouseOver: _noop.default,
  onMouseLeave: _noop.default
}; // TODO: разобраться как подружить сборку TS и displayName

Button.displayName = 'Button';
var _default = Button;
exports.default = _default;