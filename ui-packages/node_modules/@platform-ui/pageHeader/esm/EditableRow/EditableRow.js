import React, { useState } from 'react';
import cn from 'classnames';
import InlineEdit from '@platform-ui/inlineEdit';
import Row from '../Row';
import Controls from './Controls';
import styles from './EditableRow.module.css';

const EditableRow = props => {
  const {
    onChange,
    onSave,
    onCancel,
    right,
    mobile,
    saveButtonLabel,
    cancelButtonLabel
  } = props;
  const [value, setValue] = useState(props.value);
  const [newValue, setNewValue] = useState(props.value);
  const [editable, setEditable] = useState(false);

  const handleChange = (event, params) => {
    setNewValue(params == null ? void 0 : params.value);
    onChange && onChange(event, params);
  };

  const handleSave = event => {
    setValue(newValue);
    onSave && onSave(event);
  };

  const handleCancel = event => {
    setValue('');
    window.requestAnimationFrame(() => {
      setValue(props.value);
    });
    setNewValue(props.value);
    onCancel && onCancel(event);
  };

  const handleFocus = () => {
    setEditable(true);
  };

  const handleBlur = () => {
    setEditable(false);
  };

  return /*#__PURE__*/React.createElement(Row, {
    left: /*#__PURE__*/React.createElement("div", {
      className: cn(styles.editContainer, {
        [styles.editContainer_mobile]: mobile
      })
    }, /*#__PURE__*/React.createElement(InlineEdit, {
      value: value,
      onChange: handleChange,
      onFocus: handleFocus,
      onBlur: handleBlur,
      hasIcon: !editable && value === newValue,
      iconSize: "l"
    })),
    right: !editable && value === newValue ? right : /*#__PURE__*/React.createElement(Controls, {
      mobile: mobile,
      onSave: handleSave,
      onCancel: handleCancel,
      saveButtonLabel: saveButtonLabel,
      cancelButtonLabel: cancelButtonLabel
    }),
    mobile: mobile
  });
};

export default EditableRow;