import React from 'react';
import type { Optional, EventHandler, GetRef, GetValue, GetChangeEvent, GetChangeParams, GetFocusEvent, GetFocusParams, GetBlurEvent, GetBlurParams } from '@platform-ui/types';
interface ChangeParams<TValue> {
    value: TValue;
}
export interface ValueInputPropsConstraint<TValue extends any = any, TChangeEvent = any, TChangeParams extends ChangeParams<TValue> = ChangeParams<TValue>, TFocusEvent = any, TFocusParams extends {} = {}, TBlurEvent = TFocusEvent, TBlurParams extends {} = {}> {
    value: TValue;
    focused: boolean;
    onChange: EventHandler<TChangeEvent, TChangeParams>;
    onFocus: EventHandler<TFocusEvent, TFocusParams>;
    onBlur: EventHandler<TBlurEvent, TBlurParams>;
}
export declare type WithInputOptionalProps<TProps extends ValueInputPropsConstraint<TValue, TChangeEvent, TChangeParams, TFocusEvent, TFocusParams, TBlurEvent, TBlurParams>, TValue, TChangeEvent = GetChangeEvent<TProps>, TChangeParams extends ChangeParams<TValue> = GetChangeParams<TProps>, TFocusEvent = GetFocusEvent<TProps>, TFocusParams extends {} = GetFocusParams<TProps>, TBlurEvent = GetBlurEvent<TProps>, TBlurParams extends {} = GetBlurParams<TProps>> = Optional<TProps, 'value' | 'onChange' | 'focused' | 'onFocus' | 'onBlur'> & {
    defaultValue?: TValue;
};
export declare const withValueInputState: <TProps extends ValueInputPropsConstraint<TValue, TChangeEvent, TChangeParams, TFocusEvent, TFocusParams, TBlurEvent, TBlurParams>, TValue = GetValue<TProps>, TChangeEvent = GetChangeEvent<TProps>, TChangeParams extends ChangeParams<TValue> = GetChangeParams<TProps>, TFocusEvent = GetFocusEvent<TProps>, TFocusParams extends {} = GetFocusParams<TProps>, TBlurEvent = GetBlurEvent<TProps>, TBlurParams extends {} = GetBlurParams<TProps>, TRef = GetRef<TProps>>(Component: React.ComponentType<TProps>, { emptyValue }: {
    emptyValue: TValue;
}) => React.ForwardRefExoticComponent<React.PropsWithoutRef<Omit<TProps, "value" | "onFocus" | "onBlur" | "onChange" | "focused"> & Partial<Pick<TProps, "value" | "onFocus" | "onBlur" | "onChange" | "focused">> & {
    defaultValue?: TValue | undefined;
}> & React.RefAttributes<TRef>>;
export {};
