import React from 'react';
import type { Optional, EventHandler, GetRef, GetChangeEvent, GetChangeParams, GetFocusEvent, GetFocusParams, GetBlurEvent, GetBlurParams } from '@platform-ui/types';
export interface ChangeParams {
    checked: boolean;
}
export interface CheckableInputPropsConstraint<TChangeEvent = any, TChangeParams extends ChangeParams = ChangeParams, TFocusEvent = any, TFocusParams extends {} = TChangeParams, TBlurEvent = TFocusEvent, TBlurParams extends {} = TFocusParams> {
    checked: boolean;
    focused: boolean;
    onChange: EventHandler<TChangeEvent, TChangeParams>;
    onFocus: EventHandler<TFocusEvent, TFocusParams>;
    onBlur: EventHandler<TBlurEvent, TBlurParams>;
}
export declare type WithCheckableInputOptionalProps<TProps extends CheckableInputPropsConstraint<TChangeEvent, TChangeParams, TFocusEvent, TFocusParams, TBlurEvent, TBlurParams>, TChangeEvent = GetChangeEvent<TProps>, TChangeParams extends ChangeParams = GetChangeParams<TProps>, TFocusEvent = GetFocusEvent<TProps>, TFocusParams extends {} = GetFocusParams<TProps>, TBlurEvent = GetBlurEvent<TProps>, TBlurParams extends {} = GetBlurParams<TProps>> = Optional<TProps, keyof CheckableInputPropsConstraint> & {
    defaultChecked?: boolean;
};
export declare const withCheckableInputState: <TProps extends CheckableInputPropsConstraint<TChangeEvent, TChangeParams, TFocusEvent, TFocusParams, TBlurEvent, TBlurParams>, TChangeEvent = GetChangeEvent<TProps>, TChangeParams extends ChangeParams = GetChangeParams<TProps>, TFocusEvent = GetFocusEvent<TProps>, TFocusParams extends {} = GetFocusParams<TProps>, TBlurEvent = GetBlurEvent<TProps>, TBlurParams extends {} = GetBlurParams<TProps>, TRef = GetRef<TProps>>(Component: React.ComponentType<TProps>) => React.ForwardRefExoticComponent<React.PropsWithoutRef<Omit<TProps, keyof CheckableInputPropsConstraint<any, ChangeParams, any, ChangeParams, any, ChangeParams>> & Partial<Pick<TProps, keyof CheckableInputPropsConstraint<any, ChangeParams, any, ChangeParams, any, ChangeParams>>> & {
    defaultChecked?: boolean | undefined;
}> & React.RefAttributes<TRef>>;
