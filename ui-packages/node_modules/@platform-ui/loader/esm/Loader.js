import React, { useState, useEffect } from 'react';
import classNames from 'classnames'; // @ts-ignore

import colors from '@platform-ui/colors';
import dataQa from '@platform-ui/dataQa';
import styles from './Loader.module.css';
export const THEMES = {
  yellow: colors['yellow-100'],
  black: colors['black-300'],
  current: 'currentColor'
};
const animationMap = {
  true: {
    animateStart: true,
    animateEnd: true
  },
  false: {
    animateStart: false,
    animateEnd: false
  },
  start: {
    animateStart: true,
    animateEnd: false
  },
  end: {
    animateStart: false,
    animateEnd: true
  }
};

const isDefined = val => val !== undefined && val !== null;

const Loader = props => {
  const {
    alignTop,
    centered,
    color = 'yellow',
    dataQaType = 'uikit/loader',
    fadeAnimation = 'true',
    hidden,
    overlay,
    semiTransparentBg = true,
    size = 'xl'
  } = props;
  const {
    animateEnd,
    animateStart
  } = animationMap[fadeAnimation];
  const withAnimation = !hidden && animateStart || hidden && animateEnd;
  const [hiddenState, setHiddenState] = useState(overlay ? !withAnimation && hidden : hidden);

  const handleAnimationEnd = () => {
    setHiddenState(hidden);
  };

  const renderLoader = () => {
    return /*#__PURE__*/React.createElement("div", Object.assign({}, dataQa({
      dataQaType: `${dataQaType}.svgWrapper`
    }), {
      className: classNames({
        [styles.svgWrapper]: true,
        [styles[`svgWrapper_size_${size}`]]: size,
        [styles.svgWrapper_centered]: centered
      }),
      style: {
        color: THEMES[color] || color
      }
    }), /*#__PURE__*/React.createElement("svg", Object.assign({}, dataQa({
      dataQaType: `${dataQaType}.svg`
    }), {
      viewBox: "0 0 100 100",
      className: styles.svg
    }), /*#__PURE__*/React.createElement("circle", {
      fill: "none",
      className: styles.circle,
      stroke: "currentColor",
      cx: "50",
      cy: "50",
      r: "44"
    })));
  };

  useEffect(() => {
    setHiddenState(overlay ? !withAnimation && hidden : hidden);
  }, [hidden, overlay, withAnimation]);

  if (hiddenState) {
    return null;
  }

  return overlay ? /*#__PURE__*/React.createElement("div", Object.assign({}, dataQa({
    dataQaType
  }), {
    className: classNames({
      [styles.layout]: true,
      [styles.layout_alignTop]: isDefined(alignTop),
      [styles.layout_notTransparent]: !semiTransparentBg,
      [styles.layout_close]: animateEnd && hidden,
      [styles.layout_open]: animateStart && !hidden
    }),
    onTransitionEnd: animateEnd || animateStart ? handleAnimationEnd : undefined
  }), !!alignTop && /*#__PURE__*/React.createElement("div", {
    className: styles.alignSpace,
    style: {
      maxHeight: alignTop
    }
  }), renderLoader()) : renderLoader();
}; // TODO: убрать в мажорном обновлении


Loader.defaultProps = {
  dataQaType: 'uikit/loader',
  size: 'xl',
  color: 'yellow',
  centered: false,
  alignTop: null,
  hidden: false,
  semiTransparentBg: true,
  fadeAnimation: 'true'
};
export default Loader;