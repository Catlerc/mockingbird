import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["disabled"];
import React from 'react';
import hoistStatics from 'hoist-non-react-statics';

const focusState = WrappedComponent => {
  class FocusStateWrapper extends React.Component {
    constructor(props) {
      super(props);

      this.handleBlur = (...args) => {
        const {
          onBlur
        } = this.props;
        this.setState({
          focused: false
        });
        onBlur && onBlur(...args);
      };

      this.handleFocus = (...args) => {
        const {
          onFocus
        } = this.props;
        this.setState({
          focused: true
        });
        onFocus && onFocus(...args);
      };

      this.state = {
        focused: props.focused,
        prevFocused: props.focused
      };
    }

    static getDerivedStateFromProps(props, state) {
      if (props.focused !== state.prevFocused) {
        return {
          focused: props.focused,
          prevFocused: props.focused
        };
      }

      return null;
    }

    render() {
      const _this$props = this.props,
            {
        disabled
      } = _this$props,
            otherProps = _objectWithoutPropertiesLoose(_this$props, _excluded);

      const {
        focused
      } = this.state;
      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, otherProps, {
        disabled: disabled,
        focused: focused && !disabled,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }));
    }

  }

  FocusStateWrapper.displayName = 'Input';
  FocusStateWrapper.defaultProps = WrappedComponent.defaultProps;
  process.env.NODE_ENV !== "production" ? FocusStateWrapper.propTypes = _extends({}, WrappedComponent.propTypes) : void 0;
  return hoistStatics( // @ts-ignore
  FocusStateWrapper, WrappedComponent);
};

export default focusState;