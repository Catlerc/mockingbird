"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireDefault(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _excluded = ["disabled"];

var focusState = function focusState(WrappedComponent) {
  var FocusStateWrapper = /*#__PURE__*/function (_React$Component) {
    (0, _inheritsLoose2.default)(FocusStateWrapper, _React$Component);

    function FocusStateWrapper(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;

      _this.handleBlur = function () {
        var onBlur = _this.props.onBlur;

        _this.setState({
          focused: false
        });

        onBlur && onBlur.apply(void 0, arguments);
      };

      _this.handleFocus = function () {
        var onFocus = _this.props.onFocus;

        _this.setState({
          focused: true
        });

        onFocus && onFocus.apply(void 0, arguments);
      };

      _this.state = {
        focused: props.focused,
        prevFocused: props.focused
      };
      return _this;
    }

    FocusStateWrapper.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.focused !== state.prevFocused) {
        return {
          focused: props.focused,
          prevFocused: props.focused
        };
      }

      return null;
    };

    var _proto = FocusStateWrapper.prototype;

    _proto.render = function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          otherProps = (0, _objectWithoutPropertiesLoose2.default)(_this$props, _excluded);
      var focused = this.state.focused;
      return /*#__PURE__*/_react.default.createElement(WrappedComponent, Object.assign({}, otherProps, {
        disabled: disabled,
        focused: focused && !disabled,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }));
    };

    return FocusStateWrapper;
  }(_react.default.Component);

  FocusStateWrapper.displayName = 'Input';
  FocusStateWrapper.defaultProps = WrappedComponent.defaultProps;
  process.env.NODE_ENV !== "production" ? FocusStateWrapper.propTypes = (0, _extends2.default)({}, WrappedComponent.propTypes) : void 0;
  return (0, _hoistNonReactStatics.default)( // @ts-ignore
  FocusStateWrapper, WrappedComponent);
};

var _default = focusState;
exports.default = _default;