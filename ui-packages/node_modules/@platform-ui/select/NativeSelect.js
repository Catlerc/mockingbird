"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _empty = _interopRequireDefault(require("@tinkoff/utils/is/empty"));

var _Select2 = _interopRequireDefault(require("./Select"));

var _SelectModule = _interopRequireDefault(require("./Select.module.css"));

var NativeSelect = /*#__PURE__*/function (_Select) {
  (0, _inheritsLoose2.default)(NativeSelect, _Select);

  function NativeSelect(props) {
    var _this;

    _this = _Select.call(this, props) || this;

    _this.open = function () {};

    _this.close = function () {};

    _this.handleSelectChange = function (event) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          name = _this$props.name,
          options = _this$props.options;
      var value = event.target.value;
      var selectedOption = options.find(function (option) {
        return String(option.value) === value;
      });

      if (!selectedOption || selectedOption.value === undefined) {
        return;
      }

      onChange(event, {
        value: selectedOption.value,
        name: name
      });
    };

    _this.handleBlur = function (event) {
      var _this$props2 = _this.props,
          value = _this$props2.value,
          onBlur = _this$props2.onBlur,
          onFieldDone = _this$props2.onFieldDone;
      value && onFieldDone(event, {
        value: value
      });
      onBlur(event, {
        value: value
      });
    };

    _this.selectRef = /*#__PURE__*/(0, _react.createRef)();
    return _this;
  }

  var _proto = NativeSelect.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.props.focused ? this.selectRef.current.focus() : this.selectRef.current.blur();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.focused !== prevProps.focused) {
      this.props.focused ? this.selectRef.current.focus() : this.selectRef.current.blur();
    }
  };

  _proto.renderSelect = function renderSelect() {
    var _cn;

    var _this$props3 = this.props,
        disabled = _this$props3.disabled,
        readOnly = _this$props3.readOnly,
        value = _this$props3.value,
        options = _this$props3.options,
        onFocus = _this$props3.onFocus,
        dataQaType = _this$props3.dataQaType;
    var emptyValue = (0, _empty.default)(value);
    return /*#__PURE__*/_react.default.createElement("select", Object.assign({}, (0, _dataQa.default)({
      dataQaType: (0, _classnames.default)((_cn = {}, _cn[dataQaType + ".nativeSelect"] = true, _cn[dataQaType + ".nativeSelect_focused"] = this.props.focused, _cn[dataQaType + ".nativeSelect_opened"] = this.props.opened, _cn))
    }), {
      ref: this.selectRef,
      onChange: this.handleSelectChange,
      className: _SelectModule.default.nativeSelect,
      disabled: disabled || readOnly // https://ru.reactjs.org/docs/forms.html#the-select-tag
      ,
      value: emptyValue ? '' : value,
      onBlur: this.handleBlur,
      onFocus: onFocus
    }), emptyValue && /*#__PURE__*/_react.default.createElement("option", {
      label: " "
    }), Array.isArray(options) && options.map(function (option) {
      return /*#__PURE__*/_react.default.createElement("option", {
        key: option.value,
        value: option.value,
        disabled: option.disabled
      }, option.title);
    }));
  };

  _proto.render = function render() {
    var _cn2, _cn3, _cn4;

    var _this$props4 = this.props,
        disabled = _this$props4.disabled,
        error = _this$props4.error,
        expandable = _this$props4.expandable,
        readOnly = _this$props4.readOnly,
        dataQaData = _this$props4.dataQaData,
        dataQaType = _this$props4.dataQaType,
        ariaErrorMessage = _this$props4.ariaErrorMessage,
        ariaDescribedBy = _this$props4.ariaDescribedBy,
        focused = _this$props4.focused,
        size = _this$props4.size;
    var dropdownId = this.dropdownId,
        labelId = this.labelId;
    var opened = this.state.opened;
    return /*#__PURE__*/_react.default.createElement("div", Object.assign({
      className: (0, _classnames.default)(_SelectModule.default.root, (_cn2 = {}, _cn2[_SelectModule.default.root_focused] = focused, _cn2[_SelectModule.default.root_opened] = opened && !disabled && !readOnly, _cn2[_SelectModule.default.root_disabled] = disabled, _cn2[_SelectModule.default.root_expandable] = expandable, _cn2[_SelectModule.default["root_size_" + size]] = size, _cn2)),
      ref: this.rootRef
    }, (0, _dataQa.default)({
      dataQaType: dataQaType,
      dataQaData: typeof dataQaData === 'object' ? JSON.stringify(dataQaData) : dataQaData
    }), {
      role: "combobox",
      "aria-disabled": disabled,
      "aria-invalid": error,
      "aria-readonly": readOnly,
      "aria-expanded": opened,
      "aria-controls": dropdownId,
      "aria-labelledby": labelId,
      "aria-errormessage": ariaErrorMessage,
      "aria-describedby": ariaDescribedBy
    }), /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)({
      dataQaType: (0, _classnames.default)((_cn3 = {}, _cn3[dataQaType + ".selectWrapper"] = true, _cn3[dataQaType + ".selectWrapper_expandable"] = expandable, _cn3))
    }), {
      className: (0, _classnames.default)((_cn4 = {}, _cn4[_SelectModule.default.selectWrapper] = true, _cn4[_SelectModule.default.selectWrapper_expandable] = expandable, _cn4))
    }), this.renderControl(), this.renderSelect()));
  };

  return NativeSelect;
}(_Select2.default);

NativeSelect.propTypes = (0, _extends2.default)({}, _Select2.default.propTypes);
NativeSelect.defaultProps = (0, _extends2.default)({}, _Select2.default.defaultProps, {
  dataQaType: 'uikit/nativeSelect'
});
var _default = NativeSelect;
exports.default = _default;