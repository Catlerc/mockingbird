"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _map = _interopRequireDefault(require("@tinkoff/utils/array/map"));

var _Select2 = _interopRequireDefault(require("../Select"));

var _utils = require("../utils");

var _SelectModule = _interopRequireDefault(require("../Select.module.css"));

var EMPTY_ARRAY = [];

var Multiselect = /*#__PURE__*/function (_Select) {
  (0, _inheritsLoose2.default)(Multiselect, _Select);

  function Multiselect() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Select.call.apply(_Select, [this].concat(args)) || this;

    _this.shouldApplyFilter = function () {
      return true;
    };

    _this.handleOptionSelect = function (event, _ref) {
      var optionValue = _ref.value;
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onFieldDone = _this$props.onFieldDone,
          closeOnSelect = _this$props.closeOnSelect,
          name = _this$props.name;

      _this.setState({
        filterValue: ''
      });

      if (optionValue === undefined) {
        return;
      }

      var value = (0, _utils.updateMultiselectValue)(_this.props.value, optionValue);
      onChange(event, {
        value: value,
        name: name
      });

      if (closeOnSelect) {
        onFieldDone(event, {
          value: value,
          name: name
        });
      }
    };

    _this.handleFilterChange = function (e) {
      var filterValue = e.target.value;
      var _this$props2 = _this.props,
          name = _this$props2.name,
          onFilterChange = _this$props2.onFilterChange;

      _this.setState({
        filterValue: filterValue
      });

      onFilterChange(e, {
        name: name,
        filterValue: filterValue
      });

      _this.open();
    };

    return _this;
  }

  var _proto = Multiselect.prototype;

  _proto.resetFilterValue = function resetFilterValue() {
    this.setState({
      filterValue: ''
    });
  };

  _proto.renderInput = function renderInput(childrenProps) {
    var _cn, _cn2;

    var _this$props3 = this.props,
        dataQaType = _this$props3.dataQaType,
        autoComplete = _this$props3.autoComplete,
        disabled = _this$props3.disabled,
        readOnly = _this$props3.readOnly,
        expandable = _this$props3.expandable,
        focused = _this$props3.focused,
        name = _this$props3.name,
        renderFilter = _this$props3.renderFilter;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)((_cn = {}, _cn[_SelectModule.default.valueWrapper] = true, _cn[_SelectModule.default.valueWrapper_expandable] = expandable, _cn))
    }, this.props.renderValue(childrenProps), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)((_cn2 = {}, _cn2[_SelectModule.default.inputContainer] = true, _cn2[_SelectModule.default.inputContainer_visible] = focused, _cn2))
    }, renderFilter({
      name: name,
      dataQaType: dataQaType,
      autoComplete: autoComplete,
      ref: this.controlRef,
      value: this.state.filterValue,
      disabled: disabled,
      readOnly: readOnly,
      onBlur: this.handleControlBlur,
      onFocus: this.handleControlFocus,
      onChange: this.handleFilterChange
    })));
  };

  return Multiselect;
}(_Select2.default);

Multiselect.propTypes = (0, _extends2.default)({}, _Select2.default.propTypes, {
  value: _propTypes.default.array,

  /**
   * Отображать в заголовке количество выбранных опций
   */
  counterTitle: _propTypes.default.bool
});
Multiselect.defaultProps = (0, _extends2.default)({}, _Select2.default.defaultProps, {
  dataQaType: 'uikit/multiSelect',
  counterTitle: false,
  cleanable: true,
  value: EMPTY_ARRAY,
  closeOnSelect: false,
  renderValue: function renderValue(properties) {
    var value = properties.value,
        options = properties.options,
        counterTitle = properties.counterTitle,
        selectedOption = properties.selectedOption,
        focused = properties.focused,
        editable = properties.editable,
        dataQaType = properties.dataQaType;

    if (counterTitle && value.length > 1) {
      return /*#__PURE__*/_react.default.createElement("div", {
        "data-qa-type": dataQaType + ".value",
        className: _SelectModule.default.value
      }, "\u0412\u044B\u0431\u0440\u0430\u043D\u043E ", value.length, " \u0438\u0437 ", options.length);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      "data-qa-type": dataQaType + ".value",
      className: _SelectModule.default.value
    }, (0, _map.default)(function (option) {
      return option.title;
    }, selectedOption).join(', '), focused && selectedOption && selectedOption.length && editable ? ",\xA0" : '');
  },
  defaultOptionProps: {
    checkboxed: true,
    checkmarkStyle: 'checkbox'
  }
});
var _default = Multiselect;
exports.default = _default;