"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _empty = _interopRequireDefault(require("@tinkoff/utils/is/empty"));

var _NativeSelect2 = _interopRequireDefault(require("../NativeSelect"));

var _SelectModule = _interopRequireDefault(require("../Select.module.css"));

var _Multiselect = _interopRequireDefault(require("./Multiselect"));

var EMPTY_ARRAY = [];

var NativeMultiselect = /*#__PURE__*/function (_NativeSelect) {
  (0, _inheritsLoose2.default)(NativeMultiselect, _NativeSelect);

  function NativeMultiselect() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _NativeSelect.call.apply(_NativeSelect, [this].concat(args)) || this;

    _this.handleSelectChange = function (event) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          name = _this$props.name,
          options = _this$props.options;
      var targetOptions = event.target.options;
      var value = [];

      var _loop = function _loop(i) {
        var targetOption = targetOptions[i];

        if (targetOption.selected) {
          var option = options.find(function (originalOption) {
            return String(originalOption.value) === targetOption.value;
          });
          value.push(option.value);
        }
      };

      for (var i = 0; i < targetOptions.length; i++) {
        _loop(i);
      }

      onChange(event, {
        value: value,
        name: name
      });
    };

    return _this;
  }

  var _proto = NativeMultiselect.prototype;

  _proto.renderSelect = function renderSelect() {
    var _this$props2 = this.props,
        disabled = _this$props2.disabled,
        readOnly = _this$props2.readOnly,
        options = _this$props2.options,
        value = _this$props2.value;
    return /*#__PURE__*/_react.default.createElement("select", {
      ref: this.selectRef,
      onChange: this.handleSelectChange,
      className: _SelectModule.default.nativeSelect,
      disabled: disabled || readOnly,
      multiple: true // https://ru.reactjs.org/docs/forms.html#the-select-tag
      ,
      value: (0, _empty.default)(value) ? [] : value
    }, options.map(function (option) {
      return /*#__PURE__*/_react.default.createElement("option", {
        key: option.value,
        value: option.value,
        disabled: option.disabled
      }, option.title);
    }));
  };

  return NativeMultiselect;
}(_NativeSelect2.default);

NativeMultiselect.propTypes = (0, _extends2.default)({}, _NativeSelect2.default.propTypes, {
  /**
   * Значение селекта
   */
  value: _propTypes.default.array,

  /**
   * Отображать в заголовке количество выбранных опций
   */
  counterTitle: _propTypes.default.bool
});
NativeMultiselect.defaultProps = (0, _extends2.default)({}, _NativeSelect2.default.defaultProps, {
  value: EMPTY_ARRAY,
  counterTitle: false,
  cleanable: true,
  dataQaType: 'uikit/nativeMultiSelect',
  renderValue: _Multiselect.default.defaultProps.renderValue
});
var _default = NativeMultiselect;
exports.default = _default;