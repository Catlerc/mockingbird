import type React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { DropdownProps } from '@platform-ui/dropdown';
import type { Options, SingleOption, OptionObject } from '@platform-ui/dropdown/types';
import type { filterOptions, filterOption } from '@platform-ui/dropdown/utils';

export type Value = string | number;
type Source = 'clean' | 'blur' | 'optionSelect' | 'filterChange';

interface SelectState {
    selectedOption?: SingleOption;
    opened?: boolean;
    filterValue?: Value;
}

export interface GenericSelectProps<V> extends DataQaInterface, Pick<DropdownProps, 'highlightedOption'> {
    /**
     * Атрибут `name`
     */
    name?: string;
    /**
     * Текущее значение селекта
     */
    value?: V;
    /**
     * Набор опций селекта
     */
    options?: Options;
    /**
     * Опция по умолчанию
     */
    defaultOption?: SingleOption;
    /**
     * Лейбл
     */
    label?: React.ReactNode;
    /**
     * Плейсхолдер (показывается под лейблом когда селект открыт и ничего не выбрано)
     */
    placeholder?: React.ReactNode;
    /**
     * `html`-атрибут `tabindex`
     */
    tabIndex?: number;
    /**
     * Задизейбленное состояние
     */
    disabled?: boolean;
    /**
     * Только для чтения
     */
    readOnly?: boolean;
    /**
     * Открытое состояние
     */
    opened?: boolean;
    /**
     * Фокусное состояние
     */
    focused?: boolean;
    /**
     * Состояние ошибки
     */
    error?: boolean;
    /**
     * Флаг динимаческой высоты
     */
    expandable?: boolean;
    /**
     * Обязательное поле
     */
    required?: boolean;
    /**
     * Отображать ли крестик для очистки
     */
    cleanable?: boolean;
    /**
     * Максимальная высота выпадающего списка в px
     */
    listHeight?: string | number;
    /**
     * Спрямление уголков
     */
    flatCorners?: string;
    /**
     * Блок с подсказкой
     */
    hintBlock?: React.ReactNode;
    /**
     * Общие пропы для всех итемов
     */
    defaultOptionProps?: OptionObject;
    /**
     * Пропсы для пустого итема - отображаются когда селект в невыбранном состоянии
     */
    emptyOptionProps?: {
        rightContent?: React.ReactNode;
        leftContent?: React.ReactNode;
    };
    /**
     * Должен ли селект закрываться после выбора нового значения
     */
    closeOnSelect?: boolean;
    /**
     * Рендерит лейбл селекта
     */
    renderLabel?: (props: SelectProps & SelectState & { editable?: boolean; empty?: boolean }) => void;
    /**
     * Рендерит текущее выбранное значение
     */
    renderValue?: (props: SelectProps & SelectState & { editable?: boolean; empty?: boolean }) => void;
    /**
     * Обработчик изменения значения селекта
     */
    onChange?: (
        event: React.KeyboardEvent | React.MouseEvent,
        params: { value: V; name?: string; source?: Source }
    ) => void;
    /**
     * Обработчик выбора опции
     */
    onOptionSelect?: (
        event: React.KeyboardEvent | React.MouseEvent,
        params: { value: V; name?: string; source?: Source }
    ) => void;
    /**
     * Обработчик изменения фильтра в селекте
     */
    onFilterChange?: (
        event: React.KeyboardEvent | React.MouseEvent,
        params: { filterValue: Value; name?: string }
    ) => void;
    /**
     * Обработчик фокуса
     */
    onFocus?: (event: React.KeyboardEvent | React.MouseEvent, params: { name?: string }) => void;
    /**
     * Обработчик потери фокуса
     */
    onBlur?: (event: React.KeyboardEvent | React.MouseEvent, params: { name?: string }) => void;
    /**
     * Обработчик завершения редактирования поля
     */
    onFieldDone?: (event: React.KeyboardEvent | React.MouseEvent, params: { name?: string; value: V }) => void;
    /**
     * Обработчик открытия селекта
     */
    onOpen?: (event: null, params: { name?: string }) => void;
    /**
     * Обработчик нажатия клавиш
     */
    onKeyDown?: (event: React.KeyboardEvent | React.MouseEvent, params: { name?: string; key: string }) => void;
    /**
     * Обработчик клика на крестик
     */
    onClean?: (event: React.KeyboardEvent | React.MouseEvent, params: { name?: string }) => void;
    /**
     * Обработчик закрытия селекта
     */
    onClose?: (event: null, params: { name?: string }) => void;
    /**
     * Позволяет отображать указанные параметры выбранного элемента в поле
     */
    selectedItemInfo?: boolean | string[];
    /**
     * Id элемента с ошибкой
     */
    ariaErrorMessage?: string;
    /**
     * Id с описанием элемента
     */
    ariaDescribedBy?: string;
    /**
     * Минимальное количество элементов, при котором появляется возможность фильтрации значений
     */
    searchThreshold?: number;
    /**
     * Функция фильтрации элементов в списке подсказок
     *
     * @param {string|object} option Текущий проверяемый элемент массива подсказок
     * @param {string} normalisedQuery Введенное в инпут значение (нормализованное)
     * @param {string} query Введенное в инпут значение (до нормализации)
     * @param {bool} highlightMatch Флаг, индицирующий, нужно ли выделять совпадающую часть
     * @return {bool|object} false - не совпадает, true - совпадает, Object - если опцию нужно модифицировать (добавить выделение текста)
     */
    filterFunc?: typeof filterOption;
    /**
     * Функция для преобразования массива опций на основе текущего значения поля. (sic!) Заменяет стандартную функцию фильтрации опций
     *
     * @param {array} options Массив из пропа suggestions
     * @param {string} query  Текущее значение поля
     * @param {func} filterFunc Функция-фильтрации 1 опции из пропа `filterFunc`
     * @param {bool} highlightMatch Флаг, индицирующий, нужно ли выделять совпадающую часть (если не используется дефолтный filterFunc, то реализровать самому)
     * @return {array}
     */
    transformOptions?: typeof filterOptions;
    /**
     * Функция, возвращающая текстовое значение опции для заполнения инпута
     */
    extractTextValue?: (selectedOption?: SingleOption) => void;
    /**
     * Размер инпута (default?: l)
     * Доступные размеры?: [l - 56px, m - 44px, s - 32px]
     */
    size?: 'l' | 'm' | 's';
    /**
     * Добавляет loading в dropdown
     */
    loading?: boolean;
    /**
     * Минимальная ширина выпадающего списка
     */
    dropdownMinWidth?: string | number;
    /**
     * z-index выпадающего списка
     */
    dropdownZIndex?: number;
    /**
     * Включает autoComplete у нативномого инпута
     */
    autoComplete?: boolean | string;
    /**
     * Включает необходимые атрибуты для cobrowsing
     */
    cobrowsingSecure?: boolean;
    /**
     * Минимальная длина значения, при котором будет открыт список подсказок
     */
    minDropdownShowLength?: number;
    /**
     * Содержимое айтема для состояния "Нет результатов"
     */
    noResultsContent?: React.ReactNode;
    /**
     * Флаг для умного выбора позиции выпадающего списка
     */
    smartDirection?: boolean;
    /**
     * aria-label для элемента стрелки в открытом состоянии
     */
    arrowAriaLabelOpened?: string;
    /**
     * aria-label для элемента стрелки в закрытом состоянии
     */
    arrowAriaLabelClosed?: string;
    /**
     * рендер функция фильтра
     */
    renderFilter?: (filterProps: SelectProps) => void;
    /**
     * фокус после очистки поля
     */
    focusOnClean?: boolean;
}

export type SelectProps = GenericSelectProps<Value>;

declare const Select: React.ComponentType<SelectProps>;

export default Select;
