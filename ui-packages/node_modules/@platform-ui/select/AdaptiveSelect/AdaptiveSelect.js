"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deviceInfo = require("@platform-ui/device-info");

var _Select = _interopRequireDefault(require("../Select"));

var _NativeSelect = _interopRequireDefault(require("../NativeSelect"));

var _NativeMultiselect = _interopRequireDefault(require("../Multiselect/NativeMultiselect"));

var _Multiselect = _interopRequireDefault(require("../Multiselect/Multiselect"));

var _NativeMultiselectTagged = _interopRequireDefault(require("../MultiselectTagged/NativeMultiselectTagged"));

var _MultiselectTagged = _interopRequireDefault(require("../MultiselectTagged/MultiselectTagged"));

var _excluded = ["view", "multiple", "tagged", "focused", "searchThreshold"];
var SELECTS = {
  singleValue: {
    native: _NativeSelect.default,
    default: _Select.default
  },
  multiple: {
    native: _NativeMultiselect.default,
    default: _Multiselect.default
  },
  tagged: {
    native: _NativeMultiselectTagged.default,
    default: _MultiselectTagged.default
  }
};

var AdaptiveSelect = function AdaptiveSelect(_ref) {
  var view = _ref.view,
      multiple = _ref.multiple,
      tagged = _ref.tagged,
      focused = _ref.focused,
      searchThreshold = _ref.searchThreshold,
      selectProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);

  var _useState = (0, _react.useState)(view),
      showOn = _useState[0],
      setState = _useState[1];

  var propsByType = {
    default: {
      focused: focused,
      searchThreshold: searchThreshold
    },
    native: {
      focused: false,
      searchThreshold: Infinity
    }
  };
  (0, _react.useEffect)(function () {
    if (window !== undefined) {
      setState((0, _deviceInfo.getDeviceType)() === 'desktop' ? 'default' : 'native');
    }
  }, [showOn]);
  var Component;

  if (multiple && tagged) {
    Component = SELECTS.tagged[showOn];
    return /*#__PURE__*/_react.default.createElement(Component, Object.assign({}, selectProps, propsByType[showOn]));
  }

  if (multiple) {
    Component = SELECTS.multiple[showOn];
    return /*#__PURE__*/_react.default.createElement(Component, Object.assign({}, selectProps, propsByType[showOn]));
  }

  Component = SELECTS.singleValue[showOn];
  return /*#__PURE__*/_react.default.createElement(Component, Object.assign({}, selectProps, propsByType[showOn]));
};

process.env.NODE_ENV !== "production" ? AdaptiveSelect.propTypes = {
  view: _propTypes.default.oneOf(['native', 'default']),
  multiple: _propTypes.default.bool,
  tagged: _propTypes.default.bool,
  focused: _propTypes.default.bool,
  searchThreshold: _propTypes.default.number
} : void 0;
AdaptiveSelect.defaultProps = {
  view: 'default',
  multiple: false,
  tagged: false,
  focused: false,
  searchThreshold: 9
};
var _default = AdaptiveSelect;
exports.default = _default;