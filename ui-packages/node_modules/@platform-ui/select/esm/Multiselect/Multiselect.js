import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import pt from 'prop-types';
import cn from 'classnames';
import map from '@tinkoff/utils/array/map';
import Select from '../Select';
import { updateMultiselectValue } from '../utils';
import styles from '../Select.module.css';
const EMPTY_ARRAY = [];

class Multiselect extends Select {
  constructor(...args) {
    super(...args);

    this.shouldApplyFilter = () => {
      return true;
    };

    this.handleOptionSelect = (event, {
      value: optionValue
    }) => {
      const {
        onChange,
        onFieldDone,
        closeOnSelect,
        name
      } = this.props;
      this.setState({
        filterValue: ''
      });

      if (optionValue === undefined) {
        return;
      }

      const value = updateMultiselectValue(this.props.value, optionValue);
      onChange(event, {
        value,
        name
      });

      if (closeOnSelect) {
        onFieldDone(event, {
          value,
          name
        });
      }
    };

    this.handleFilterChange = e => {
      const filterValue = e.target.value;
      const {
        name,
        onFilterChange
      } = this.props;
      this.setState({
        filterValue
      });
      onFilterChange(e, {
        name,
        filterValue
      });
      this.open();
    };
  }

  resetFilterValue() {
    this.setState({
      filterValue: ''
    });
  }

  renderInput(childrenProps) {
    const {
      dataQaType,
      autoComplete,
      disabled,
      readOnly,
      expandable,
      focused,
      name,
      renderFilter
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      className: cn({
        [styles.valueWrapper]: true,
        [styles.valueWrapper_expandable]: expandable
      })
    }, this.props.renderValue(childrenProps), /*#__PURE__*/React.createElement("div", {
      className: cn({
        [styles.inputContainer]: true,
        [styles.inputContainer_visible]: focused
      })
    }, renderFilter({
      name,
      dataQaType,
      autoComplete,
      ref: this.controlRef,
      value: this.state.filterValue,
      disabled,
      readOnly,
      onBlur: this.handleControlBlur,
      onFocus: this.handleControlFocus,
      onChange: this.handleFilterChange
    })));
  }

}

Multiselect.propTypes = _extends({}, Select.propTypes, {
  value: pt.array,

  /**
   * Отображать в заголовке количество выбранных опций
   */
  counterTitle: pt.bool
});
Multiselect.defaultProps = _extends({}, Select.defaultProps, {
  dataQaType: 'uikit/multiSelect',
  counterTitle: false,
  cleanable: true,
  value: EMPTY_ARRAY,
  closeOnSelect: false,
  renderValue: properties => {
    const {
      value,
      options,
      counterTitle,
      selectedOption,
      focused,
      editable,
      dataQaType
    } = properties;

    if (counterTitle && value.length > 1) {
      return /*#__PURE__*/React.createElement("div", {
        "data-qa-type": `${dataQaType}.value`,
        className: styles.value
      }, "\u0412\u044B\u0431\u0440\u0430\u043D\u043E ", value.length, " \u0438\u0437 ", options.length);
    }

    return /*#__PURE__*/React.createElement("div", {
      "data-qa-type": `${dataQaType}.value`,
      className: styles.value
    }, map(option => option.title, selectedOption).join(', '), focused && selectedOption && selectedOption.length && editable ? ',\u00A0' : '');
  },
  defaultOptionProps: {
    checkboxed: true,
    checkmarkStyle: 'checkbox'
  }
});
export default Multiselect;