import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import pt from 'prop-types';
import isEmpty from '@tinkoff/utils/is/empty';
import NativeSelect from '../NativeSelect';
import styles from '../Select.module.css';
import Multiselect from './Multiselect';
const EMPTY_ARRAY = [];

class NativeMultiselect extends NativeSelect {
  constructor(...args) {
    super(...args);

    this.handleSelectChange = event => {
      const {
        onChange,
        name,
        options
      } = this.props;
      const {
        options: targetOptions
      } = event.target;
      const value = [];

      for (let i = 0; i < targetOptions.length; i++) {
        const targetOption = targetOptions[i];

        if (targetOption.selected) {
          const option = options.find(originalOption => {
            return String(originalOption.value) === targetOption.value;
          });
          value.push(option.value);
        }
      }

      onChange(event, {
        value,
        name
      });
    };
  }

  renderSelect() {
    const {
      disabled,
      readOnly,
      options,
      value
    } = this.props;
    return /*#__PURE__*/React.createElement("select", {
      ref: this.selectRef,
      onChange: this.handleSelectChange,
      className: styles.nativeSelect,
      disabled: disabled || readOnly,
      multiple: true // https://ru.reactjs.org/docs/forms.html#the-select-tag
      ,
      value: isEmpty(value) ? [] : value
    }, options.map(option => {
      return /*#__PURE__*/React.createElement("option", {
        key: option.value,
        value: option.value,
        disabled: option.disabled
      }, option.title);
    }));
  }

}

NativeMultiselect.propTypes = _extends({}, NativeSelect.propTypes, {
  /**
   * Значение селекта
   */
  value: pt.array,

  /**
   * Отображать в заголовке количество выбранных опций
   */
  counterTitle: pt.bool
});
NativeMultiselect.defaultProps = _extends({}, NativeSelect.defaultProps, {
  value: EMPTY_ARRAY,
  counterTitle: false,
  cleanable: true,
  dataQaType: 'uikit/nativeMultiSelect',
  renderValue: Multiselect.defaultProps.renderValue
});
export default NativeMultiselect;