import type React from 'react';
import type { SelectProps } from '../Select';
import type { MultiselectProps } from '../Multiselect/Multiselect';
import type { MultiselectTaggedProps } from '../MultiselectTagged/MultiselectTagged';
import type { NativeSelectProps } from '../NativeSelect';
import type { NativeMultiselectProps } from '../Multiselect/NativeMultiselect';
import type { NativeMultiselectTaggedProps } from '../MultiselectTagged/NativeMultiselectTagged';

interface CommonProps<TView, TMultiple, TTagged> {
    view?: TView;
    multiple?: TMultiple;
    tagged?: TTagged;
    focused?: boolean;
}

export type AdaptiveSelectProps<TView, TMultiple, TTagged> = CommonProps<TView, TMultiple, TTagged> &
    (TView extends 'default'
        ? TMultiple extends true
            ? TTagged extends true
                ? MultiselectTaggedProps
                : MultiselectProps
            : SelectProps
        : TMultiple extends true
        ? TTagged extends true
            ? NativeMultiselectTaggedProps
            : NativeMultiselectProps
        : NativeSelectProps);

declare const AdaptiveSelect: <
    TView extends 'native' | 'default' = 'default',
    TMultiple extends boolean = false,
    TTagged extends boolean = false
>(
    props: AdaptiveSelectProps<TView, TMultiple, TTagged>
) => ReturnType<React.FunctionComponent<AdaptiveSelectProps<TView, TMultiple, TTagged>>>;

export default AdaptiveSelect;
