import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["view", "multiple", "tagged", "focused", "searchThreshold"];
import React, { useState, useEffect } from 'react';
import pt from 'prop-types';
import { getDeviceType } from '@platform-ui/device-info';
import Select from '../Select';
import NativeSelect from '../NativeSelect';
import NativeMultiselect from '../Multiselect/NativeMultiselect';
import MultiSelect from '../Multiselect/Multiselect';
import NativeMultiselectTagged from '../MultiselectTagged/NativeMultiselectTagged';
import MultiselectTagged from '../MultiselectTagged/MultiselectTagged';
const SELECTS = {
  singleValue: {
    native: NativeSelect,
    default: Select
  },
  multiple: {
    native: NativeMultiselect,
    default: MultiSelect
  },
  tagged: {
    native: NativeMultiselectTagged,
    default: MultiselectTagged
  }
};

const AdaptiveSelect = _ref => {
  let {
    view,
    multiple,
    tagged,
    focused,
    searchThreshold
  } = _ref,
      selectProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const [showOn, setState] = useState(view);
  const propsByType = {
    default: {
      focused,
      searchThreshold
    },
    native: {
      focused: false,
      searchThreshold: Infinity
    }
  };
  useEffect(() => {
    if (window !== undefined) {
      setState(getDeviceType() === 'desktop' ? 'default' : 'native');
    }
  }, [showOn]);
  let Component;

  if (multiple && tagged) {
    Component = SELECTS.tagged[showOn];
    return /*#__PURE__*/React.createElement(Component, Object.assign({}, selectProps, propsByType[showOn]));
  }

  if (multiple) {
    Component = SELECTS.multiple[showOn];
    return /*#__PURE__*/React.createElement(Component, Object.assign({}, selectProps, propsByType[showOn]));
  }

  Component = SELECTS.singleValue[showOn];
  return /*#__PURE__*/React.createElement(Component, Object.assign({}, selectProps, propsByType[showOn]));
};

process.env.NODE_ENV !== "production" ? AdaptiveSelect.propTypes = {
  view: pt.oneOf(['native', 'default']),
  multiple: pt.bool,
  tagged: pt.bool,
  focused: pt.bool,
  searchThreshold: pt.number
} : void 0;
AdaptiveSelect.defaultProps = {
  view: 'default',
  multiple: false,
  tagged: false,
  focused: false,
  searchThreshold: 9
};
export default AdaptiveSelect;