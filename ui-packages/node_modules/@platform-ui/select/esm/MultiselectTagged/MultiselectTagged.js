import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import classNames from 'classnames';
import Tag from '@platform-ui/tag';
import { updateMultiselectValue } from '../utils';
import Multiselect from '../Multiselect/Multiselect';
import styles from './MultiselectTagged.module.css';

const getHandler = (optionValue, props) => () => {
  const newSelectValue = updateMultiselectValue(props.value, optionValue);
  props.onChange && props.onChange(null, {
    value: newSelectValue
  });
};

class MultiselectTagged extends Multiselect {}

MultiselectTagged.propTypes = (() => {
  const propTypes = _extends({}, Multiselect.propTypes);

  delete propTypes.label;
  delete propTypes.required;
  return propTypes;
})();

MultiselectTagged.defaultProps = _extends({}, Multiselect.defaultProps, {
  dataQaType: 'uikit/multiSelectTagged',
  renderLabel: () => {},
  renderValue: properties => properties.selectedOption.map(option => /*#__PURE__*/React.createElement("div", {
    className: classNames({
      [styles.itemWrapper]: true,
      [styles.itemWrapper_expandable]: properties.expandable
    }),
    key: option.value
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.item
  }, /*#__PURE__*/React.createElement(Tag, {
    dataQaType: `${properties.dataQaType}.tag`,
    tabIndex: -1,
    tagName: "span",
    size: properties.size,
    theme: "onLight",
    onRemove: getHandler(option.value, properties),
    removable: !properties.readOnly,
    clickable: !properties.readOnly,
    onMouseDown: event => {
      event.preventDefault();
      event.stopPropagation();
    }
  }, option.title))))
});
export default MultiselectTagged;