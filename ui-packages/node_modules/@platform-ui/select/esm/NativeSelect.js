import _extends from "@babel/runtime/helpers/extends";
import React, { createRef } from 'react';
import cn from 'classnames';
import dataQa from '@platform-ui/dataQa';
import isEmpty from '@tinkoff/utils/is/empty';
import Select from './Select';
import styles from './Select.module.css';

class NativeSelect extends Select {
  constructor(props) {
    super(props);

    this.open = () => {};

    this.close = () => {};

    this.handleSelectChange = event => {
      const {
        onChange,
        name,
        options
      } = this.props;
      const {
        value
      } = event.target;
      const selectedOption = options.find(option => {
        return String(option.value) === value;
      });

      if (!selectedOption || selectedOption.value === undefined) {
        return;
      }

      onChange(event, {
        value: selectedOption.value,
        name
      });
    };

    this.handleBlur = event => {
      const {
        value,
        onBlur,
        onFieldDone
      } = this.props;
      value && onFieldDone(event, {
        value
      });
      onBlur(event, {
        value
      });
    };

    this.selectRef = /*#__PURE__*/createRef();
  }

  componentDidMount() {
    this.props.focused ? this.selectRef.current.focus() : this.selectRef.current.blur();
  }

  componentDidUpdate(prevProps) {
    if (this.props.focused !== prevProps.focused) {
      this.props.focused ? this.selectRef.current.focus() : this.selectRef.current.blur();
    }
  }

  renderSelect() {
    const {
      disabled,
      readOnly,
      value,
      options,
      onFocus,
      dataQaType
    } = this.props;
    const emptyValue = isEmpty(value);
    return /*#__PURE__*/React.createElement("select", Object.assign({}, dataQa({
      dataQaType: cn({
        [`${dataQaType}.nativeSelect`]: true,
        [`${dataQaType}.nativeSelect_focused`]: this.props.focused,
        [`${dataQaType}.nativeSelect_opened`]: this.props.opened
      })
    }), {
      ref: this.selectRef,
      onChange: this.handleSelectChange,
      className: styles.nativeSelect,
      disabled: disabled || readOnly // https://ru.reactjs.org/docs/forms.html#the-select-tag
      ,
      value: emptyValue ? '' : value,
      onBlur: this.handleBlur,
      onFocus: onFocus
    }), emptyValue && /*#__PURE__*/React.createElement("option", {
      label: " "
    }), Array.isArray(options) && options.map(option => {
      return /*#__PURE__*/React.createElement("option", {
        key: option.value,
        value: option.value,
        disabled: option.disabled
      }, option.title);
    }));
  }

  render() {
    const {
      disabled,
      error,
      expandable,
      readOnly,
      dataQaData,
      dataQaType,
      ariaErrorMessage,
      ariaDescribedBy,
      focused,
      size
    } = this.props;
    const {
      dropdownId,
      labelId
    } = this;
    const {
      opened
    } = this.state;
    return /*#__PURE__*/React.createElement("div", Object.assign({
      className: cn(styles.root, {
        [styles.root_focused]: focused,
        [styles.root_opened]: opened && !disabled && !readOnly,
        [styles.root_disabled]: disabled,
        [styles.root_expandable]: expandable,
        [styles[`root_size_${size}`]]: size
      }),
      ref: this.rootRef
    }, dataQa({
      dataQaType: dataQaType,
      dataQaData: typeof dataQaData === 'object' ? JSON.stringify(dataQaData) : dataQaData
    }), {
      role: "combobox",
      "aria-disabled": disabled,
      "aria-invalid": error,
      "aria-readonly": readOnly,
      "aria-expanded": opened,
      "aria-controls": dropdownId,
      "aria-labelledby": labelId,
      "aria-errormessage": ariaErrorMessage,
      "aria-describedby": ariaDescribedBy
    }), /*#__PURE__*/React.createElement("div", Object.assign({}, dataQa({
      dataQaType: cn({
        [`${dataQaType}.selectWrapper`]: true,
        [`${dataQaType}.selectWrapper_expandable`]: expandable
      })
    }), {
      className: cn({
        [styles.selectWrapper]: true,
        [styles.selectWrapper_expandable]: expandable
      })
    }), this.renderControl(), this.renderSelect()));
  }

}

NativeSelect.propTypes = _extends({}, Select.propTypes);
NativeSelect.defaultProps = _extends({}, Select.defaultProps, {
  dataQaType: 'uikit/nativeSelect'
});
export default NativeSelect;