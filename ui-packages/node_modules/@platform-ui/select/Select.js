"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _keycode = _interopRequireDefault(require("keycode"));

var _empty = _interopRequireDefault(require("@tinkoff/utils/is/empty"));

var _nil = _interopRequireDefault(require("@tinkoff/utils/is/nil"));

var _noop = _interopRequireDefault(require("@tinkoff/utils/function/noop"));

var _generateId = _interopRequireDefault(require("@platform-ui/generateId"));

var _utils = require("@platform-ui/dropdown/utils");

var _ArrowDown = _interopRequireDefault(require("@platform-ui/iconsPack/interface/24/ArrowDown"));

var _eventOutside = _interopRequireDefault(require("@platform-ui/eventOutside"));

var _inputBox = _interopRequireDefault(require("@platform-ui/inputBox"));

var _dropdown = _interopRequireDefault(require("@platform-ui/dropdown"));

var _scrollBlock = _interopRequireDefault(require("@platform-ui/scrollBlock"));

var _inputTools = require("@platform-ui/inputTools");

var _overrideStyles = _interopRequireDefault(require("@platform-ui/overrideStyles"));

var _utils2 = require("./utils");

var _SelectModule = _interopRequireDefault(require("./Select.module.css"));

var Select = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2.default)(Select, _PureComponent);

  function Select(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.dropdownId = (0, _generateId.default)((0, _assertThisInitialized2.default)(_this));
    _this.labelId = (0, _generateId.default)((0, _assertThisInitialized2.default)(_this));

    _this.handleClose = function () {
      _this.close();
    };

    _this.handleKeyDown = function (event) {
      var _this$props = _this.props,
          onKeyDown = _this$props.onKeyDown,
          name = _this$props.name;
      var key = (0, _keycode.default)(event);

      if (['enter', 'up', 'down'].indexOf(key) !== -1 || !_this.canBeFiltered() && key === 'space') {
        event.preventDefault();

        _this.open();
      }

      onKeyDown(event, {
        name: name,
        key: key
      });
    };

    _this.handleClean = function (event) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          onClean = _this$props2.onClean,
          name = _this$props2.name,
          focusOnClean = _this$props2.focusOnClean;
      event.stopPropagation();

      if (focusOnClean) {
        _this.open();

        _this.focus();
      }

      _this.setState({
        filterValue: ''
      });

      onChange(event, {
        value: _this.constructor.defaultProps.value,
        name: name,
        source: 'clean'
      });
      onClean(event, {
        name: name
      });
    };

    _this.handleControlFocus = function (event) {
      var _this$props3 = _this.props,
          onFocus = _this$props3.onFocus,
          name = _this$props3.name;
      onFocus(event, {
        name: name
      });

      _this.focus();
    };

    _this.handleControlBlur = function (event) {
      var _this$props4 = _this.props,
          name = _this$props4.name,
          options = _this$props4.options,
          onBlur = _this$props4.onBlur,
          onChange = _this$props4.onChange,
          defaultOption = _this$props4.defaultOption,
          extractTextValue = _this$props4.extractTextValue;
      onBlur(event, {
        name: name
      });
      var selectedOption = (0, _utils.getSelectedOptions)(options, _this.state.filterValue);

      if (defaultOption && (0, _empty.default)(selectedOption) && _this.state.filterValue !== '') {
        onChange(event, {
          name: name,
          value: defaultOption.value,
          source: 'blur'
        });

        _this.setState({
          filterValue: extractTextValue(defaultOption)
        });
      }

      _this.blur();
    };

    _this.handleControlClick = function () {
      if (_this.state.opened) {
        _this.close();
      } else {
        _this.open();
      }
    };

    _this.handleOptionSelect = function (event, _ref) {
      var value = _ref.value,
          option = _ref.option;
      var _this$props5 = _this.props,
          onChange = _this$props5.onChange,
          onFieldDone = _this$props5.onFieldDone,
          closeOnSelect = _this$props5.closeOnSelect,
          name = _this$props5.name,
          extractTextValue = _this$props5.extractTextValue,
          onOptionSelect = _this$props5.onOptionSelect;

      if (value === undefined) {
        return;
      }

      onOptionSelect == null ? void 0 : onOptionSelect(event, {
        value: value,
        name: name,
        source: 'optionSelect'
      });
      onChange(event, {
        value: value,
        name: name,
        source: 'optionSelect'
      });

      _this.setState({
        filterValue: extractTextValue(option)
      });

      if (closeOnSelect) {
        onFieldDone(event, {
          value: value,
          name: name
        });
      }
    };

    _this.handleFilterChange = function (e) {
      var filterValue = e.target.value;
      var _this$props6 = _this.props,
          name = _this$props6.name,
          onChange = _this$props6.onChange,
          onFilterChange = _this$props6.onFilterChange,
          minDropdownShowLength = _this$props6.minDropdownShowLength;

      _this.setState({
        filterValue: filterValue
      }, function () {
        if (filterValue.length >= minDropdownShowLength) {
          _this.open();
        } else {
          _this.close();
        }
      });

      onFilterChange(e, {
        name: name,
        filterValue: filterValue
      });
      onChange(e, {
        value: _this.constructor.defaultProps.value,
        name: name,
        source: 'filterChange'
      });
    };

    _this.handleToggleClick = function () {
      if (!_this.props.focused || _this.state.preventFocusClick) {
        return;
      }

      if (_this.state.opened) {
        _this.close();
      } else {
        _this.open();
      }
    };

    _this.handleDocumentClick = function () {
      _this.setState({
        preventFocusClick: false
      });

      document.removeEventListener('click', _this.handleDocumentClick);
    };

    _this.handleControlMouseDown = function () {
      if (_this.props.focused) {
        return;
      }

      _this.open();

      _this.setState({
        preventFocusClick: true
      });

      document.addEventListener('click', _this.handleDocumentClick);
    };

    _this.renderArrow = function (onClick) {
      var _this$props7 = _this.props,
          opened = _this$props7.opened,
          arrowAriaLabelOpened = _this$props7.arrowAriaLabelOpened,
          arrowAriaLabelClosed = _this$props7.arrowAriaLabelClosed;
      return /*#__PURE__*/_react.default.createElement("span", {
        className: _this.state.styles.arrow,
        onClick: onClick,
        role: "button",
        "aria-pressed": opened,
        "aria-label": opened ? arrowAriaLabelOpened : arrowAriaLabelClosed
      }, /*#__PURE__*/_react.default.createElement(_ArrowDown.default, null));
    };

    var _opened = props.opened,
        disabled = props.disabled,
        readOnly = props.readOnly;
    _this.state = {
      selectedOption: (0, _utils.getSelectedOptions)(props.options, props.value) || {},
      opened: _opened && !disabled && !readOnly,
      filterValue: ''
    };
    _this.filterCache = {};
    _this.enrichCache = {};
    _this.rootRef = /*#__PURE__*/(0, _react.createRef)();
    _this.controlRef = /*#__PURE__*/(0, _react.createRef)();
    _this.scrollBlockRef = /*#__PURE__*/(0, _react.createRef)();
    return _this;
  }
  /* eslint-disable react/forbid-prop-types */


  Select.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var _props$__overrideStyl;

    return (0, _extends2.default)({}, state, {
      selectedOption: (0, _utils.getSelectedOptions)(props.options, props.value) || {},
      styles: (0, _overrideStyles.default)(_SelectModule.default, props == null ? void 0 : (_props$__overrideStyl = props.__overrideStyles) == null ? void 0 : _props$__overrideStyl.Select)
    });
  };

  var _proto = Select.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.props.focused ? this.focus() : this.blur();
    this.updateListeningOutsideEvents();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.props.focused && (this.props.value !== prevProps.value || this.state.filterValue !== prevState.filterValue)) {
      this.setScrollPosition('right');
    }

    if (this.props.opened !== prevProps.opened) {
      this.props.opened ? this.open() : this.close();
    }

    if (this.props.focused !== prevProps.focused && this.props.focused) {
      this.focus();
    }

    if (!this.props.focused && this.props.value !== prevProps.value) {
      this.resetFilterValue();
    }

    this.updateListeningOutsideEvents();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.stopListeningOutsideEvents();
  };

  _proto.resetFilterValue = function resetFilterValue() {
    var selectedOption = this.state.selectedOption;
    var _this$props8 = this.props,
        extractTextValue = _this$props8.extractTextValue,
        defaultOption = _this$props8.defaultOption;
    var filterValue;

    if (!(0, _empty.default)(selectedOption)) {
      filterValue = extractTextValue(selectedOption);
    } else if (defaultOption) {
      filterValue = extractTextValue(defaultOption);
    } else {
      filterValue = '';
    }

    this.setState({
      filterValue: filterValue
    });
  };

  _proto.close = function close() {
    var _this$props9 = this.props,
        name = _this$props9.name,
        onClose = _this$props9.onClose;

    if (this.state.opened) {
      this.setState({
        opened: false
      });
      onClose(null, {
        name: name
      });
    }
  };

  _proto.open = function open() {
    var _this$props10 = this.props,
        disabled = _this$props10.disabled,
        readOnly = _this$props10.readOnly,
        onOpen = _this$props10.onOpen,
        name = _this$props10.name,
        minDropdownShowLength = _this$props10.minDropdownShowLength;
    var _this$state = this.state,
        opened = _this$state.opened,
        filterValue = _this$state.filterValue;

    if (!opened && !disabled && !readOnly && (!this.canBeFiltered() || filterValue.length >= minDropdownShowLength)) {
      this.setState({
        opened: true
      });
      onOpen(null, {
        name: name
      });
    }
  };

  _proto.canBeFiltered = function canBeFiltered() {
    var _this$props11 = this.props,
        options = _this$props11.options,
        searchThreshold = _this$props11.searchThreshold;
    return (0, _utils2.getOptionsLength)(options) >= searchThreshold;
  };

  _proto.isControlFocused = function isControlFocused() {
    /**
     * Используем contains вместо === из-за особенностей работы activeElement в IE
     * https://stackoverflow.com/questions/30935637/wrong-activeelement-in-focus-in-ie11
     */
    return !!(this.controlRef.current && this.controlRef.current.contains(document.activeElement));
  };

  _proto.focus = function focus() {
    if (this.isControlFocused()) {
      return;
    }

    this.controlRef.current && this.controlRef.current.focus && this.controlRef.current.focus();
  };

  _proto.blur = function blur() {
    this.setScrollPosition('left');
    this.close();
    this.controlRef.current && this.controlRef.current.blur && this.controlRef.current.blur();
  };

  _proto.setScrollPosition = function setScrollPosition(side) {
    this.scrollBlockRef.current && this.scrollBlockRef.current.setScrollPosition && this.scrollBlockRef.current.setScrollPosition(side);
  } // проставляет флаги selected и примешивает defaultOptionProps
  ;

  _proto.enrichOptions = function enrichOptions(options, value, defaultOptionProps) {
    var _this2 = this;

    if (this.enrichCache.options === options && this.enrichCache.value === value && this.enrichCache.defaultOptionProps === defaultOptionProps) {
      return this.enrichCache.enrichedOptions;
    }

    this.enrichCache = {
      value: value,
      options: options,
      defaultOptionProps: defaultOptionProps,
      enrichedOptions: options && options.map(function (option) {
        return option.options ? (0, _extends2.default)({}, option, {
          options: _this2.enrichOptions(option.options, value, defaultOptionProps)
        }) : (0, _extends2.default)({}, option, defaultOptionProps, {
          selected: (0, _utils.isOptionSelected)(value, option)
        });
      })
    };
    return this.enrichCache.enrichedOptions;
  };

  _proto.shouldApplyFilter = function shouldApplyFilter() {
    var _this$props12 = this.props,
        options = _this$props12.options,
        value = _this$props12.value;
    return (0, _utils.getSelectedOptions)(options, value).length === 0;
  };

  _proto.getFilteredOptions = function getFilteredOptions() {
    var _this$props13 = this.props,
        options = _this$props13.options,
        filterFunc = _this$props13.filterFunc,
        transformOptions = _this$props13.transformOptions,
        defaultOption = _this$props13.defaultOption;

    if (!this.canBeFiltered() || !this.shouldApplyFilter()) {
      return options;
    }

    var filterValue = this.state.filterValue;

    if (this.filterCache.filterValue === filterValue && this.filterCache.options === options && this.filterCache.filterFunc === filterFunc && this.filterCache.transformOptions === transformOptions) {
      return this.filterCache.filteredOptions;
    }

    var filteredOptions = transformOptions(options, filterValue, filterFunc);

    if (defaultOption) {
      filteredOptions.push(defaultOption);
    }

    this.filterCache = {
      filterValue: filterValue,
      options: options,
      filterFunc: filterFunc,
      transformOptions: transformOptions,
      filteredOptions: filteredOptions
    };
    return filteredOptions;
  };

  _proto.startListeningOutsideEvents = function startListeningOutsideEvents() {
    var _this3 = this;

    if (this.removeOutsideListeners) {
      return;
    }

    var outsideListeners = ['click', 'focusin'].map(function (eventType) {
      return (0, _eventOutside.default)(_this3.rootRef.current, eventType, _this3.handleClose);
    });

    this.removeOutsideListeners = function () {
      outsideListeners.forEach(function (removeListener) {
        removeListener();
      });
    };
  };

  _proto.stopListeningOutsideEvents = function stopListeningOutsideEvents() {
    if (!this.removeOutsideLiseners) {
      return;
    }

    this.removeOutsideListeners();
    this.removeOutsideListeners = null;
  };

  _proto.updateListeningOutsideEvents = function updateListeningOutsideEvents() {
    if (this.rootRef.current && this.state.selectedOption.controlComponent && this.state.opened) {
      this.startListeningOutsideEvents();
    } else {
      this.stopListeningOutsideEvents();
    }
  };

  _proto.renderInput = function renderInput() {
    var _cn;

    var _this$props14 = this.props,
        autoComplete = _this$props14.autoComplete,
        value = _this$props14.value,
        originOptions = _this$props14.options,
        focused = _this$props14.focused,
        disabled = _this$props14.disabled,
        readOnly = _this$props14.readOnly,
        extractTextValue = _this$props14.extractTextValue,
        defaultOption = _this$props14.defaultOption,
        cobrowsingSecure = _this$props14.cobrowsingSecure,
        dataQaType = _this$props14.dataQaType,
        renderFilter = _this$props14.renderFilter,
        name = _this$props14.name;
    var _this$state2 = this.state,
        filterValue = _this$state2.filterValue,
        styles = _this$state2.styles;
    var options = defaultOption ? originOptions.concat(defaultOption) : originOptions;
    var inputValue = !this.shouldApplyFilter() && extractTextValue((0, _utils.getSelectedOptions)(options, value)) || filterValue;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)((_cn = {}, _cn[styles.inputContainer] = true, _cn[styles.inputContainer_visible] = focused || inputValue, _cn))
    }, renderFilter({
      name: name,
      dataQaType: dataQaType,
      cobrowsingSecure: cobrowsingSecure,
      autoComplete: autoComplete,
      ref: this.controlRef,
      value: inputValue,
      disabled: disabled,
      readOnly: readOnly,
      onBlur: this.handleControlBlur,
      onFocus: this.handleControlFocus,
      onChange: this.handleFilterChange
    }));
  };

  _proto.renderSideContent = function renderSideContent(side) {
    var sideName = side + "Content";
    var _this$props15 = this.props,
        selectedItemInfo = _this$props15.selectedItemInfo,
        emptyOptionProps = _this$props15.emptyOptionProps;
    var _this$state3 = this.state,
        selectedOption = _this$state3.selectedOption,
        styles = _this$state3.styles;
    var sideContent = (0, _empty.default)(selectedOption) ? emptyOptionProps[sideName] : selectedOption[sideName];
    var computedSideContent = null;

    if (Array.isArray(selectedItemInfo) && selectedItemInfo.indexOf(sideName) !== -1) {
      var content = selectedItemInfo.indexOf(sideName) !== -1 && sideContent;
      computedSideContent = typeof content === 'function' ? content((0, _extends2.default)({}, this.props, this.state)) : content;
    }

    return !!computedSideContent && /*#__PURE__*/_react.default.createElement("div", {
      className: styles.customContent
    }, computedSideContent);
  };

  _proto.renderSelectedOptionControl = function renderSelectedOptionControl() {
    var _this$props16 = this.props,
        dataQaType = _this$props16.dataQaType,
        focused = _this$props16.focused,
        error = _this$props16.error,
        flatCorners = _this$props16.flatCorners,
        disabled = _this$props16.disabled,
        readOnly = _this$props16.readOnly,
        name = _this$props16.name,
        tabIndex = _this$props16.tabIndex,
        onClean = _this$props16.onClean;
    /**
     * Временный проп для переопределения стилей, не предназначен для широкого использования.
     * Создан специально для задачи https://
     * TODO: удалить когда появится общий механизм темизации.
     */

    var __overrideStyles = this.props.__overrideStyles;
    var selectedOption = this.state.selectedOption;
    var controlComponent = selectedOption.controlComponent,
        controlComponentProps = selectedOption.controlComponentProps;
    return /*#__PURE__*/_react.default.createElement(controlComponent, (0, _extends2.default)({
      dataQaType: dataQaType + ".value",
      inputIcon: this.renderArrow(this.handleControlClick),
      focused: focused,
      error: error,
      flatCorners: flatCorners,
      disabled: disabled,
      readOnly: readOnly,
      name: name,
      tabIndex: tabIndex,
      onBlur: this.handleControlBlur,
      onFocus: this.handleControlFocus,
      onClean: onClean,
      __overrideStyles: __overrideStyles
    }, controlComponentProps));
  };

  _proto.renderFilterControl = function renderFilterControl(childrenProps) {
    var error = childrenProps.error,
        focused = childrenProps.focused,
        tabIndex = childrenProps.tabIndex,
        disabled = childrenProps.disabled,
        readOnly = childrenProps.readOnly,
        required = childrenProps.required,
        cleanable = childrenProps.cleanable,
        hintBlock = childrenProps.hintBlock,
        placeholder = childrenProps.placeholder,
        flatCorners = childrenProps.flatCorners,
        renderLabel = childrenProps.renderLabel,
        empty = childrenProps.empty,
        filterValue = childrenProps.filterValue,
        size = childrenProps.size,
        expandable = childrenProps.expandable,
        styles = childrenProps.styles,
        dataQaType = childrenProps.dataQaType;
    var label = renderLabel(childrenProps);

    var content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, empty && (!filterValue || !focused && !label) && /*#__PURE__*/_react.default.createElement("div", {
      className: styles.placeholder,
      "data-qa-type": dataQaType + ".placeholder"
    }, placeholder), this.renderInput(childrenProps));

    return /*#__PURE__*/_react.default.createElement(_inputTools.FocusArea, {
      tagName: "label",
      role: "label",
      style: {
        cursor: 'text '
      }
    }, /*#__PURE__*/_react.default.createElement(_inputBox.default, {
      __overrideStyles: this.props.__overrideStyles,
      label: label,
      rightContent: this.renderSideContent('right'),
      leftContent: this.renderSideContent('left'),
      hintBlock: hintBlock,
      inputIcon: this.renderArrow(this.handleToggleClick),
      error: error,
      filled: !empty,
      focused: focused,
      tabIndex: disabled ? null : tabIndex,
      readOnly: readOnly,
      disabled: disabled,
      required: required,
      size: size,
      expandable: expandable,
      cleanable: cleanable && (!empty || !!filterValue),
      flatCorners: flatCorners,
      onClean: this.handleClean,
      onMouseDown: this.handleControlMouseDown,
      labelId: this.labelId,
      dataQaType: dataQaType + ".wrapper"
    }, !expandable ? /*#__PURE__*/_react.default.createElement(_scrollBlock.default, {
      ref: this.scrollBlockRef,
      noScroll: !focused
    }, content) : content));
  };

  _proto.renderDefaultControl = function renderDefaultControl(childrenProps) {
    var _cn2;

    var error = childrenProps.error,
        expandable = childrenProps.expandable,
        focused = childrenProps.focused,
        tabIndex = childrenProps.tabIndex,
        disabled = childrenProps.disabled,
        readOnly = childrenProps.readOnly,
        required = childrenProps.required,
        cleanable = childrenProps.cleanable,
        hintBlock = childrenProps.hintBlock,
        placeholder = childrenProps.placeholder,
        flatCorners = childrenProps.flatCorners,
        renderLabel = childrenProps.renderLabel,
        renderValue = childrenProps.renderValue,
        empty = childrenProps.empty,
        size = childrenProps.size,
        styles = childrenProps.styles,
        dataQaType = childrenProps.dataQaType;
    var content = empty ? /*#__PURE__*/_react.default.createElement("div", {
      className: styles.placeholder
    }, placeholder) : /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)((_cn2 = {}, _cn2[styles.valueWrapper] = true, _cn2[styles.valueWrapper_expandable] = expandable, _cn2))
    }, renderValue(childrenProps));
    return /*#__PURE__*/_react.default.createElement(_inputBox.default, {
      __overrideStyles: this.props.__overrideStyles,
      label: renderLabel(childrenProps),
      rightContent: this.renderSideContent('right'),
      leftContent: this.renderSideContent('left'),
      hintBlock: hintBlock,
      inputIcon: this.renderArrow(),
      error: error,
      expandable: expandable,
      filled: !empty,
      focused: focused,
      tabIndex: disabled ? null : tabIndex,
      readOnly: readOnly,
      disabled: disabled,
      required: required,
      cleanable: cleanable && !empty,
      flatCorners: flatCorners,
      size: size,
      ref: this.controlRef,
      onBlur: this.handleControlBlur,
      onFocus: this.handleControlFocus,
      onClick: this.handleToggleClick,
      onMouseDown: this.handleControlMouseDown,
      onClean: this.handleClean,
      labelId: this.labelId,
      dataQaType: dataQaType + ".wrapper"
    }, !expandable ? /*#__PURE__*/_react.default.createElement(_scrollBlock.default, {
      ref: this.scrollBlockRef,
      noScroll: !focused
    }, content) : content);
  };

  _proto.renderControl = function renderControl() {
    var selectedOption = this.state.selectedOption;
    var editable = this.canBeFiltered();
    var empty = (0, _empty.default)(selectedOption);
    var childrenProps = (0, _extends2.default)({}, this.props, this.state, {
      editable: editable,
      empty: empty
    });

    if (this.state.selectedOption.controlComponent) {
      return this.renderSelectedOptionControl(selectedOption);
    }

    if (editable) {
      return this.renderFilterControl(childrenProps);
    }

    return this.renderDefaultControl(childrenProps);
  };

  _proto.render = function render() {
    var _cn3, _cn4;

    var _this$props17 = this.props,
        disabled = _this$props17.disabled,
        error = _this$props17.error,
        expandable = _this$props17.expandable,
        readOnly = _this$props17.readOnly,
        listHeight = _this$props17.listHeight,
        closeOnSelect = _this$props17.closeOnSelect,
        value = _this$props17.value,
        defaultOptionProps = _this$props17.defaultOptionProps,
        highlightedOption = _this$props17.highlightedOption,
        dataQaData = _this$props17.dataQaData,
        dataQaType = _this$props17.dataQaType,
        ariaErrorMessage = _this$props17.ariaErrorMessage,
        ariaDescribedBy = _this$props17.ariaDescribedBy,
        options = _this$props17.options,
        focused = _this$props17.focused,
        loading = _this$props17.loading,
        size = _this$props17.size,
        dropdownMinWidth = _this$props17.dropdownMinWidth,
        dropdownZIndex = _this$props17.dropdownZIndex,
        defaultOption = _this$props17.defaultOption,
        cobrowsingSecure = _this$props17.cobrowsingSecure,
        smartDirection = _this$props17.smartDirection,
        noResultsContent = _this$props17.noResultsContent;
    var dropdownId = this.dropdownId,
        labelId = this.labelId;
    var _this$state4 = this.state,
        opened = _this$state4.opened,
        styles = _this$state4.styles;
    var filteredOptions = this.getFilteredOptions();
    var noResults = filteredOptions && !filteredOptions.length && options && !options.length && !defaultOption;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(styles.root, (_cn3 = {}, _cn3[styles.root_focused] = focused, _cn3[styles.root_opened] = opened && !disabled && !readOnly, _cn3[styles.root_disabled] = disabled, _cn3[styles.root_expandable] = expandable, _cn3[styles["root_size_" + size]] = size, _cn3)),
      ref: this.rootRef,
      "data-qa-data": typeof dataQaData === 'object' ? JSON.stringify(dataQaData) : dataQaData,
      "data-qa-type": dataQaType,
      role: "combobox",
      "aria-disabled": disabled,
      "aria-invalid": error,
      "aria-readonly": readOnly,
      "aria-expanded": opened,
      "aria-controls": dropdownId,
      "aria-labelledby": labelId,
      "aria-errormessage": ariaErrorMessage,
      "aria-describedby": ariaDescribedBy
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)((_cn4 = {}, _cn4[styles.selectWrapper] = true, _cn4[styles.selectWrapper_expandable] = expandable, _cn4))
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      __overrideStyles: this.props.__overrideStyles,
      cobrowsingSecure: cobrowsingSecure,
      id: dropdownId,
      highlightedOption: highlightedOption,
      listHeight: listHeight,
      loading: loading,
      opened: opened,
      options: this.enrichOptions(filteredOptions, value, defaultOptionProps),
      closeOnSelect: closeOnSelect,
      onOptionSelect: this.handleOptionSelect,
      onClose: this.handleClose,
      onKeyDown: readOnly ? undefined : this.handleKeyDown,
      noResults: noResults,
      noResultsContent: noResultsContent,
      listMinWidth: dropdownMinWidth,
      listZIndex: dropdownZIndex,
      dataQaType: dataQaType + ".dropdown",
      smartDirection: smartDirection
    }, this.renderControl())));
  };

  return Select;
}(_react.PureComponent);

Select.defaultProps = {
  name: null,
  value: null,
  label: null,
  placeholder: null,
  hintBlock: null,
  tabIndex: 0,
  error: false,
  expandable: false,
  focused: false,
  disabled: false,
  readOnly: false,
  opened: false,
  required: false,
  cleanable: false,
  loading: false,
  closeOnSelect: true,
  flatCorners: '',
  listHeight: _dropdown.default.defaultProps.maxHeight,
  selectedItemInfo: ['leftContent', 'rightContent'],
  size: 'l',
  searchThreshold: 9,
  filterFunc: _utils.filterOption,
  transformOptions: _utils.filterOptions,
  dropdownMinWidth: null,
  onBlur: _noop.default,
  onFocus: _noop.default,
  onChange: _noop.default,
  onFilterChange: _noop.default,
  onFieldDone: _noop.default,
  onKeyDown: _noop.default,
  onOpen: _noop.default,
  onClose: _noop.default,
  onClean: _noop.default,
  defaultOptionProps: {
    checkboxed: true
  },
  emptyOptionProps: {},
  renderLabel: function renderLabel(_ref2) {
    var label = _ref2.label,
        selectedOption = _ref2.selectedOption;
    return selectedOption.label || label;
  },
  renderValue: function renderValue(_ref3) {
    var extractTextValue = _ref3.extractTextValue,
        selectedOption = _ref3.selectedOption,
        dataQaType = _ref3.dataQaType,
        cobrowsingSecure = _ref3.cobrowsingSecure,
        styles = _ref3.styles;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: styles.value,
      "data-qa-type": dataQaType + ".value",
      "data-cobrowsing-secure": cobrowsingSecure ? 'text' : null
    }, extractTextValue(selectedOption));
  },
  renderFilter: function renderFilter(filterProps) {
    return /*#__PURE__*/_react.default.createElement(_inputTools.InlineInput, Object.assign({
      minWidth: 40
    }, filterProps));
  },
  extractTextValue: function extractTextValue(option) {
    return !(0, _nil.default)(option) ? option.title : null;
  },
  dataQaType: 'uikit/select',
  ariaErrorMessage: null,
  ariaDescribedBy: null,
  autoComplete: false,
  arrowAriaLabelOpened: 'Закрыть',
  arrowAriaLabelClosed: 'Открыть',
  cobrowsingSecure: false,
  minDropdownShowLength: 0,
  focusOnClean: true
};
process.env.NODE_ENV !== "production" ? Select.propTypes = {
  /**
   * Атрибут data-qa-data
   */
  dataQaData: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array, _propTypes.default.object, _propTypes.default.number]),

  /**
   * Атрибут `data-qa-type`
   */
  dataQaType: _propTypes.default.string,

  /**
   * Атрибут `name`
   */
  name: _propTypes.default.string,

  /**
   * Текущее значение селекта
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Набор опций селекта
   */
  options: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,

  /**
   * Опция по умолчанию
   */
  defaultOption: _propTypes.default.object,

  /**
   * Лейбл
   */
  label: _propTypes.default.node,

  /**
   * Плейсхолдер (показывается под лейблом когда селект открыт и ничего не выбрано)
   */
  placeholder: _propTypes.default.node,

  /**
   * `html`-атрибут `tabindex`
   */
  tabIndex: _propTypes.default.number,

  /**
   * Задизейбленное состояние
   */
  disabled: _propTypes.default.bool,

  /**
   * Только для чтения
   */
  readOnly: _propTypes.default.bool,

  /**
   * Открытое состояние
   */
  opened: _propTypes.default.bool,

  /**
   * Фокусное состояние
   */
  focused: _propTypes.default.bool,

  /**
   * Состояние ошибки
   */
  error: _propTypes.default.bool,

  /**
   * Флаг динимаческой высоты
   */
  expandable: _propTypes.default.bool,

  /**
   * Обязательное поле
   */
  required: _propTypes.default.bool,

  /**
   * Отображать ли крестик для очистки
   */
  cleanable: _propTypes.default.bool,

  /**
   * Максимальная высота выпадающего списка в px
   */
  listHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Спрямление уголков
   */
  flatCorners: _propTypes.default.string,

  /**
   * Блок с подсказкой
   */
  hintBlock: _propTypes.default.node,

  /**
   * Общие пропы для всех итемов
   */
  defaultOptionProps: _propTypes.default.object,

  /**
   * Пропсы для пустого итема - отображаются когда селект в невыбранном состоянии
   */
  emptyOptionProps: _propTypes.default.shape({
    rightContent: _propTypes.default.node,
    leftContent: _propTypes.default.node
  }),

  /**
   * Должен ли селект закрываться после выбора нового значения
   */
  closeOnSelect: _propTypes.default.bool,

  /**
   * Рендерит лейбл селекта
   */
  renderLabel: _propTypes.default.func,

  /**
   * Рендерит текущее выбранное значение
   */
  renderValue: _propTypes.default.func,

  /**
   * Обработчик изменения значения селекта
   */
  onChange: _propTypes.default.func,

  /**
   * Обработчик выбора опции
   */
  onOptionSelect: _propTypes.default.func,

  /**
   * Обработчик изменения фильтра в селекте
   */
  onFilterChange: _propTypes.default.func,

  /**
   * Обработчик фокуса
   */
  onFocus: _propTypes.default.func,

  /**
   * Обработчик потери фокуса
   */
  onBlur: _propTypes.default.func,

  /**
   * Обработчик завершения редактирования поля
   */
  onFieldDone: _propTypes.default.func,

  /**
   * Обработчик открытия селекта
   */
  onOpen: _propTypes.default.func,

  /**
   * Обработчик нажатия клавиш
   */
  onKeyDown: _propTypes.default.func,

  /**
   * Обработчик клика на крестик
   */
  onClean: _propTypes.default.func,

  /**
   * Обработчик закрытия селекта
   */
  onClose: _propTypes.default.func,

  /**
   *
   */
  highlightedOption: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),

  /**
   * Позволяет отображать указанные параметры выбранного элемента в поле
   */
  selectedItemInfo: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.string)]),

  /**
   * Id элемента с ошибкой
   */
  ariaErrorMessage: _propTypes.default.string,

  /**
   * Id с описанием элемента
   */
  ariaDescribedBy: _propTypes.default.string,

  /**
   * Минимальное количество элементов, при котором появляется возможность фильтрации значений
   */
  searchThreshold: _propTypes.default.number,

  /**
   * Функция фильтрации элементов в списке подсказок
   *
   * @param {string|object} option Текущий проверяемый элемент массива подсказок
   * @param {string} normalisedQuery Введенное в инпут значение (нормализованное)
   * @param {string} query Введенное в инпут значение (до нормализации)
   * @param {bool} highlightMatch Флаг, индицирующий, нужно ли выделять совпадающую часть
   * @return {bool|object} false - не совпадает, true - совпадает, Object - если опцию нужно модифицировать (добавить выделение текста)
   */
  filterFunc: _propTypes.default.func,

  /**
   * Функция для преобразования массива опций на основе текущего значения поля. (sic!) Заменяет стандартную функцию фильтрации опций
   *
   * @param {array} options Массив из пропа suggestions
   * @param {string} query  Текущее значение поля
   * @param {func} filterFunc Функция-фильтрации 1 опции из пропа `filterFunc`
   * @param {bool} highlightMatch Флаг, индицирующий, нужно ли выделять совпадающую часть (если не используется дефолтный filterFunc, то реализровать самому)
   * @return {array}
   */
  transformOptions: _propTypes.default.func,

  /**
   * Функция, возвращающая текстовое значение опции для заполнения инпута
   */
  extractTextValue: _propTypes.default.func,

  /**
   * Размер инпута (default: l)
   * Доступные размеры: [l - 56px, m - 44px, s - 32px]
   */
  size: _propTypes.default.oneOf(['l', 'm', 's']),

  /**
   * Добавляет loading в dropdown
   */
  loading: _propTypes.default.bool,

  /**
   * Минимальная ширина выпадающего списка
   */
  dropdownMinWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * z-index выпадающего списка
   */
  dropdownZIndex: _propTypes.default.number,

  /**
   * Включает autoComplete у нативномого инпута
   */
  autoComplete: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),

  /**
   * Включает необходимые атрибуты для cobrowsing
   */
  cobrowsingSecure: _propTypes.default.bool,

  /**
   * Минимальная длина значения, при котором будет открыт список подсказок
   */
  minDropdownShowLength: _propTypes.default.number,

  /**
   * Содержимое айтема для состояния "Нет результатов"
   */
  noResultsContent: _propTypes.default.node,

  /**
   * Флаг для умного выбора позиции выпадающего списка
   */
  smartDirection: _propTypes.default.bool,

  /**
   * aria-label для элемента стрелки в открытом состоянии
   */
  arrowAriaLabelOpened: _propTypes.default.string,

  /**
   * aria-label для элемента стрелки в закрытом состоянии
   */
  arrowAriaLabelClosed: _propTypes.default.string,

  /**
   * фокус после очистки поля
   */
  focusOnClean: _propTypes.default.bool
} : void 0;
var _default = Select;
exports.default = _default;
