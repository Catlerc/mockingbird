"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.useFocusVisible = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = require("react");

var TIMEOUT = 600;

var useFocusVisible = function useFocusVisible(props) {
  var focused = props.focused,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onClick = props.onClick,
      onMouseDown = props.onMouseDown;

  var _useState = (0, _react.useState)(false),
      clicked = _useState[0],
      setClicked = _useState[1];

  var clickTime = (0, _react.useRef)(0);
  var focusTime = (0, _react.useRef)(0);
  var handleBlur = (0, _react.useCallback)(function (event) {
    setClicked(false);
    onBlur(event);
  }, [onBlur]);
  var handleFocus = (0, _react.useCallback)(function (event) {
    focusTime.current = Date.now();

    if (Math.abs(focusTime.current - clickTime.current) < TIMEOUT) {
      setClicked(true);
    } else {
      setClicked(false);
    }

    onFocus(event);
  }, [onFocus]);
  var handleClick = (0, _react.useCallback)(function (event) {
    clickTime.current = Date.now();

    if (Math.abs(focusTime.current - clickTime.current) < TIMEOUT) {
      setClicked(true);
    }

    onClick && onClick(event);
  }, [onClick]);
  var handleMouseDown = (0, _react.useCallback)(function (event) {
    clickTime.current = Date.now();

    if (Math.abs(focusTime.current - clickTime.current) < TIMEOUT) {
      setClicked(true);
    }

    onMouseDown && onMouseDown(event);
  }, [onMouseDown]);
  return (0, _extends2.default)({}, props, {
    focusVisible: focused && !clicked,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onClick: handleClick,
    onMouseDown: handleMouseDown
  });
};

exports.useFocusVisible = useFocusVisible;