import _extends from "@babel/runtime/helpers/extends";
import { useState, useCallback, useRef } from 'react';
const TIMEOUT = 600;
export const useFocusVisible = props => {
  const {
    focused,
    onFocus,
    onBlur,
    onClick,
    onMouseDown
  } = props;
  const [clicked, setClicked] = useState(false);
  const clickTime = useRef(0);
  const focusTime = useRef(0);
  const handleBlur = useCallback(event => {
    setClicked(false);
    onBlur(event);
  }, [onBlur]);
  const handleFocus = useCallback(event => {
    focusTime.current = Date.now();

    if (Math.abs(focusTime.current - clickTime.current) < TIMEOUT) {
      setClicked(true);
    } else {
      setClicked(false);
    }

    onFocus(event);
  }, [onFocus]);
  const handleClick = useCallback(event => {
    clickTime.current = Date.now();

    if (Math.abs(focusTime.current - clickTime.current) < TIMEOUT) {
      setClicked(true);
    }

    onClick && onClick(event);
  }, [onClick]);
  const handleMouseDown = useCallback(event => {
    clickTime.current = Date.now();

    if (Math.abs(focusTime.current - clickTime.current) < TIMEOUT) {
      setClicked(true);
    }

    onMouseDown && onMouseDown(event);
  }, [onMouseDown]);
  return _extends({}, props, {
    focusVisible: focused && !clicked,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onClick: handleClick,
    onMouseDown: handleMouseDown
  });
};