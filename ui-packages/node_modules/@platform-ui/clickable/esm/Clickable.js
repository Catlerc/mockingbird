import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["className", "children", "dataQaData", "dataQaType", "disabled", "innerClassName", "href", "rel", "style", "tabIndex", "tagName", "target", "type", "onClick", "cobrowsingSecure", "innerDataQaType", "innerRef", "download"];
import React, { forwardRef } from 'react';
import memoizeWeak from '@platform-ui/memoizeWeak';
import dataQa from '@platform-ui/dataQa';
const MIDDLE_MOUSE_BUTTON = 1;
const leftClick = memoizeWeak(onClick => event => {
  if (event.metaKey || event.ctrlKey || event.button === MIDDLE_MOUSE_BUTTON) {
    return;
  }

  onClick(event);
}); // eslint-disable complexity

const Clickable = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    className,
    children,
    dataQaData,
    dataQaType = 'uikit/clickable',
    disabled,
    innerClassName,
    href,
    rel,
    style,
    tabIndex,
    tagName,
    target,
    type,
    onClick,
    cobrowsingSecure,
    innerDataQaType,
    innerRef,
    download
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  let Tag;
  let attributes;

  if (typeof href === 'string') {
    Tag = 'a';
    attributes = {
      download,
      href,
      rel: target === '_blank' ? `noopener noreferrer ${rel || ''}` : rel,
      tabIndex: disabled ? -1 : tabIndex,
      target,
      onClick: onClick && leftClick(onClick)
    };
  } else {
    Tag = 'button';
    attributes = {
      disabled,
      tabIndex,
      type: type !== undefined ? type : 'button',
      onClick
    };
  }

  if (tagName) {
    Tag = tagName;
  }

  if (Tag !== 'button') {
    // Если компонент не является кнопкой, то тип проставлять не нужно
    delete attributes.type;
    attributes = _extends({}, attributes, {
      disabled: undefined,
      'aria-disabled': disabled || undefined
    });
  }

  return /*#__PURE__*/React.createElement(Tag, Object.assign({}, otherProps, attributes, dataQa({
    dataQaData,
    dataQaType
  }), {
    "data-cobrowsing-secure": cobrowsingSecure ? 'text' : undefined,
    className: className,
    style: disabled ? _extends({
      pointerEvents: 'none'
    }, style) : style,
    ref: ref
  }), /*#__PURE__*/React.createElement("span", {
    className: innerClassName,
    "data-qa-type": innerDataQaType,
    style: {
      outline: 'none'
    },
    tabIndex: -1,
    ref: innerRef
  }, children));
});
Clickable.displayName = 'Clickable';
export default Clickable;