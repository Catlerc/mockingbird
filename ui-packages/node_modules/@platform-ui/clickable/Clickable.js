"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _memoizeWeak = _interopRequireDefault(require("@platform-ui/memoizeWeak"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _excluded = ["className", "children", "dataQaData", "dataQaType", "disabled", "innerClassName", "href", "rel", "style", "tabIndex", "tagName", "target", "type", "onClick", "cobrowsingSecure", "innerDataQaType", "innerRef", "download"];
var MIDDLE_MOUSE_BUTTON = 1;
var leftClick = (0, _memoizeWeak.default)(function (onClick) {
  return function (event) {
    if (event.metaKey || event.ctrlKey || event.button === MIDDLE_MOUSE_BUTTON) {
      return;
    }

    onClick(event);
  };
}); // eslint-disable complexity

var Clickable = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var className = _ref.className,
      children = _ref.children,
      dataQaData = _ref.dataQaData,
      _ref$dataQaType = _ref.dataQaType,
      dataQaType = _ref$dataQaType === void 0 ? 'uikit/clickable' : _ref$dataQaType,
      disabled = _ref.disabled,
      innerClassName = _ref.innerClassName,
      href = _ref.href,
      rel = _ref.rel,
      style = _ref.style,
      tabIndex = _ref.tabIndex,
      tagName = _ref.tagName,
      target = _ref.target,
      type = _ref.type,
      onClick = _ref.onClick,
      cobrowsingSecure = _ref.cobrowsingSecure,
      innerDataQaType = _ref.innerDataQaType,
      innerRef = _ref.innerRef,
      download = _ref.download,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  var Tag;
  var attributes;

  if (typeof href === 'string') {
    Tag = 'a';
    attributes = {
      download: download,
      href: href,
      rel: target === '_blank' ? "noopener noreferrer " + (rel || '') : rel,
      tabIndex: disabled ? -1 : tabIndex,
      target: target,
      onClick: onClick && leftClick(onClick)
    };
  } else {
    Tag = 'button';
    attributes = {
      disabled: disabled,
      tabIndex: tabIndex,
      type: type !== undefined ? type : 'button',
      onClick: onClick
    };
  }

  if (tagName) {
    Tag = tagName;
  }

  if (Tag !== 'button') {
    // Если компонент не является кнопкой, то тип проставлять не нужно
    delete attributes.type;
    attributes = (0, _extends2.default)({}, attributes, {
      disabled: undefined,
      'aria-disabled': disabled || undefined
    });
  }

  return /*#__PURE__*/_react.default.createElement(Tag, Object.assign({}, otherProps, attributes, (0, _dataQa.default)({
    dataQaData: dataQaData,
    dataQaType: dataQaType
  }), {
    "data-cobrowsing-secure": cobrowsingSecure ? 'text' : undefined,
    className: className,
    style: disabled ? (0, _extends2.default)({
      pointerEvents: 'none'
    }, style) : style,
    ref: ref
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: innerClassName,
    "data-qa-type": innerDataQaType,
    style: {
      outline: 'none'
    },
    tabIndex: -1,
    ref: innerRef
  }, children));
});
Clickable.displayName = 'Clickable';
var _default = Clickable;
exports.default = _default;