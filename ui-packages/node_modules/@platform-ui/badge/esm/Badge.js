import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["borderRadius", "children", "color", "customBackground", "customColor", "hover", "padding", "size", "status", "statusColor", "statusCustomColor", "flatCorners", "theme", "dataQaType", "href", "tagName"];
import React from 'react';
import cn from 'classnames';
import * as corners from '@platform-ui/flatCorners';
import Clickable from '@platform-ui/clickable';
import dataQa from '@platform-ui/dataQa'; // @ts-ignore

import { calcFontColor } from '@platform-ui/utils/color'; // @ts-ignore

import getBackgroundMainColor from '@platform-ui/utils/getBackgroundMainColor';
import styles from './Badge.module.css';

const Badge = _ref => {
  let {
    borderRadius,
    children,
    color,
    customBackground,
    customColor,
    hover,
    padding,
    size,
    status,
    statusColor,
    statusCustomColor,
    flatCorners,
    theme,
    dataQaType,
    href,
    tagName
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const smartColor = customColor || customBackground && calcFontColor(getBackgroundMainColor(customBackground));
  return !!children && /*#__PURE__*/React.createElement(Clickable, Object.assign({}, otherProps, {
    dataQaType: dataQaType,
    className: cn({
      [styles.root]: true,
      [styles.root_hover]: hover,
      [styles[`root_size_${size}`]]: size,
      [styles[`root_color_${color}`]]: color && !theme,
      [styles[`root_theme_${theme}`]]: theme,
      [styles.root_color_custom]: customBackground
    }),
    tagName: typeof href === 'string' ? 'a' : tagName,
    href: href,
    style: _extends({
      color: smartColor,
      borderRadius,
      background: customBackground && `${customBackground} border-box`
    }, corners.style(flatCorners)),
    innerDataQaType: `${dataQaType}.innerWrapper`,
    innerClassName: styles.innerClickable
  }), /*#__PURE__*/React.createElement("span", {
    className: styles.innerClassname,
    style: {
      paddingRight: padding && +padding,
      paddingLeft: padding && +padding
    }
  }, status && /*#__PURE__*/React.createElement("span", Object.assign({}, dataQa({
    dataQaType: `${dataQaType}.status`
  }), {
    className: cn({
      [styles.status]: true,
      [styles[`status_color_${statusColor}`]]: statusColor && !statusCustomColor,
      [styles[`status_theme_${theme}`]]: theme && !statusColor && !statusCustomColor
    }),
    style: {
      backgroundColor: statusCustomColor
    }
  })), /*#__PURE__*/React.createElement("span", Object.assign({}, dataQa({
    dataQaType: `${dataQaType}.content`
  }), {
    className: styles.content
  }), children))) || null;
};

Badge.defaultProps = {
  dataQaType: 'uikit/badge',
  color: 'gray',
  padding: 12,
  size: 'l',
  tabIndex: -1,
  tagName: 'span'
};
export default Badge;