"use strict";

exports.__esModule = true;
exports.DEFAULT_DIGIT_GROUPING_SEPARATOR = exports.DEFAULT_DECIMAL_SEPARATOR = void 0;
exports.calcMaxLength = calcMaxLength;
exports.cutIndexes = cutIndexes;
exports.cutStartZeroes = cutStartZeroes;
exports.cutToken = cutToken;
exports.fillSpaces = fillSpaces;
exports.filterAllowedCharacters = filterAllowedCharacters;
exports.filterExcessCommas = filterExcessCommas;
exports.filterExcessSigns = void 0;
exports.findWholePart = findWholePart;
exports.findWholePartStart = findWholePartStart;
exports.fixPrecision = fixPrecision;
exports.fixWholePartLength = fixWholePartLength;
exports.formatInput = formatInput;
exports.formatNumber = formatNumber;
exports.insertMandatorySign = insertMandatorySign;
exports.isAllowedCharacter = isAllowedCharacter;
exports.numberToInput = numberToInput;
exports.padEndZeroes = padEndZeroes;
exports.padStartZeroes = padStartZeroes;
exports.propsToSettings = propsToSettings;
exports.shouldUpdateFormat = shouldUpdateFormat;
exports.tokenize = tokenize;

var _formatUtils = require("@platform-ui/format-utils");

var _parse = require("./parse");

/* eslint-disable no-param-reassign */
var DIGIT_GROUP_LENGTH = 3;
var DEFAULT_DIGIT_GROUPING_SEPARATOR = " ";
exports.DEFAULT_DIGIT_GROUPING_SEPARATOR = DEFAULT_DIGIT_GROUPING_SEPARATOR;
var DEFAULT_DECIMAL_SEPARATOR = ',';
exports.DEFAULT_DECIMAL_SEPARATOR = DEFAULT_DECIMAL_SEPARATOR;

function propsToSettings(props) {
  var min = props.min,
      max = props.max,
      showPlus = props.showPlus,
      precision = props.precision,
      insertSpaces = props.insertSpaces,
      padStartingZeroes = props.padStartingZeroes,
      _props$digitGroupingS = props.digitGroupingSeparator,
      digitGroupingSeparator = _props$digitGroupingS === void 0 ? DEFAULT_DIGIT_GROUPING_SEPARATOR : _props$digitGroupingS,
      _props$decimalSeparat = props.decimalSeparator,
      decimalSeparator = _props$decimalSeparat === void 0 ? DEFAULT_DECIMAL_SEPARATOR : _props$decimalSeparat;
  var minusAllowed = min && min < 0;
  var plusAllowed = showPlus && max && max > 0;
  var minusMandatory = max && max < 0;
  var plusMandatory = min && min > 0 && showPlus;
  var commaAllowed = precision && precision > 0;
  var dontInsertSpaces = !insertSpaces;
  var wholePartMinLength = ("" + max).length;
  return {
    minusAllowed: minusAllowed,
    plusAllowed: plusAllowed,
    minusMandatory: minusMandatory,
    plusMandatory: plusMandatory,
    commaAllowed: commaAllowed,
    precision: precision,
    dontInsertSpaces: dontInsertSpaces,
    padStartingZeroes: padStartingZeroes,
    wholePartMinLength: wholePartMinLength,
    digitGroupingSeparator: digitGroupingSeparator,
    decimalSeparator: decimalSeparator
  };
}

function tokenize(_ref, settings) {
  var value = _ref.value,
      selectionStart = _ref.selectionStart,
      selectionEnd = _ref.selectionEnd;
  var chars = (value.length === 1 && value === ',' ? settings.decimalSeparator : value).split('').map(function (char) {
    switch (true) {
      case char === settings.digitGroupingSeparator:
        return DEFAULT_DIGIT_GROUPING_SEPARATOR;

      case char === settings.decimalSeparator:
        return '.';

      default:
        return char;
    }
  });
  chars.unshift('');
  return chars.map(function (char, index) {
    var token = {
      char: char
    };

    if (index === selectionStart) {
      token.isStart = true;
    }

    if (index === selectionEnd) {
      token.isEnd = true;
    }

    return token;
  });
}

function isAllowedCharacter(token, settings) {
  return !!token.char.match(/\d/) || settings.plusAllowed && token.char === '+' || settings.minusAllowed && token.char === '-' || settings.commaAllowed && (token.char === '.' || token.char === ',' || token.char === settings.decimalSeparator);
}

function cutToken(tokens, index) {
  var token = tokens[index];

  if (token.isStart) {
    tokens[index - 1].isStart = true;
  }

  if (token.isEnd) {
    tokens[index - 1].isEnd = true;
  }

  tokens.splice(index, 1);
  return tokens;
}

function filterAllowedCharacters(tokens, settings) {
  for (var i = tokens.length - 1; i > 0; i--) {
    var currentToken = tokens[i];
    var allowedChar = isAllowedCharacter(currentToken, settings);

    if (!allowedChar) {
      cutToken(tokens, i);
    } else if (currentToken.char === '.' || currentToken.char === ',' || currentToken.char === settings.decimalSeparator) {
      currentToken.char = '.';
    }
  }

  return tokens;
}

function findWholePartStart(tokens) {
  return tokens[1] && !tokens[1].char.match(/\d/) ? 2 : 1;
}

function findWholePart(tokens, settings) {
  var wholePartStart = findWholePartStart(tokens);
  var wholePartEnd = tokens.findIndex(function (token) {
    return token.char === '.';
  });

  if (wholePartEnd === -1) {
    wholePartEnd = tokens.length;
  }

  return [wholePartStart, wholePartEnd];
}

function fillSpaces(tokens, settings) {
  var dontInsertSpaces = settings.dontInsertSpaces;

  if (tokens.length === 1 || dontInsertSpaces) {
    return tokens;
  }

  var _findWholePart = findWholePart(tokens, settings),
      wholePartStart = _findWholePart[0],
      wholePartEnd = _findWholePart[1];

  for (var i = wholePartEnd - DIGIT_GROUP_LENGTH; i > wholePartStart; i -= DIGIT_GROUP_LENGTH) {
    tokens.splice(i, 0, {
      char: DEFAULT_DIGIT_GROUPING_SEPARATOR
    });
  }

  return tokens;
}

function cutIndexes(tokens, indexes) {
  indexes.forEach(function (index) {
    cutToken(tokens, index);
  });
  return tokens;
}

function filterExcessCommas(tokens) {
  var commaIndexes = [];
  var bestCommaFound = false;

  for (var i = tokens.length - 1; i > 0; i--) {
    if (tokens[i].char === '.') {
      if (tokens[i].isStart) {
        bestCommaFound = true;
      } else {
        commaIndexes.push(i);
      }
    }
  }

  if (!bestCommaFound) {
    commaIndexes.shift();
  }

  return cutIndexes(tokens, commaIndexes);
}

var filterExcessSigns = function filterExcessSigns(tokens) {
  var signIndexes = [];
  var bestSignIndex;

  for (var i = tokens.length - 1; i > 0; i--) {
    if (tokens[i].char === '-' || tokens[i].char === '+') {
      if (tokens[i].isStart) {
        bestSignIndex = i;
      } else {
        signIndexes.push(i);

        if (bestSignIndex) {
          bestSignIndex--;
        }
      }
    }
  }

  if (!bestSignIndex) {
    bestSignIndex = signIndexes.pop();
  }

  cutIndexes(tokens, signIndexes);

  if (bestSignIndex && bestSignIndex > 1) {
    var sign = {
      char: tokens[bestSignIndex].char
    };
    cutToken(tokens, bestSignIndex);
    tokens.splice(1, 0, sign);
  }

  return tokens;
};

exports.filterExcessSigns = filterExcessSigns;

var reassembleValue = function reassembleValue(tokens, settings) {
  return tokens.map(function (token) {
    switch (true) {
      case token.char === DEFAULT_DIGIT_GROUPING_SEPARATOR:
        return settings.digitGroupingSeparator;

      case token.char === '.':
        return settings.decimalSeparator;

      default:
        return token.char;
    }
  }).join('');
};

var reassembleInput = function reassembleInput(tokens, settings) {
  return {
    value: reassembleValue(tokens, settings),
    selectionStart: tokens.findIndex(function (token) {
      return token.isStart;
    }),
    selectionEnd: tokens.findIndex(function (token) {
      return token.isEnd;
    })
  };
};

function insertMandatorySign(tokens, settings) {
  if (tokens.length < 2) {
    return tokens;
  }

  var char = tokens[1].char;

  if (char === '+' || char === '-') {
    return tokens;
  }

  if (settings.plusMandatory) {
    tokens.splice(1, 0, {
      char: '+'
    });
    return tokens;
  }

  if (settings.minusMandatory) {
    tokens.splice(1, 0, {
      char: '-'
    });
    return tokens;
  }
}

function shouldUpdateFormat(prevProps, nextProps) {
  var propNames = ['min', 'max', 'showPlus', 'precision', 'digitGroupingSeparator', 'decimalSeparator']; // @ts-ignore

  return !!propNames.find(function (propName) {
    return prevProps[propName] !== nextProps[propName];
  });
}

function numberToInput(number, settings) {
  var numberDecimals = (0, _formatUtils.decimalsCount)(number);
  var value = number.toFixed(settings.precision && numberDecimals < settings.precision ? numberDecimals : settings.precision);
  var selectionStart = value.length;
  var selectionEnd = value.length;

  if (settings.plusAllowed && number > 0) {
    value = "+" + value;
  }

  return {
    value: value,
    selectionStart: selectionStart,
    selectionEnd: selectionEnd
  };
}

function padEndZeroes(tokens, count) {
  while (count--) {
    tokens.push({
      char: '0'
    });
  }

  return tokens;
}

function fixPrecision(tokens) {
  var newTokens = [].concat(tokens);
  var commaIndex = newTokens.findIndex(function (token) {
    return token.char === '.';
  });
  var signsAfterComma = newTokens.length - commaIndex - 1;
  var decimalPartSum = newTokens.reduce(function (sum, _ref2, currentIndex) {
    var char = _ref2.char;

    if (commaIndex < currentIndex) {
      sum += Number(char);
    }

    return sum;
  }, 0);

  if (commaIndex > -1 && !decimalPartSum) {
    newTokens.splice(commaIndex, signsAfterComma + 1);
  }

  return newTokens;
}

function padStartZeroes(tokens, count) {
  var position = tokens[1] && !tokens[1].char.match(/\d/) ? 2 : 1;

  while (count--) {
    tokens.splice(position, 0, {
      char: '0'
    });
  }

  return tokens;
}

function calcMaxLength(props) {
  var min = props.min,
      max = props.max,
      showPlus = props.showPlus,
      precision = props.precision,
      insertSpaces = props.insertSpaces;
  var longestValue = Math.abs(min) >= Math.abs(max) ? min : max;
  var maxLength = Math.abs(longestValue).toString().length;

  if (insertSpaces) {
    maxLength += Math.ceil(maxLength / DIGIT_GROUP_LENGTH) - 1;
  }

  if (longestValue < 0 || showPlus) {
    maxLength += 1;
  }

  if (precision && precision > 0) {
    maxLength += 1 + precision;
  }

  return maxLength;
}

function cutStartZeroes(tokens, count) {
  var pos = findWholePartStart(tokens);

  while (count > 0 && tokens[pos] && tokens[pos].char === '0') {
    cutToken(tokens, pos);
  }

  return tokens;
}

function fixWholePartLength(tokens, settings) {
  var padStartingZeroes = settings.padStartingZeroes,
      wholePartMinLength = settings.wholePartMinLength;

  if (!padStartingZeroes) {
    return tokens;
  }

  var _findWholePart2 = findWholePart(tokens, settings),
      wholePartStart = _findWholePart2[0],
      wholePartEnd = _findWholePart2[1];

  var wholePartLength = wholePartEnd - wholePartStart;
  var count = wholePartMinLength - wholePartLength;

  if (count > 0) {
    padStartZeroes(tokens, count);
  } else if (count < 0) {
    cutStartZeroes(tokens, count);
  }

  return tokens;
}

function formatInput(input, props) {
  var settings = propsToSettings(props);
  var tokens = tokenize(input, settings);
  filterAllowedCharacters(tokens, settings);

  if (settings.commaAllowed) {
    filterExcessCommas(tokens);
  }

  if (settings.plusAllowed || settings.minusAllowed) {
    filterExcessSigns(tokens);
  }

  insertMandatorySign(tokens, settings);
  fillSpaces(tokens, settings);
  return reassembleInput(tokens, settings);
}

function formatNumber(number, props) {
  if ((0, _parse.isEmptyValue)(number)) {
    return '';
  }

  var settings = propsToSettings(props);
  var input = numberToInput(number, settings);
  var tokens = tokenize(input, settings);
  fixWholePartLength(tokens, settings);
  fillSpaces(tokens, settings);
  return reassembleValue(fixPrecision(tokens), settings);
}
/* eslint-enable no-param-reassign */