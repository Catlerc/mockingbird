export declare type InputSelection = Pick<HTMLInputElement, 'value' | 'selectionStart' | 'selectionEnd'>;
export interface FormatProps {
    decimalSeparator?: string;
    digitGroupingSeparator?: string;
    /**
     * Минимальное значение
     */
    min?: number;
    /**
     * Максимальное значение
     */
    max?: number;
    /**
     * Шаг значения
     */
    step?: number | FormatStepFunction;
    /**
     * Отображать ли знак `+`
     */
    showPlus?: boolean;
    /**
     * Количество знаков после запятой.
     * Обязательно нужно задавать, если step < 1
     */
    precision?: number;
    insertSpaces?: boolean;
    padStartingZeroes?: boolean;
}
declare type FormatStepFunction = (value: number | null | undefined, props: FormatProps, count: number) => number;
export interface Settings extends Required<Pick<FormatProps, 'decimalSeparator' | 'digitGroupingSeparator'>> {
    minusAllowed?: boolean;
    plusAllowed?: boolean;
    minusMandatory?: boolean;
    plusMandatory?: boolean;
    commaAllowed?: boolean;
    dontInsertSpaces?: boolean;
    wholePartMinLength: number;
    precision?: number;
    padStartingZeroes?: boolean;
}
export interface Token {
    char: string;
    isStart?: boolean;
    isEnd?: boolean;
    isDecimalPoint?: boolean;
}
export declare type Tokens = Token[];
export {};
