"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.EMPTY_VALUE = void 0;
exports.getEmptyValue = getEmptyValue;
exports.isEmptyValue = isEmptyValue;
exports.minMax = minMax;
exports.normalizeNumber = normalizeNumber;
exports.parseNumber = parseNumber;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _excluded = ["emptyValue"];
var EMPTY_VALUE = null;
exports.EMPTY_VALUE = EMPTY_VALUE;

function getEmptyValue(_ref) {
  var emptyValue = _ref.emptyValue,
      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  return normalizeNumber(emptyValue, props);
}

function normalizeNumber(number, props) {
  var num = number;

  if (isEmptyValue(number)) {
    num = 0;
  }

  var value = minMax(num, props.min, props.max);
  return props.precision ? +value.toFixed(props.precision) : value;
}

function parseNumber(string, props) {
  var number = parseFloat(string.split('').map(function (char) {
    switch (true) {
      case char === (props == null ? void 0 : props.digitGroupingSeparator):
        return '';

      case char === (props == null ? void 0 : props.decimalSeparator):
        return '.';

      default:
        return char;
    }
  }).join('').replace(/^(\D+)0+(\d)/, '$1$2') // вычищаем нули в начале
  );

  if (isEmptyValue(number)) {
    return EMPTY_VALUE;
  }

  return normalizeNumber(number, props || {});
}

function minMax(value, min, max) {
  var newValue = value;

  if (min !== undefined) {
    newValue = Math.max(newValue, min);
  }

  if (max !== undefined) {
    newValue = Math.min(newValue, max);
  }

  return newValue;
}

function isEmptyValue(number) {
  return typeof number !== 'number' || Number.isNaN(number);
}