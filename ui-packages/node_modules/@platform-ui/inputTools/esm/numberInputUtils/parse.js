import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["emptyValue"];
export const EMPTY_VALUE = null;
export function getEmptyValue(_ref) {
  let {
    emptyValue
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  return normalizeNumber(emptyValue, props);
}
export function normalizeNumber(number, props) {
  let num = number;

  if (isEmptyValue(number)) {
    num = 0;
  }

  const value = minMax(num, props.min, props.max);
  return props.precision ? +value.toFixed(props.precision) : value;
}
export function parseNumber(string, props) {
  const number = parseFloat(string.split('').map(char => {
    switch (true) {
      case char === (props == null ? void 0 : props.digitGroupingSeparator):
        return '';

      case char === (props == null ? void 0 : props.decimalSeparator):
        return '.';

      default:
        return char;
    }
  }).join('').replace(/^(\D+)0+(\d)/, '$1$2') // вычищаем нули в начале
  );

  if (isEmptyValue(number)) {
    return EMPTY_VALUE;
  }

  return normalizeNumber(number, props || {});
}
export function minMax(value, min, max) {
  let newValue = value;

  if (min !== undefined) {
    newValue = Math.max(newValue, min);
  }

  if (max !== undefined) {
    newValue = Math.min(newValue, max);
  }

  return newValue;
}
export function isEmptyValue(number) {
  return typeof number !== 'number' || Number.isNaN(number);
}