import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["minWidth", "autoComplete", "value", "placeholder", "cobrowsingSecure", "dataQaType", "refCallback", "ellipsis"];
import React, { forwardRef } from 'react';
import cn from 'classnames';
import styles from './InlineInput.module.css';
import autofillStyles from './autofillHOC.module.css';
const ZERO_WIDTH_SPACE = '\u200B';

const autoCompleteValue = autoCompleteProp => {
  if (typeof autoCompleteProp === 'string') {
    return autoCompleteProp;
  }

  return autoCompleteProp ? 'on' : 'off';
};

const InlineInput = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    minWidth,
    autoComplete,
    value,
    placeholder,
    cobrowsingSecure,
    dataQaType,
    refCallback,
    ellipsis
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  const valuePlaceholder = value || placeholder;
  return /*#__PURE__*/React.createElement("div", {
    className: styles.container,
    style: {
      minWidth
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.value,
    "data-qa-type": `${dataQaType}.text`,
    "data-cobrowsing-secure": cobrowsingSecure ? 'text' : undefined
  }, valuePlaceholder || ZERO_WIDTH_SPACE), /*#__PURE__*/React.createElement("input", Object.assign({}, props, {
    "data-qa-type": `${dataQaType}.input`,
    "data-cobrowsing-secure": cobrowsingSecure ? 'input' : undefined,
    autoComplete: autoComplete !== undefined ? autoCompleteValue(autoComplete) : undefined,
    className: cn({
      [styles.input]: true,
      [autofillStyles.input]: true,
      [styles.input_ellipsis]: ellipsis
    }),
    ref: ref || refCallback,
    value: value
  })));
});
InlineInput.displayName = 'InlineInput';
InlineInput.defaultProps = {
  dataQaType: 'uikit/inlineInput',
  cobrowsingSecure: false
};
export default InlineInput;