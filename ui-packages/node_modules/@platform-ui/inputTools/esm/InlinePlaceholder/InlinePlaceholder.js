import React, { Fragment, useMemo } from 'react';
import cn from 'classnames';
import overrideStyles from '@platform-ui/overrideStyles';
import baseStyles from './InlinePlaceholder.module.css';

const InlinePlaceholder = ({
  input,
  value: _value = '',
  placeholder,
  partialPlaceholder,
  minWidth,
  dataQaType,
  prefix,
  __overrideStyles,
  whiteSpace: _whiteSpace = 'nowrap'
}) => {
  const maskPart = partialPlaceholder && placeholder && typeof placeholder === 'string' && placeholder.substring(_value.length);
  const styles = useMemo(() => overrideStyles(baseStyles, __overrideStyles == null ? void 0 : __overrideStyles.InlinePlaceholder), [__overrideStyles]);
  return /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.root]: true,
      [styles.root_showPlaceholder]: !_value || partialPlaceholder
    }),
    style: {
      minWidth,
      whiteSpace: _whiteSpace
    },
    "data-qa-type": dataQaType
  }, /*#__PURE__*/React.createElement("div", {
    "data-qa-type": `${dataQaType}.wrapper`,
    className: styles.placeholder,
    role: "presentation",
    "aria-hidden": "true"
  }, prefix && /*#__PURE__*/React.createElement("span", {
    className: styles.placeholderPrefix
  }, `${prefix}\u200B`), partialPlaceholder ? /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("span", {
    "data-qa-type": `${dataQaType}.placeholderValue`,
    className: styles.placeholderValue
  }, _value), /*#__PURE__*/React.createElement("span", {
    "data-qa-type": `${dataQaType}.placeholderMask`
  }, maskPart)) : placeholder), /*#__PURE__*/React.createElement("div", null, input));
};

InlinePlaceholder.defaultProps = {
  dataQaType: 'uikit/inlinePlaceholder'
};
export default InlinePlaceholder;