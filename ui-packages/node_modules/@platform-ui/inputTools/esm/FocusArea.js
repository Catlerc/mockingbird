import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["tagName", "onMouseDown"];
import React, { useCallback } from 'react';
const focusableSelector = ['input', 'select', 'textarea', '[tabindex]'].map(selector => `${selector}:not([tabindex="-1"])`).join(',');

const getControl = label => {
  if (label.control) {
    return label.control;
  }

  if (label.htmlFor) {
    return document.getElementById(label.htmlFor);
  }

  return label.querySelector(focusableSelector);
};

const FocusArea = _ref => {
  let {
    tagName = 'div',
    onMouseDown
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  return /*#__PURE__*/React.createElement(tagName, _extends({
    onMouseDown: useCallback(event => {
      const control = getControl(event.currentTarget);

      if (control && !control.contains(event.target)) {
        event.preventDefault();

        if (document.activeElement !== control) {
          control.focus();
        }
      }

      onMouseDown && onMouseDown(event);
    }, [onMouseDown])
  }, props));
};

export default FocusArea;