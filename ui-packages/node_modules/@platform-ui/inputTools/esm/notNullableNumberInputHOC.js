import _extends from "@babel/runtime/helpers/extends";
import React, { Component, forwardRef } from 'react';
import memoizeWeak from '@platform-ui/memoizeWeak';
import hoistStatics from 'hoist-non-react-statics';
import { EMPTY_VALUE, isEmptyValue, getEmptyValue } from './numberInputUtils/parse';
const notNullableNumberInputHOC = memoizeWeak(NumberInput => {
  class NotNullableInput extends Component {
    constructor(props) {
      super(props);

      this.handleChange = (event, params) => {
        let {
          value
        } = params;

        if (isEmptyValue(value)) {
          value = this.state.emptyValue;
          this.setState({
            empty: true
          });
        }

        if (value === this.props.value) {
          return;
        }

        this.props.onChange(event, _extends({}, params, {
          value
        }));
      };

      this.state = {
        empty: false,
        emptyValue: getEmptyValue(props)
      };
    }

    static getDerivedStateFromProps(props, state) {
      const emptyValue = getEmptyValue(props);
      const empty = state.empty && props.focused && props.value === emptyValue;
      return {
        empty,
        emptyValue
      };
    }

    render() {
      const {
        value,
        forwardedRef
      } = this.props;
      const {
        empty
      } = this.state;
      return /*#__PURE__*/React.createElement(NumberInput, Object.assign({}, this.props, {
        ref: forwardedRef,
        value: empty ? EMPTY_VALUE : value,
        onChange: this.handleChange
      }));
    }

  }

  hoistStatics(NotNullableInput, NumberInput);
  return /*#__PURE__*/forwardRef((props, forwardedRef) => {
    return /*#__PURE__*/React.createElement(NotNullableInput, Object.assign({}, props, {
      forwardedRef: forwardedRef
    }));
  });
});
export default notNullableNumberInputHOC;