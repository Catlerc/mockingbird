"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _memoizeWeak = _interopRequireDefault(require("@platform-ui/memoizeWeak"));

var _format = require("./numberInputUtils/format");

var _parse = require("./numberInputUtils/parse");

var _step = require("./numberInputUtils/step");

var _excluded = ["min", "max", "step", "type", "focused", "precision", "showPlus", "padStartingZeroes", "insertSpaces", "forwardedRef", "maxLength", "digitGroupingSeparator", "decimalSeparator"];
var inputTypes = ['text', 'tel'];

var fixInputType = function fixInputType(type) {
  return !type || inputTypes.indexOf(type) === -1 ? 'text' : type;
};

var numberInputHOC = (0, _memoizeWeak.default)(function (InputComponent) {
  // eslint-disable-next-line react/no-unsafe
  var NumberInput = /*#__PURE__*/function (_PureComponent) {
    (0, _inheritsLoose2.default)(NumberInput, _PureComponent);

    function NumberInput(props) {
      var _this;

      _this = _PureComponent.call(this, props) || this;
      _this.inputRef = _this.props.forwardedRef || /*#__PURE__*/(0, _react.createRef)();
      _this.value = _this.props.value;

      _this.handleBackspace = function (event) {
        var input = event.target;
        var value = input.value;

        if (!input.selectionStart || input.selectionStart !== input.selectionEnd) {
          return;
        }

        if (value[input.selectionStart - 1] === _this.props.digitGroupingSeparator) {
          input.selectionStart -= 1;
          input.selectionEnd = input.selectionStart;
        }
      };

      _this.handleDelete = function (event) {
        var input = event.target;
        var value = input.value,
            selectionStart = input.selectionStart,
            selectionEnd = input.selectionEnd;

        if (!input.selectionStart || selectionStart !== selectionEnd) {
          return;
        }

        if (value[input.selectionStart] === _this.props.digitGroupingSeparator) {
          input.selectionStart += 1;
          input.selectionEnd = input.selectionStart;
        }
      };

      _this.handleArrowHorizontal = function (event, dir) {
        var input = event.target;
        var value = input.value;

        if (!input.selectionStart) {
          return;
        }

        if (value[input.selectionStart - 1 + dir] === _this.props.digitGroupingSeparator) {
          input.selectionStart += 2 * dir;
          input.selectionEnd = input.selectionStart;
          event.preventDefault();
        }
      };

      _this.handleArrowVertical = function (event, dir) {
        var _this$props = _this.props,
            name = _this$props.name,
            onChange = _this$props.onChange;
        var value = (0, _step.addStep)(_this.value, _this.props, dir);

        if (value !== _this.value) {
          onChange(event, {
            value: value,
            name: name
          });
        }

        event.preventDefault();
      };

      _this.handleKeyDown = function (event) {
        var onKeyDown = _this.props.onKeyDown;
        var key = event.key.toLowerCase();

        if (!event.shiftKey && !event.altKey && !event.metaKey) {
          switch (key) {
            case 'backspace':
              _this.handleBackspace(event);

              break;

            case 'delete':
              _this.handleDelete(event);

              break;

            case 'arrowleft':
              _this.handleArrowHorizontal(event, -1);

              break;

            case 'arrowright':
              _this.handleArrowHorizontal(event, 1);

              break;

            case 'arrowup':
              _this.handleArrowVertical(event, 1);

              break;

            case 'arrowdown':
              _this.handleArrowVertical(event, -1);

              break;

            default:
              break;
          }
        }

        onKeyDown && onKeyDown(event);
      };

      _this.handleChange = function (event) {
        var input = event.target;
        var _this$props2 = _this.props,
            name = _this$props2.name,
            onChange = _this$props2.onChange;

        var _formatInput = (0, _format.formatInput)({
          value: input.value,
          selectionStart: input.selectionStart,
          selectionEnd: input.selectionEnd
        }, _this.props),
            formattedValue = _formatInput.value,
            selectionStart = _formatInput.selectionStart,
            selectionEnd = _formatInput.selectionEnd;

        input.value = formattedValue;
        input.selectionStart = selectionStart;
        input.selectionEnd = selectionEnd;

        if (formattedValue !== _this.state.formattedValue) {
          _this.setState({
            formattedValue: formattedValue
          });
        }

        var numberValue = (0, _parse.parseNumber)(formattedValue, _this.props);
        _this.value = numberValue;
        onChange && onChange(event, {
          name: name,
          value: numberValue
        });
      };

      _this.state = {
        formattedValue: (0, _format.formatNumber)(_this.value, props)
      };
      return _this;
    }

    var _proto = NumberInput.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var focused = this.props.focused;

      if (focused) {
        this.focus();
      }
    };

    _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
      var focused = this.props.focused;
      var value = nextProps.value;
      var blurred = focused && !nextProps.focused;

      if (!(0, _format.shouldUpdateFormat)(this.props, nextProps) && !blurred && value === this.value) {
        return;
      }

      this.value = value;
      this.setState({
        formattedValue: (0, _format.formatNumber)(value, nextProps)
      });
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var focused = this.props.focused;

      if (prevProps.focused === focused) {
        return;
      }

      if (focused) {
        this.focus();
      } else {
        this.blur();
      }
    };

    _proto.focus = function focus() {
      this.inputRef && this.inputRef.current && this.inputRef.current !== document.activeElement && this.inputRef.current.focus && this.inputRef.current.focus();
    };

    _proto.blur = function blur() {
      this.inputRef && this.inputRef.current && this.inputRef.current === document.activeElement && this.inputRef.current.blur && this.inputRef.current.blur();
    };

    _proto.render = function render() {
      var formattedValue = this.state.formattedValue;
      var _this$props3 = this.props,
          min = _this$props3.min,
          max = _this$props3.max,
          step = _this$props3.step,
          type = _this$props3.type,
          focused = _this$props3.focused,
          precision = _this$props3.precision,
          showPlus = _this$props3.showPlus,
          padStartingZeroes = _this$props3.padStartingZeroes,
          insertSpaces = _this$props3.insertSpaces,
          forwardedRef = _this$props3.forwardedRef,
          maxLength = _this$props3.maxLength,
          digitGroupingSeparator = _this$props3.digitGroupingSeparator,
          decimalSeparator = _this$props3.decimalSeparator,
          props = (0, _objectWithoutPropertiesLoose2.default)(_this$props3, _excluded);
      return /*#__PURE__*/_react.default.createElement(InputComponent, Object.assign({}, props, {
        ref: this.inputRef,
        type: fixInputType(type),
        value: formattedValue,
        inputMode: "numeric",
        maxLength: maxLength || (0, _format.calcMaxLength)(this.props),
        onChange: this.handleChange,
        onKeyDown: this.handleKeyDown
      }));
    };

    return NumberInput;
  }(_react.PureComponent);

  NumberInput.defaultProps = {
    value: undefined,
    focused: false,
    min: -(Math.pow(2, 53) - 1),
    // Number.MIN_SAFE_INTEGER не поддерживается в IE 11
    max: Math.pow(2, 53) - 1,
    // Number.MAX_SAFE_INTEGER не поддерживается в IE 11
    step: 1,
    type: 'text',
    precision: 0,
    insertSpaces: true,
    padStartingZeroes: false,
    showPlus: false,
    forwardedRef: undefined,
    digitGroupingSeparator: _format.DEFAULT_DIGIT_GROUPING_SEPARATOR,
    decimalSeparator: _format.DEFAULT_DECIMAL_SEPARATOR
  };
  var NumberInputWithRef = /*#__PURE__*/(0, _react.forwardRef)(function (props, forwardedRef) {
    return /*#__PURE__*/_react.default.createElement(NumberInput, Object.assign({}, props, {
      forwardedRef: forwardedRef
    }));
  });
  return (0, _hoistNonReactStatics.default)(NumberInput, NumberInputWithRef);
});
var _default = numberInputHOC;
exports.default = _default;