import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["size", "theme", "inGroup", "vertical", "clickable", "fillHeight", "flatCorners", "children", "footer", "buttonText", "buttonHref", "buttonDisabled", "dataQaType", "onButtonClick", "onClick", "collapsible", "defaultCollapsed", "expandButtonText", "collapseButtonText", "collapseMinHeight", "collapseDuration"];
import React, { useState } from 'react';
import cn from 'classnames';
import * as corners from '@platform-ui/flatCorners';
import CollapseBlock from '@platform-ui/collapseBlock';
import Link from '@platform-ui/link';
import SizeContext from './Island.context';
import IslandContent from './IslandContent/IslandContent';
import IslandFooterButton from './IslandFooterButton/IslandFooterButton';
import styles from './Island.module.css';
import { DEFAULT_PROPS } from './types';

const Island = props => {
  const {
    size,
    theme,
    inGroup,
    vertical,
    clickable,
    fillHeight,
    flatCorners,
    children,
    footer,
    buttonText,
    buttonHref,
    buttonDisabled,
    dataQaType,
    onButtonClick,
    onClick,
    collapsible,
    defaultCollapsed,
    expandButtonText,
    collapseButtonText,
    collapseMinHeight,
    collapseDuration
  } = props,
        contentProps = _objectWithoutPropertiesLoose(props, _excluded);

  const [collapsed, setCollapsed] = useState(defaultCollapsed);
  const groupDirection = inGroup && (vertical ? 'vertical' : 'horizontal');

  const handleExpandClick = () => {
    setCollapsed(!collapsed);
  };

  return /*#__PURE__*/React.createElement(SizeContext.Provider, {
    value: size
  }, /*#__PURE__*/React.createElement("div", {
    onClick: clickable ? onClick : undefined,
    className: cn({
      [styles.island]: true,
      [styles.island_clickable]: clickable,
      [styles.island_fillHeight]: fillHeight,
      [styles[`island_size_${size}`]]: true,
      [styles[`island_theme_${theme}`]]: true,
      [styles.island_inGroup]: inGroup,
      [styles[`island_inGroup_${groupDirection}`]]: groupDirection,
      [styles.island_collapsed]: collapsible && collapsed
    }),
    "data-qa-type": dataQaType,
    style: corners.style(flatCorners)
  }, collapsible ? /*#__PURE__*/React.createElement("div", {
    className: styles.collapseBlockContainer,
    style: {
      animationDuration: `${collapseDuration}ms`
    }
  }, /*#__PURE__*/React.createElement(CollapseBlock, {
    collapsed: collapsed,
    duration: collapseDuration,
    removeCollapsedContent: false,
    minHeight: collapseMinHeight
  }, children || /*#__PURE__*/React.createElement(IslandContent, contentProps))) : children || /*#__PURE__*/React.createElement(IslandContent, contentProps), !collapsible ? null : /*#__PURE__*/React.createElement("div", {
    className: styles.expandControls
  }, /*#__PURE__*/React.createElement(Link, {
    onClick: handleExpandClick
  }, collapsed ? expandButtonText : collapseButtonText)), !!(footer || buttonText) && /*#__PURE__*/React.createElement("footer", {
    className: styles.footer
  }, footer, buttonText && /*#__PURE__*/React.createElement(IslandFooterButton, {
    href: buttonHref,
    onClick: onButtonClick,
    disabled: buttonDisabled
  }, buttonText))));
};

Island.defaultProps = DEFAULT_PROPS;
export default Island;