import type React from 'react';
export declare const SIZES: readonly ["s", "m", "l"];
export declare const ALIGNS: readonly ["left", "center"];
export declare const OFFSETS: readonly [20, 16];
export declare const THEMES: readonly ["default", "gray", "shadow"];
export declare type IslandProps = {
    /**
     * Размер острова
     * `m` – заголовок 21px, текст 15px (по-умолчанию)
     * `s` – заголовок 15px, текст 13px
     */
    size?: typeof SIZES[number];
    /**
     * Тема
     * `default` – тема по-умолчанию, серая граница, белый фон
     * `gray` – серый фон, без видимой границы
     */
    theme?: typeof THEMES[number];
    /**
     * Остров в группе
     */
    inGroup?: boolean;
    /**
     * Вертикальное расположение
     */
    vertical?: boolean;
    /**
     *  Позволяет убирать скругление углов
     */
    flatCorners?: string;
    /**
     * Выравнивание текста
     * `left` – по левому краю, может быть колонка справа (по-умолчанию)
     * `center` – по центру, всегда в одну колонку
     */
    align?: typeof ALIGNS[number];
    /**
     * Подсветка при наведении (по-умолчанию выключена)
     */
    clickable?: boolean;
    /**
     * Растягивание по высоте родителя (по-умолчанию выключено)
     */
    fillHeight?: boolean;
    /**
     * Содержимое острова.
     * В случае задания `children` свойства `picture`, `caption`, `title`, `text`, `body` и `side` игнорируются.
     */
    children?: React.ReactNode;
    /**
     * Картинка (как правило, компонент `Icon`)
     */
    picture?: React.ReactNode;
    /**
     * Заголовок капсом
     */
    caption?: React.ReactNode;
    /**
     * Обычный заголовок
     */
    title?: React.ReactNode;
    /**
     * Текст
     */
    text?: React.ReactNode;
    /**
     * Cодержимое, идущее после текста
     */
    body?: React.ReactNode;
    /**
     * Содержимое в правой колонке после `picture` в случае `align='left'`
     * и после `body` в случае `align='center'`
     */
    side?: React.ReactNode;
    /**
     * Содержимое в нижней части острова.
     * Прибивается к низу в случае `fillHeight={true}`.
     * При наличии кнопки в футере располагается перед ней.
     */
    footer?: React.ReactNode;
    /**
     * Содержимое нижней части.
     * Отличается от `footer` наличием отступов сверху и по бокам.
     * Если заданы оба свойства, первым идёт `footerBody`.
     */
    footerBody?: React.ReactNode;
    /**
     * Текст на кнопке в футере.
     * Если не задан, кнопка не рендерится.
     */
    buttonText?: React.ReactNode;
    /**
     * Ссылка с кнопки в футере.
     * Если задан, кнопка становится элементом `a` вместо `button`.
     */
    buttonHref?: string;
    /**
     * Задизейблена ли кнопка
     */
    buttonDisabled?: boolean;
    /**
     * Атрибут data-qa-type
     */
    dataQaType?: string;
    /**
     * Обработчик клика по кнопке
     */
    onButtonClick?: (event: React.MouseEvent) => void;
    /**
     * Обработчик клика по всему острову, работает в случае clickable: true
     */
    onClick?: () => void;
    /**
     * Отступ кастомного содержимого
     */
    bodyOffset?: typeof OFFSETS[number];
    /**
     * Флаг, включающий обтекание бокового содержимого
     */
    floatingSide?: boolean;
    /**
     * Флаг, включающий возможность схлопывания элемента
     */
    collapsible?: boolean;
    /**
     * Флаг состояния схлопывания элемента по-умолчанию.
     * Работает, если включен флаг `collapsible`.
     * Если `true` — элемент схлопнут.
     */
    defaultCollapsed?: boolean;
    /**
     * Текст для кнопки "Показать больше".
     */
    expandButtonText?: string;
    /**
     * Текст для кнопки "Скрыть".
     */
    collapseButtonText?: string;
    /**
     * Минимальная высота схлопнутого блока.
     */
    collapseMinHeight?: number;
    /**
     * Продолжительность анимации (в ms).
     */
    collapseDuration?: number;
};
export declare const DEFAULT_PROPS: {
    size: "s";
    theme: "default";
    align: "left";
    dataQaType: string;
    bodyOffset: 20;
    defaultCollapsed: boolean;
    expandButtonText: string;
    collapseButtonText: string;
    collapseMinHeight: number;
    collapseDuration: number;
};
