import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["dataQaType", "pseudo", "theme"];
import React, { forwardRef } from 'react';
import cn from 'classnames';
import Clickable from '@platform-ui/clickable';
import styles from './Link.module.css';
export const THEMES = ['default', 'light', 'dark'];
const Link = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    dataQaType,
    pseudo,
    theme
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const themeType = typeof theme !== 'object' ? theme : 'custom';
  const customTheme = theme;
  const style = {
    '--tds-component--link--color--default': customTheme.color || 'var(--tds-color-link)',
    '--tds-component--link--color--hover': customTheme.colorHover || customTheme.color || 'var(--tds-color-link-hover)',
    '--tds-component--link--color--focus': customTheme.colorFocus || customTheme.color || 'var(--tds-color-link)',
    '--tds-component--link--background-color--default': customTheme.backgroundColor || 'transparent',
    '--tds-component--link--background-color--hover': customTheme.backgroundColorHover || 'transparent',
    '--tds-component--link--background-color--focus': customTheme.backgroundColorFocus || 'var(--tds-color-warning-bg)'
  };
  return /*#__PURE__*/React.createElement(Clickable, Object.assign({}, otherProps, {
    dataQaType: dataQaType,
    className: cn(styles.link, {
      [styles[`link_theme_${themeType}`]]: themeType,
      [styles.link_pseudo]: pseudo,
      [styles.link_disabled]: otherProps.disabled
    }),
    innerClassName: styles.inner,
    innerDataQaType: `${dataQaType}.inner`,
    style: typeof theme === 'object' ? style : {},
    ref: ref
  }));
});
Link.defaultProps = {
  dataQaType: 'uikit/link',
  theme: 'default'
};
Link.displayName = 'Link';
export default Link;