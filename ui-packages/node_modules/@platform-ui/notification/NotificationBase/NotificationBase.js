"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = exports.TYPES = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _iconsPack = require("@platform-ui/iconsPack");

var _loader = _interopRequireDefault(require("@platform-ui/loader"));

var _collapseBlock = _interopRequireDefault(require("@platform-ui/collapseBlock"));

var _utils = require("../utils");

var _NotificationBaseButtons = _interopRequireDefault(require("./NotificationBaseButtons"));

var _NotificationBaseModule = _interopRequireDefault(require("./NotificationBase.module.css"));

var TYPES = {
  INFO: 'info',
  SUCCESS: 'success',
  WARNING: 'warning',
  ERROR: 'error'
};
exports.TYPES = TYPES;
var ICON_TYPE = {
  info: /*#__PURE__*/_react.default.createElement(_iconsPack.Int16AttentionFilled, {
    rotate: 180,
    verticalAlign: "middle"
  }),
  success: /*#__PURE__*/_react.default.createElement(_iconsPack.Int16SuccessFilled, {
    verticalAlign: "middle"
  }),
  error: /*#__PURE__*/_react.default.createElement(_iconsPack.Int16CloseCircleFilled, {
    verticalAlign: "middle"
  }),
  warning: /*#__PURE__*/_react.default.createElement(_iconsPack.Int16AttentionFilled, {
    verticalAlign: "middle"
  })
};

var NotificationBase = function NotificationBase(props) {
  var _classNames, _classNames2, _classNames3;

  var actionText = props.actionText,
      animateFirstRender = props.animateFirstRender,
      cancelText = props.cancelText,
      children = props.children,
      _props$dataQaType = props.dataQaType,
      dataQaType = _props$dataQaType === void 0 ? 'uikit/NotificationBase' : _props$dataQaType,
      delayCollapse = props.delayCollapse,
      _props$durationCollap = props.durationCollapse,
      durationCollapse = _props$durationCollap === void 0 ? 0 : _props$durationCollap,
      _props$hideOnAction = props.hideOnAction,
      hideOnAction = _props$hideOnAction === void 0 ? true : _props$hideOnAction,
      _props$hideOnCancel = props.hideOnCancel,
      hideOnCancel = _props$hideOnCancel === void 0 ? true : _props$hideOnCancel,
      icon = props.icon,
      _props$modStyles = props.modStyles,
      modStyles = _props$modStyles === void 0 ? {} : _props$modStyles,
      overflowHiddenCollapse = props.overflowHiddenCollapse,
      _props$paddingBottom = props.paddingBottom,
      paddingBottom = _props$paddingBottom === void 0 ? 0 : _props$paddingBottom,
      _props$showClose = props.showClose,
      showClose = _props$showClose === void 0 ? true : _props$showClose,
      _props$timer = props.timer,
      timer = _props$timer === void 0 ? 30000 : _props$timer,
      title = props.title,
      _props$type = props.type,
      type = _props$type === void 0 ? TYPES.INFO : _props$type,
      _props$visibleCollaps = props.visibleCollapse,
      visibleCollapse = _props$visibleCollaps === void 0 ? true : _props$visibleCollaps,
      _props$withIcon = props.withIcon,
      withIcon = _props$withIcon === void 0 ? true : _props$withIcon,
      onActionConfirm = props.onActionConfirm,
      onCancel = props.onCancel,
      onHide = props.onHide,
      onClose = props.onClose;

  var _useState = (0, _react.useState)(false),
      loading = _useState[0],
      setLoading = _useState[1];

  var _useState2 = (0, _react.useState)(true),
      mounted = _useState2[0],
      setMounted = _useState2[1];

  var _useState3 = (0, _react.useState)(animateFirstRender),
      visible = _useState3[0],
      setVisible = _useState3[1];

  var shouldHideOnClose = (0, _react.useCallback)(function (fromButton) {
    return Boolean(!fromButton || fromButton === 'action' && hideOnAction || fromButton === 'cancel' && hideOnCancel);
  }, [hideOnAction, hideOnCancel]);
  var handleClose = (0, _react.useCallback)(function (fromButton) {
    setVisible(!shouldHideOnClose(fromButton));
    setLoading(false);
  }, [shouldHideOnClose]);

  var _useTimer = (0, _utils.useTimer)(handleClose, timer),
      setTimer = _useTimer.setTimer,
      pauseTimer = _useTimer.pauseTimer;

  var getHandler = (0, _react.useCallback)(function (event, fromButton, callback) {
    event.preventDefault();
    var result = callback && callback(event);

    if (result instanceof Promise) {
      setLoading(true);
      result.then(function () {
        return handleClose(fromButton);
      }).catch(function () {
        setLoading(false);
      });
    } else {
      handleClose(fromButton);
    }
  }, [handleClose]);

  var handleActionClick = function handleActionClick(event) {
    return getHandler(event, 'action', onActionConfirm);
  };

  var handleCancelClick = function handleCancelClick(event) {
    return getHandler(event, 'cancel', onCancel);
  };

  var handleIconClose = function handleIconClose(event) {
    handleClose();
    onClose && onClose(event);
  };

  var handleAnimationEnd = function handleAnimationEnd(event) {
    setMounted(false);
    onHide && onHide(event);
  };

  var handleMouseEnter = function handleMouseEnter() {
    pauseTimer();
  };

  var handleMouseLeave = function handleMouseLeave() {
    setTimer();
  };

  var handleDocumentVisibilityChange = function handleDocumentVisibilityChange() {
    if (document.visibilityState === 'visible') {
      setTimer();
    } else {
      pauseTimer();
    }
  };

  (0, _react.useEffect)(function () {
    setTimer();
    setVisible(true);
    document.addEventListener('visibilitychange', handleDocumentVisibilityChange);
    return function () {
      document.removeEventListener('visibilitychange', handleDocumentVisibilityChange);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return mounted ? /*#__PURE__*/_react.default.createElement(_collapseBlock.default, {
    duration: durationCollapse,
    delay: !visibleCollapse ? 0 : delayCollapse,
    overflowHidden: overflowHiddenCollapse,
    collapsed: !visibleCollapse || !visible,
    onTransitionEnd: !visible ? handleAnimationEnd : undefined
  }, /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)(props), {
    style: {
      paddingBottom: paddingBottom
    },
    className: (0, _classnames.default)((_classNames = {}, _classNames[_NotificationBaseModule.default.wrapper] = true, _classNames[_NotificationBaseModule.default.wrapper_visible] = visible, _classNames[_NotificationBaseModule.default.wrapper_hidden] = !visible, _classNames[modStyles.wrapper] = true, _classNames[modStyles.wrapper_visible] = visible, _classNames[modStyles.wrapper_hidden] = !visible, _classNames)),
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)((_classNames2 = {}, _classNames2[_NotificationBaseModule.default.alert] = true, _classNames2[_NotificationBaseModule.default["alert_" + type]] = true, _classNames2[modStyles.alert] = true, _classNames2))
  }, !!withIcon && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)((_classNames3 = {}, _classNames3[_NotificationBaseModule.default.icon] = true, _classNames3[_NotificationBaseModule.default.icon_title] = !!title, _classNames3))
  }, icon || ICON_TYPE[type]), /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType + ".contentWrapper"
  }), {
    className: _NotificationBaseModule.default.contentWrapper
  }), !!title && /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType + ".title"
  }), {
    className: _NotificationBaseModule.default.title
  }), title), !!children && /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType + ".content"
  }), {
    className: _NotificationBaseModule.default.content
  }), children), /*#__PURE__*/_react.default.createElement(_NotificationBaseButtons.default, {
    actionText: actionText,
    cancelText: cancelText,
    onActionConfirm: handleActionClick,
    onCancel: handleCancelClick
  })), !!showClose && /*#__PURE__*/_react.default.createElement("span", {
    role: "button",
    className: _NotificationBaseModule.default.closeIcon,
    onClick: handleIconClose
  }, /*#__PURE__*/_react.default.createElement(_iconsPack.Int16Close, null)), loading ? /*#__PURE__*/_react.default.createElement(_loader.default, {
    size: "l",
    overlay: true
  }) : undefined))) : null;
}; // TODO: убрать в мажорном обновлении


NotificationBase.defaultProps = {
  dataQaType: 'uikit/NotificationBase',
  visibleCollapse: true,
  paddingBottom: 0,
  timer: 30000,
  type: TYPES.INFO,
  showClose: true,
  modStyles: {},
  animateFirstRender: false,
  withIcon: true,
  hideOnAction: true,
  hideOnCancel: true
};
var _default = NotificationBase;
exports.default = _default;