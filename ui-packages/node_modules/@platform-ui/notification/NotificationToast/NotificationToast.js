"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _draggable = _interopRequireDefault(require("@platform-ui/draggable"));

var _NotificationBase = _interopRequireDefault(require("../NotificationBase/NotificationBase"));

var _NotificationToastModule = _interopRequireDefault(require("./NotificationToast.module.css"));

var _excluded = ["dataQaType", "animateFirstRender", "delayCollapse", "modStyles", "overflowHiddenCollapse", "paddingBottom"];
var HIDDEN_POINT = 50;
var OPACITY_POINT = 100;

var getOffsetLeft = function getOffsetLeft(drag) {
  return drag.offset.x - (drag.start ? drag.start.offset.x : 0);
};

var NotificationToast = function NotificationToast(props) {
  var _props$dataQaType = props.dataQaType,
      dataQaType = _props$dataQaType === void 0 ? 'uikit/NotificationToast' : _props$dataQaType,
      _props$animateFirstRe = props.animateFirstRender,
      animateFirstRender = _props$animateFirstRe === void 0 ? false : _props$animateFirstRe,
      _props$delayCollapse = props.delayCollapse,
      delayCollapse = _props$delayCollapse === void 0 ? 250 : _props$delayCollapse,
      _props$modStyles = props.modStyles,
      modStyles = _props$modStyles === void 0 ? _NotificationToastModule.default : _props$modStyles,
      _props$overflowHidden = props.overflowHiddenCollapse,
      overflowHiddenCollapse = _props$overflowHidden === void 0 ? false : _props$overflowHidden,
      _props$paddingBottom = props.paddingBottom,
      paddingBottom = _props$paddingBottom === void 0 ? 0 : _props$paddingBottom,
      restProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);

  var _useState = (0, _react.useState)(true),
      visible = _useState[0],
      setVisible = _useState[1];

  var _useState2 = (0, _react.useState)(true),
      mounted = _useState2[0],
      setMounted = _useState2[1];

  var containerRef = (0, _react.useRef)(null);
  var setContainerStyles = (0, _react.useCallback)(function (offsetLeft, transition, opacity) {
    if (offsetLeft === void 0) {
      offsetLeft = 0;
    }

    if (transition === void 0) {
      transition = '';
    }

    if (opacity === void 0) {
      opacity = 1;
    }

    if (!containerRef.current) {
      return;
    }

    var trasnformVal = "translate3d(" + offsetLeft + "px, 0, 0)";
    containerRef.current.style.webkitTransform = trasnformVal;
    containerRef.current.style.transform = trasnformVal;
    containerRef.current.style.webkitTransition = transition;
    containerRef.current.style.transition = transition;
    containerRef.current.style.opacity = "" + opacity;
  }, []);
  var handleDrag = (0, _react.useCallback)(function (drag) {
    if (!containerRef.current) {
      return;
    }

    var offsetLeft = Math.max(0, getOffsetLeft(drag));
    var opacity = 1 - offsetLeft / containerRef.current.offsetWidth * 100 / OPACITY_POINT;
    setContainerStyles(offsetLeft, '', opacity);
  }, [setContainerStyles]);
  var handleDragEnd = (0, _react.useCallback)(function (drag) {
    var transition = 'transform .25s, opacity .25s';

    if (containerRef.current && HIDDEN_POINT <= getOffsetLeft(drag) / containerRef.current.offsetWidth * 100) {
      setVisible(false);
      setContainerStyles(containerRef.current.offsetWidth, transition, 0);
      return;
    }

    setContainerStyles(0, transition, 1);
  }, [setContainerStyles]);

  var handleHide = function handleHide(event) {
    var onHide = props.onHide;

    if (mounted) {
      setMounted(false);
      onHide && onHide(event);
    }
  };

  var handleTransitionEnd = function handleTransitionEnd(event) {
    if (!visible) {
      handleHide(event);
    }
  };

  return mounted ? /*#__PURE__*/_react.default.createElement(_draggable.default, {
    onDrag: handleDrag,
    onDragEnd: handleDragEnd,
    dragThreshold: 10,
    touchable: true,
    allowDefaultAction: true
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: containerRef,
    onTransitionEnd: handleTransitionEnd,
    "data-qa-type": dataQaType
  }, /*#__PURE__*/_react.default.createElement(_NotificationBase.default, Object.assign({}, restProps, {
    animateFirstRender: animateFirstRender,
    delayCollapse: delayCollapse,
    modStyles: modStyles,
    onHide: handleHide,
    overflowHiddenCollapse: overflowHiddenCollapse,
    paddingBottom: paddingBottom,
    visibleCollapse: visible
  })))) : null;
}; // TODO: убрать в мажорном обновлении


NotificationToast.defaultProps = (0, _extends2.default)({}, _NotificationBase.default.defaultProps, {
  animateFirstRender: false,
  dataQaType: 'uikit/NotificationToast',
  modStyles: _NotificationToastModule.default,
  overflowHiddenCollapse: false,
  delayCollapse: 250,
  paddingBottom: 0
});
var _default = NotificationToast;
exports.default = _default;