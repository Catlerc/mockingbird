import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef } from 'react';
import omit from '@tinkoff/utils/object/omit';
import Link from '@platform-ui/link';
import Icon from './Icon';
import Button from './Button';
import useButtonStyle from './useButtonStyles';

const dropKeysFromObject = (o, keys) => {
  const copy = _extends({}, o);

  keys.forEach(key => delete copy[key]);
  return copy;
};

const ButtonLink = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    dataQaData,
    dataQaType,
    type,
    size,
    icon,
    children,
    onClick,
    onMouseLeave,
    onMouseOver,
    innerRef,
    href,
    progressiveFill,
    pseudo,
    disabled,
    name,
    theme,
    target,
    rel,
    download,
    tabIndex
  } = props;
  const linkProps = {
    onClick,
    onMouseLeave,
    onMouseOver,
    type,
    href,
    pseudo,
    disabled,
    name,
    theme,
    target,
    rel,
    download,
    tabIndex
  };
  const styleProps = dropKeysFromObject(props, ['disabled', 'theme', 'pseudo', 'href']);
  const buttonStyles = useButtonStyle(_extends({}, styleProps, {
    isButtonLink: true
  }));
  return /*#__PURE__*/React.createElement("div", {
    className: buttonStyles.button.className,
    style: buttonStyles.button.style,
    "data-size": size,
    "data-qa-data": dataQaData,
    "data-qa-type": dataQaType
  }, /*#__PURE__*/React.createElement("span", {
    className: buttonStyles.buttonWrapper.className
  }, /*#__PURE__*/React.createElement(Link, Object.assign({}, linkProps, {
    ref: ref,
    innerRef: innerRef
  }), progressiveFill ? /*#__PURE__*/React.createElement("span", {
    className: buttonStyles.progressiveFillContainer.className
  }, /*#__PURE__*/React.createElement("span", {
    "data-qa-type": `${dataQaType}.progressiveFill`,
    className: buttonStyles.progressiveFill.className,
    style: buttonStyles.progressiveFill.style
  })) : null, icon && /*#__PURE__*/React.createElement("span", {
    className: buttonStyles.icon.className,
    "data-qa-type": `${dataQaType}.icon`
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: icon
  })), children && /*#__PURE__*/React.createElement("span", {
    className: buttonStyles.content.className,
    "data-qa-type": `${dataQaType}.content`
  }, children))));
});
ButtonLink.defaultProps = _extends({}, omit(['theme'], Button.defaultProps)); // TODO: разобраться как подружить сборку TS и displayName

ButtonLink.displayName = 'ButtonLink';
export default ButtonLink;