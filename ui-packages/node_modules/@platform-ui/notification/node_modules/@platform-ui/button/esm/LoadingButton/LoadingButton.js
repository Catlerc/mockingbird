import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["loading", "size", "children", "icon"];
import React from 'react';
import cn from 'classnames';
import Loader from '@platform-ui/loader';
import Button from '../Button';
import styles from './LoadingButton.module.css';

const getLoaderSize = size => {
  if (size === 'm' || size === 's') {
    return 's';
  }

  if (size === 'xs') {
    return 'xs';
  }

  return 'm';
};

const LoadingButton = _ref => {
  let {
    loading,
    size,
    children,
    icon
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  const loaderSize = React.useMemo(() => getLoaderSize(size), [size]);
  const LoaderIcon = /*#__PURE__*/React.createElement("span", {
    className: cn({
      [styles.loader]: true,
      [styles.hidden]: !loading
    })
  }, /*#__PURE__*/React.createElement(Loader, {
    size: loaderSize,
    color: "current"
  }));
  /*
     если в кнопке помимо иконки есть контент, то в состоянии загрузки скрываем иконку
     если контента кроме иконки нет, то в сосотянии загрузки заменяем иконку на loader
  */

  return /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {
    ariaBusy: !!loading,
    size: size,
    icon: icon ? /*#__PURE__*/React.createElement("span", {
      className: cn({
        [styles.hidden]: loading && children
      })
    }, loading && !children ? LoaderIcon : icon) : null
  }), children && /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("span", {
    className: cn({
      [styles.hidden]: loading
    })
  }, children), loading && LoaderIcon));
};

LoadingButton.defaultProps = _extends({}, Button.defaultProps); // TODO: разобраться как подружить сборку TS и displayName

LoadingButton.displayName = 'LoadingButton';
export default LoadingButton;