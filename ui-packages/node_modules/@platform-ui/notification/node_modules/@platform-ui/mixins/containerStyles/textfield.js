"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _baseTypeStyles, _hoverTypeStyles, _focusTypeStyles, _disabledTypeStyles, _errorTypeStyles, _errorHoverTypeStyles, _errorFocusTypeStyles, _successFocusTypeStyl, _readOnlyTypeStyles, _readOnlyHoverTypeSty, _readOnlyFocusTypeSty, _autofillTypeStyles, _autofillInputTypeSty, _transparentTypeStyle;

var TEXTFIELD_TYPES = {
  DEFAULT: 'default',
  MONO: 'mono',
  LIGHT: 'light',
  DARK: 'dark'
};
var TRANSITION_DURATION = '.25s';
var TRANSITION_FUNCTION = 'ease';
var baseStyles = {
  color: 'var(--tds-color-base-08)',
  'transition-property': 'background-color, border-color',
  'transition-duration': TRANSITION_DURATION,
  'transition-timing-function': TRANSITION_FUNCTION
};
var baseTypeStyles = (_baseTypeStyles = {}, _baseTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  border: '1px solid var(--tds-color-secondary)',
  'background-color': 'var(--tds-color-secondary)'
}, _baseTypeStyles[TEXTFIELD_TYPES.MONO] = {
  border: '1px solid var(--tds-color-base-01)',
  'background-color': 'var(--tds-color-base-01)'
}, _baseTypeStyles[TEXTFIELD_TYPES.LIGHT] = {
  border: '1px solid color(var(--color-blank-white) a(16%))',
  'background-color': 'color(var(--color-blank-white) a(16%))',
  color: 'var(--color-blank-white)'
}, _baseTypeStyles[TEXTFIELD_TYPES.DARK] = {
  border: '1px solid color(var(--tds-color-base-08) a(16%))',
  'background-color': 'color(var(--tds-color-base-08) a(16%))'
}, _baseTypeStyles);
var hoverTypeStyles = (_hoverTypeStyles = {}, _hoverTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  'border-color': 'var(--tds-color-secondary-hover)',
  'background-color': 'var(--tds-color-secondary-hover)'
}, _hoverTypeStyles[TEXTFIELD_TYPES.MONO] = {
  'border-color': 'var(--tds-color-base-01)',
  'background-color': 'var(--tds-color-base-01)'
}, _hoverTypeStyles[TEXTFIELD_TYPES.LIGHT] = {
  'border-color': 'color(var(--color-blank-white) a(24%))',
  'background-color': 'color(var(--color-blank-white) a(24%))'
}, _hoverTypeStyles[TEXTFIELD_TYPES.DARK] = {
  'border-color': 'color(var(--tds-color-base-08) a(24%))',
  'background-color': 'color(var(--tds-color-base-08) a(24%))'
}, _hoverTypeStyles);
var focusTypeStyles = (_focusTypeStyles = {}, _focusTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  'border-color': 'var(--tds-color-focus)',
  'background-color': 'var(--tds-color-base-01)'
}, _focusTypeStyles[TEXTFIELD_TYPES.LIGHT] = {
  'border-color': 'var(--color-blank-white)',
  'background-color': 'transparent'
}, _focusTypeStyles[TEXTFIELD_TYPES.DARK] = {
  'border-color': 'var(--tds-color-base-08)',
  'background-color': 'transparent'
}, _focusTypeStyles);
var disabledTypeStyles = (_disabledTypeStyles = {}, _disabledTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  opacity: '.56'
}, _disabledTypeStyles[TEXTFIELD_TYPES.LIGHT] = {
  'border-color': 'color(var(--color-blank-white) a(8%))',
  'background-color': 'color(var(--color-blank-white) a(8%))'
}, _disabledTypeStyles[TEXTFIELD_TYPES.DARK] = {
  'border-color': 'color(var(--tds-color-base-08) a(8%))',
  'background-color': 'color(var(--tds-color-base-08) a(8%))'
}, _disabledTypeStyles);
var errorTypeStyles = (_errorTypeStyles = {}, _errorTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  border: '1px solid transparent',
  'background-color': 'var(--tds-color-error-bg)'
}, _errorTypeStyles[TEXTFIELD_TYPES.LIGHT] = {
  'border-color': 'var(--color-blank-white)'
}, _errorTypeStyles[TEXTFIELD_TYPES.DARK] = {
  'border-color': 'var(--tds-color-base-08)'
}, _errorTypeStyles);
var errorHoverTypeStyles = (_errorHoverTypeStyles = {}, _errorHoverTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  'border-color': 'transparent',
  'background-color': 'var(--tds-color-error-bg-hover)'
}, _errorHoverTypeStyles);
var errorFocusTypeStyles = (_errorFocusTypeStyles = {}, _errorFocusTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  'border-color': 'var(--tds-color-error-fill)',
  'background-color': 'var(--tds-color-base-01)'
}, _errorFocusTypeStyles);
var successFocusTypeStyles = (_successFocusTypeStyl = {}, _successFocusTypeStyl[TEXTFIELD_TYPES.DEFAULT] = {
  border: 'solid 1px var(--tds-color-success-fill)',
  'background-color': 'var(--tds-color-base-01)'
}, _successFocusTypeStyl);
var readOnlyTypeStyles = (_readOnlyTypeStyles = {}, _readOnlyTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  border: '1px solid var(--tds-color-base-04)',
  'background-color': 'var(--tds-color-base-01)'
}, _readOnlyTypeStyles);
var readOnlyHoverTypeStyles = (_readOnlyHoverTypeSty = {}, _readOnlyHoverTypeSty[TEXTFIELD_TYPES.DEFAULT] = {
  border: '1px solid var(--tds-color-base-04)',
  'background-color': 'var(--tds-color-base-01)'
}, _readOnlyHoverTypeSty);
var readOnlyFocusTypeStyles = (_readOnlyFocusTypeSty = {}, _readOnlyFocusTypeSty[TEXTFIELD_TYPES.DEFAULT] = {
  'border-color': 'var(--tds-color-focus)',
  'background-color': 'var(--tds-color-base-01)'
}, _readOnlyFocusTypeSty);
var autofillTypeStyles = (_autofillTypeStyles = {}, _autofillTypeStyles[TEXTFIELD_TYPES.DEFAULT] = {
  'background-color': 'rgb(255, 244, 188)'
}, _autofillTypeStyles);
var autofillInputTypeStyles = (_autofillInputTypeSty = {}, _autofillInputTypeSty[TEXTFIELD_TYPES.DEFAULT] = {
  '-webkit-text-fill-color': 'inherit',
  '-webkit-box-shadow': '0 0 0 1000px rgb(255, 244, 188)',
  'transition-property': 'background-color, box-shadow',
  'transition-duration': "5000s, " + TRANSITION_DURATION,
  'transition-timing-function': TRANSITION_FUNCTION,
  'transition-delay': '0s'
}, _autofillInputTypeSty);
var transparentTypeStyles = (_transparentTypeStyle = {}, _transparentTypeStyle[TEXTFIELD_TYPES.DEFAULT] = {
  'border-color': 'transparent !important',
  'background-color': 'transparent !important'
}, _transparentTypeStyle);

var textfield_hover = function textfield_hover(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return hoverTypeStyles[type];
};

var textfield_focus = function textfield_focus(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return focusTypeStyles[type];
};

var textfield = function textfield(_, type, withPseudoClasses) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  if (withPseudoClasses === void 0) {
    withPseudoClasses = 'true';
  }

  return (0, _extends2.default)({}, baseStyles, baseTypeStyles[type], withPseudoClasses !== 'false' ? {
    '&:hover': textfield_hover(_, type),
    '&:focus, &:focus:hover': textfield_focus(_, type)
  } : {});
};

var textfield_disabled = function textfield_disabled(_, type, withPseudoClasses) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  if (withPseudoClasses === void 0) {
    withPseudoClasses = 'true';
  }

  return withPseudoClasses !== 'false' ? {
    '&, &:hover, &:focus': disabledTypeStyles[type]
  } : disabledTypeStyles[type];
};

var textfield_errorHover = function textfield_errorHover(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return errorHoverTypeStyles[type];
};

var textfield_errorFocus = function textfield_errorFocus(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return errorFocusTypeStyles[type];
};

var textfield_error = function textfield_error(_, type, withPseudoClasses) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  if (withPseudoClasses === void 0) {
    withPseudoClasses = 'true';
  }

  return (// eslint-disable-next-line compat/compat
    Object.assign(errorTypeStyles[type], withPseudoClasses !== 'false' ? {
      '&:hover': textfield_errorHover(_, type),
      '&:focus, &:focus:hover': textfield_errorFocus(_, type)
    } : {})
  );
};

var textfield_successFocus = function textfield_successFocus(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return successFocusTypeStyles[type];
};

var textfield_success = function textfield_success(_, type, withPseudoClasses) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  if (withPseudoClasses === void 0) {
    withPseudoClasses = 'true';
  }

  return (// eslint-disable-next-line compat/compat
    Object.assign(withPseudoClasses !== 'false' ? {
      '&:focus, &:focus:hover': textfield_successFocus(_, type)
    } : {})
  );
};

var textfield_readOnlyHover = function textfield_readOnlyHover(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return readOnlyHoverTypeStyles[type];
};

var textfield_readOnlyFocus = function textfield_readOnlyFocus(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return readOnlyFocusTypeStyles[type];
};

var textfield_readOnly = function textfield_readOnly(_, type, withPseudoClasses) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  if (withPseudoClasses === void 0) {
    withPseudoClasses = 'true';
  }

  return (// eslint-disable-next-line compat/compat
    Object.assign(readOnlyTypeStyles[type], withPseudoClasses !== 'false' ? {
      '&:hover': textfield_readOnlyHover(_, type),
      '&:focus, &:focus:hover': textfield_readOnlyFocus(_, type)
    } : {})
  );
};

var textfield_autofill = function textfield_autofill(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return autofillTypeStyles[type];
};

var textfield_autofill_input = function textfield_autofill_input(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return autofillInputTypeStyles[type];
};

var textfield_transparent = function textfield_transparent(_, type) {
  if (type === void 0) {
    type = TEXTFIELD_TYPES.DEFAULT;
  }

  return transparentTypeStyles[type];
};

module.exports = {
  textfield: textfield,
  textfield_hover: textfield_hover,
  textfield_focus: textfield_focus,
  textfield_disabled: textfield_disabled,
  textfield_error: textfield_error,
  textfield_errorHover: textfield_errorHover,
  textfield_errorFocus: textfield_errorFocus,
  textfield_success: textfield_success,
  textfield_successFocus: textfield_successFocus,
  textfield_readOnly: textfield_readOnly,
  textfield_readOnlyHover: textfield_readOnlyHover,
  textfield_readOnlyFocus: textfield_readOnlyFocus,
  textfield_autofill: textfield_autofill,
  textfield_autofill_input: textfield_autofill_input,
  textfield_transparent: textfield_transparent
};