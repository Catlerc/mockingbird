"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.mediaMap = exports.getQuery = exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _styleProps = require("@platform-ui/styleProps");

var _portal = require("@platform-ui/portal");

var _Overlay = _interopRequireDefault(require("./Overlay"));

var _Paper = _interopRequireDefault(require("./Paper"));

var _Controls = require("./Controls");

var _PopupModule = _interopRequireDefault(require("./Popup.module.css"));

var _excluded = ["dataQaType", "size", "mobileSize", "minWidth", "onClose", "disableHorizontalPadding", "mobileCloseButtonTheme", "children", "backgroundColor", "alignCross", "overlayHeight", "paperMinWidth", "gap", "mobileGap", "closeable", "closeButtonAriaLabel"];
var mediaMap = {
  phone: 600 - 1,
  tabletS: 768 - 1,
  tabletL: 1024 - 1,
  desktopS: 1360 - 1,
  desktopM: Infinity
};
exports.mediaMap = mediaMap;

var getQuery = function getQuery(map, keys, index) {
  var rules = [];

  if (index > 0) {
    rules.push("(min-width: " + (map[keys[index - 1]] + 1) + "px)");
  }

  if (index < keys.length - 1) {
    rules.push("(max-width: " + map[keys[index]] + "px)");
  }

  return rules.join(' and ');
};

exports.getQuery = getQuery;

var Popup = function Popup(props) {
  var _cn, _cn2;

  var _props$dataQaType = props.dataQaType,
      dataQaType = _props$dataQaType === void 0 ? 'uikit/popup' : _props$dataQaType,
      size = props.size,
      mobileSize = props.mobileSize,
      minWidth = props.minWidth,
      onClose = props.onClose,
      disableHorizontalPadding = props.disableHorizontalPadding,
      _props$mobileCloseBut = props.mobileCloseButtonTheme,
      mobileCloseButtonTheme = _props$mobileCloseBut === void 0 ? 'onPaper' : _props$mobileCloseBut,
      children = props.children,
      backgroundColor = props.backgroundColor,
      alignCross = props.alignCross,
      overlayHeight = props.overlayHeight,
      paperMinWidth = props.paperMinWidth,
      gap = props.gap,
      mobileGap = props.mobileGap,
      _props$closeable = props.closeable,
      closeable = _props$closeable === void 0 ? true : _props$closeable,
      closeButtonAriaLabel = props.closeButtonAriaLabel,
      restProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);

  var _pickPaddingProps = (0, _styleProps.pickPaddingProps)(restProps),
      paddingProps = _pickPaddingProps[0],
      overlayProps = _pickPaddingProps[1];

  var _useState = (0, _react.useState)('desktopM'),
      media = _useState[0],
      setMedia = _useState[1];

  (0, _react.useEffect)(function () {
    var availableMedia = Object.keys(mediaMap).filter(function (key) {
      return mediaMap[key] > (minWidth || 0);
    });
    var queries = availableMedia.map(function (mediaItem, index) {
      var query = getQuery(mediaMap, availableMedia, index);
      var queryList = window.matchMedia(query);

      var listener = function listener(event) {
        if (event.matches) {
          setMedia(mediaItem);
        }
      };

      if (queryList.addEventListener) {
        queryList.addEventListener('change', listener);
      } else {
        queryList.addListener(listener);
      }

      if (queryList.matches) {
        setMedia(mediaItem);
      }

      return [queryList, listener];
    });
    return function () {
      queries.forEach(function (_ref) {
        var queryList = _ref[0],
            listener = _ref[1];

        if (queryList.removeEventListener) {
          queryList.removeEventListener('change', listener);
        } else {
          queryList.removeListener(listener);
        }
      });
    };
  }, [minWidth]);
  var fullScreenLayoutEnabled = media === 'phone' || size === 'fullscreen';
  return /*#__PURE__*/_react.default.createElement(_Overlay.default, Object.assign({}, overlayProps, {
    height: overlayHeight,
    onClose: onClose,
    dataQaType: dataQaType,
    gapFillColor: fullScreenLayoutEnabled ? backgroundColor || "var(--tds-color-base-01, #fff)" : undefined
  }), fullScreenLayoutEnabled || !closeable ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: _PopupModule.default.closeButtonContainer
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_PopupModule.default.closeButton, (_cn = {}, _cn[_PopupModule.default["closeButton_media_" + media]] = media, _cn))
  }, /*#__PURE__*/_react.default.createElement(_Controls.CloseButton, {
    onClick: onClose,
    theme: "onOverlay",
    media: media,
    dataQaType: dataQaType,
    ariaLabel: closeButtonAriaLabel
  }))), /*#__PURE__*/_react.default.createElement(_Paper.default, Object.assign({
    size: size,
    mobileSize: mobileSize,
    media: media,
    disableHorizontalPadding: disableHorizontalPadding,
    dataQaType: dataQaType + ".paper",
    backgroundColor: backgroundColor,
    alignCross: alignCross,
    minWidth: paperMinWidth,
    gap: gap,
    mobileGap: mobileGap
  }, paddingProps), fullScreenLayoutEnabled && closeable ? /*#__PURE__*/_react.default.createElement("div", {
    className: _PopupModule.default.closeButtonContainer
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_PopupModule.default.closeButton, (_cn2 = {}, _cn2[_PopupModule.default["closeButton_media_" + media]] = media, _cn2))
  }, /*#__PURE__*/_react.default.createElement(_Controls.CloseButton, {
    onClick: onClose,
    theme: media === 'phone' ? mobileCloseButtonTheme : 'onPaper',
    media: media,
    dataQaType: dataQaType,
    ariaLabel: closeButtonAriaLabel
  }))) : null, /*#__PURE__*/_react.default.createElement(_portal.PortalWrapper, null, /*#__PURE__*/_react.default.createElement("div", (0, _dataQa.default)({
    dataQaType: dataQaType + ".content"
  }), children))));
};

var _default = Popup;
exports.default = _default;