import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["title", "description", "approve", "decline", "onClose"];
import React, { useCallback } from 'react';
import { useMedia } from 'react-use';
import cn from 'classnames';
import Button from '@platform-ui/button';
import mediaBreakpoints from '@platform-ui/constants/mediaBreakpoints';
import Popup from '../../Popup';
import styles from './Dialog.module.css';

function Dialog(_ref) {
  let {
    title,
    description,
    approve,
    decline,
    onClose
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const {
    tabletS
  } = mediaBreakpoints;
  const mediaTablet = useMedia(tabletS, true);
  const handleClose = useCallback((event, params) => {
    onClose && onClose(event, {
      value: params && typeof params.value !== 'undefined' ? params.value : undefined
    });
  }, [onClose]);
  return /*#__PURE__*/React.createElement(Popup, Object.assign({}, otherProps, {
    size: "s",
    mobileSize: "s",
    onClose: handleClose
  }), /*#__PURE__*/React.createElement("h2", {
    className: cn(styles.title, {
      [styles.title_desktop]: mediaTablet,
      [styles.title_mobile]: !mediaTablet
    })
  }, title), /*#__PURE__*/React.createElement("div", {
    className: styles.content
  }, description), /*#__PURE__*/React.createElement("div", {
    className: cn(styles.buttons, {
      [styles.buttons_desktop]: mediaTablet,
      [styles.buttons_mobile]: !mediaTablet
    })
  }, decline && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
    size: "m",
    theme: mediaTablet ? 'flat' : 'secondary',
    wide: !mediaTablet,
    onClick: event => {
      handleClose(event, {
        value: false
      });
    }
  }, decline), /*#__PURE__*/React.createElement("span", {
    className: styles.separator
  })), /*#__PURE__*/React.createElement(Button, {
    size: "m",
    wide: !mediaTablet,
    onClick: useCallback(event => {
      handleClose(event, {
        value: true
      });
    }, [handleClose])
  }, approve)));
}

export default Dialog;