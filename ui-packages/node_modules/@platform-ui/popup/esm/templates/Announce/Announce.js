import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["title", "description", "approve", "decline", "onClose", "size", "mobileSize", "coverStyle", "align"];
import React, { useCallback } from 'react';
import { useMedia } from 'react-use';
import cn from 'classnames';
import Button, { ButtonLink } from '@platform-ui/button';
import mediaBreakpoints from '@platform-ui/constants/mediaBreakpoints';
import Popup from '../../Popup';
import styles from './Announce.module.css';

function Announce(_ref) {
  let {
    title,
    description,
    approve,
    decline,
    onClose,
    size = 'm',
    mobileSize = 'sheet',
    coverStyle,
    align = 'center'
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const {
    tabletS
  } = mediaBreakpoints;
  const mediaTablet = useMedia(tabletS, true);
  const handleClose = useCallback((event, params) => {
    onClose && onClose(event, {
      value: params && typeof params.value !== 'undefined' ? params.value : undefined
    });
  }, [onClose]);
  const currentView = mediaTablet ? 'desktop' : 'mobile';
  return /*#__PURE__*/React.createElement(Popup, Object.assign({}, otherProps, {
    size: size,
    mobileSize: mobileSize === 'fullscreen' ? 'fullscreen' : undefined,
    onClose: handleClose
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      minHeight: mediaTablet || mobileSize !== 'fullscreen' ? 'auto' : 'calc(100vh - 64px)'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: cn(styles.cover, {
      [styles[`cover_desktop-${size}`]]: mediaTablet,
      [styles.cover_mobile]: !mediaTablet
    }),
    style: coverStyle && coverStyle(currentView)
  }), /*#__PURE__*/React.createElement("h2", {
    className: cn(styles.title, {
      [styles.title_desktop]: mediaTablet,
      [styles.title_mobile]: !mediaTablet
    }),
    style: {
      textAlign: align
    }
  }, title), /*#__PURE__*/React.createElement("div", {
    className: styles.content,
    style: {
      textAlign: align
    }
  }, description), /*#__PURE__*/React.createElement("div", {
    className: cn(styles.buttons, {
      [styles[`buttons_align-${align}`]]: align
    })
  }, /*#__PURE__*/React.createElement(Button, {
    size: size === 'm' && mediaTablet ? 'l' : 'm',
    wide: !mediaTablet,
    onClick: useCallback(event => {
      handleClose(event, {
        value: true
      });
    }, [handleClose])
  }, approve), decline && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: styles.separator
  }), /*#__PURE__*/React.createElement(ButtonLink, {
    size: size === 'm' && mediaTablet ? 'l' : 'm',
    wide: !mediaTablet,
    onClick: event => {
      handleClose(event, {
        value: false
      });
    }
  }, decline)))));
}

export default Announce;