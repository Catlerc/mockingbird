import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["dataQaType", "size", "mobileSize", "minWidth", "onClose", "disableHorizontalPadding", "mobileCloseButtonTheme", "children", "backgroundColor", "alignCross", "overlayHeight", "paperMinWidth", "gap", "mobileGap", "closeable", "closeButtonAriaLabel"];
import React, { useState, useEffect } from 'react';
import cn from 'classnames';
import dataQa from '@platform-ui/dataQa';
import { pickPaddingProps } from '@platform-ui/styleProps';
import { PortalWrapper } from '@platform-ui/portal';
import Overlay from './Overlay';
import Paper from './Paper';
import { CloseButton } from './Controls';
import styles from './Popup.module.css';
export const mediaMap = {
  phone: 600 - 1,
  tabletS: 768 - 1,
  tabletL: 1024 - 1,
  desktopS: 1360 - 1,
  desktopM: Infinity
};
export const getQuery = (map, keys, index) => {
  const rules = [];

  if (index > 0) {
    rules.push(`(min-width: ${map[keys[index - 1]] + 1}px)`);
  }

  if (index < keys.length - 1) {
    rules.push(`(max-width: ${map[keys[index]]}px)`);
  }

  return rules.join(' and ');
};

const Popup = props => {
  const {
    dataQaType = 'uikit/popup',
    size,
    mobileSize,
    minWidth,
    onClose,
    disableHorizontalPadding,
    mobileCloseButtonTheme = 'onPaper',
    children,
    backgroundColor,
    alignCross,
    overlayHeight,
    paperMinWidth,
    gap,
    mobileGap,
    closeable = true,
    closeButtonAriaLabel
  } = props,
        restProps = _objectWithoutPropertiesLoose(props, _excluded);

  const [paddingProps, overlayProps] = pickPaddingProps(restProps);
  const [media, setMedia] = useState('desktopM');
  useEffect(() => {
    const availableMedia = Object.keys(mediaMap).filter(key => mediaMap[key] > (minWidth || 0));
    const queries = availableMedia.map((mediaItem, index) => {
      const query = getQuery(mediaMap, availableMedia, index);
      const queryList = window.matchMedia(query);

      const listener = event => {
        if (event.matches) {
          setMedia(mediaItem);
        }
      };

      if (queryList.addEventListener) {
        queryList.addEventListener('change', listener);
      } else {
        queryList.addListener(listener);
      }

      if (queryList.matches) {
        setMedia(mediaItem);
      }

      return [queryList, listener];
    });
    return () => {
      queries.forEach(([queryList, listener]) => {
        if (queryList.removeEventListener) {
          queryList.removeEventListener('change', listener);
        } else {
          queryList.removeListener(listener);
        }
      });
    };
  }, [minWidth]);
  const fullScreenLayoutEnabled = media === 'phone' || size === 'fullscreen';
  return /*#__PURE__*/React.createElement(Overlay, Object.assign({}, overlayProps, {
    height: overlayHeight,
    onClose: onClose,
    dataQaType: dataQaType,
    gapFillColor: fullScreenLayoutEnabled ? backgroundColor || `var(--tds-color-base-01, #fff)` : undefined
  }), fullScreenLayoutEnabled || !closeable ? null : /*#__PURE__*/React.createElement("div", {
    className: styles.closeButtonContainer
  }, /*#__PURE__*/React.createElement("div", {
    className: cn(styles.closeButton, {
      [styles[`closeButton_media_${media}`]]: media
    })
  }, /*#__PURE__*/React.createElement(CloseButton, {
    onClick: onClose,
    theme: "onOverlay",
    media: media,
    dataQaType: dataQaType,
    ariaLabel: closeButtonAriaLabel
  }))), /*#__PURE__*/React.createElement(Paper, Object.assign({
    size: size,
    mobileSize: mobileSize,
    media: media,
    disableHorizontalPadding: disableHorizontalPadding,
    dataQaType: `${dataQaType}.paper`,
    backgroundColor: backgroundColor,
    alignCross: alignCross,
    minWidth: paperMinWidth,
    gap: gap,
    mobileGap: mobileGap
  }, paddingProps), fullScreenLayoutEnabled && closeable ? /*#__PURE__*/React.createElement("div", {
    className: styles.closeButtonContainer
  }, /*#__PURE__*/React.createElement("div", {
    className: cn(styles.closeButton, {
      [styles[`closeButton_media_${media}`]]: media
    })
  }, /*#__PURE__*/React.createElement(CloseButton, {
    onClick: onClose,
    theme: media === 'phone' ? mobileCloseButtonTheme : 'onPaper',
    media: media,
    dataQaType: dataQaType,
    ariaLabel: closeButtonAriaLabel
  }))) : null, /*#__PURE__*/React.createElement(PortalWrapper, null, /*#__PURE__*/React.createElement("div", dataQa({
    dataQaType: `${dataQaType}.content`
  }), children))));
};

export default Popup;