import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
export interface OverlayProps extends DataQaInterface {
    /**
     * Состояние компонента: открыт/закрыт
     */
    opened?: boolean;
    /**
     * Обработчик события onClose
     */
    onClose: (event: React.MouseEvent | React.KeyboardEvent, params?: Record<string, unknown>) => void;
    /**
     * Обработчик события onKeyUp
     */
    onKeyUp?: (event: React.KeyboardEvent) => void;
    /**
     * Обработчик события onKeyDown
     */
    onKeyDown?: (event: React.KeyboardEvent) => void;
    /**
     * CSS селектор для описывания анимации открытия
     */
    popupOpenedClass?: string;
    /**
     * CSS селектор для описывания анимации закрытия
     */
    popupClosedClass?: string;
    /**
     * Отключает анимацию.
     * Добавлено из-за проблемы в Safari 13 [UIKIT-4022]
     */
    disableAnimation?: boolean;
    /**
     * Отключает scroll
     */
    disableScroll?: boolean;
    /**
     * z-index оверлея
     */
    zIndex?: React.CSSProperties['zIndex'];
    /**
     * Минимальная рабочая ширина, ниже которой отключена адаптивность
     */
    minWidth?: number;
    /**
     * Высота компонента
     */
    height?: React.CSSProperties['height'];
    /**
     * Элемент, на который нужно возвращать фокус после закрытия.
     * Если ничего не передавать, то возвращает на элемент,
     * на котором был фокус до открытия.
     */
    focusOnClose?: HTMLElement;
    /**
     * Отключает цвет оверлея
     */
    transparent?: boolean;
    /**
     * Цвет фона для перекрытия зазора в интерфейсе
     * [UIKIT-5537] При скролле на мобильных в момент исчезновения адресной строки размер оверлея перестраивается не
     * сразу, и образуется дырка, которую нужно перекрыть.
     * По-умолчанию совпадает с цветом фона. Следует задавать в случаях, когда содержимое оверлея растягивается на весь
     * экран
     */
    gapFillColor?: React.CSSProperties['backgroundColor'];
    /**
     * Содержимое оверлея
     */
    children?: React.ReactNode;
    /**
     * Обработчик конца анимации
     */
    onCloseEnd?: () => void;
}
declare const Overlay: React.ForwardRefExoticComponent<OverlayProps & React.RefAttributes<HTMLDivElement>>;
export default Overlay;
