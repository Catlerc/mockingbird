"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _color = require("@platform-ui/utils/color");

var _getBackgroundMainColor = _interopRequireDefault(require("@platform-ui/utils/getBackgroundMainColor"));

var corners = _interopRequireWildcard(require("@platform-ui/flatCorners"));

var _ButtonModule = _interopRequireDefault(require("./Button.module.css"));

// @ts-ignore
// @ts-ignore
var limitProgressiveFillValue = function limitProgressiveFillValue(percent) {
  return Math.min(Math.max(percent, -100), 0);
};

function useButtonStyle(props) {
  var _cn, _cn2;

  var theme = props.theme,
      isButtonLink = props.isButtonLink,
      disabled = props.disabled,
      wide = props.wide,
      wideTabletS = props.wideTabletS,
      wideTabletL = props.wideTabletL,
      wideDesktopS = props.wideDesktopS,
      wideDesktopM = props.wideDesktopM,
      wideDesktopL = props.wideDesktopL,
      inGroup = props.inGroup,
      round = props.round,
      vertical = props.vertical,
      uppercase = props.uppercase,
      unselectable = props.unselectable,
      icon = props.icon,
      children = props.children,
      flatCorners = props.flatCorners,
      disableHorizontalPadding = props.disableHorizontalPadding,
      disableVerticalPadding = props.disableVerticalPadding,
      progressiveFill = props.progressiveFill;
  var isIcon = icon && !children;
  var themeType = typeof theme !== 'object' ? theme : 'custom';
  var customTheme = theme;
  var buttonClassName = (0, _classnames.default)((_cn = {}, _cn[_ButtonModule.default.button] = true, _cn[_ButtonModule.default["button_theme_" + themeType]] = !isButtonLink && true, _cn[_ButtonModule.default.button_theme_custom_hideOverlay] = customTheme == null ? void 0 : customTheme.hideOverlay, _cn[_ButtonModule.default.button_disabled] = disabled, _cn[_ButtonModule.default["button_wide_" + wide]] = wide, _cn[_ButtonModule.default["button_wideTabletS_" + wideTabletS]] = typeof wideTabletS !== 'undefined', _cn[_ButtonModule.default["button_wideTabletL_" + wideTabletL]] = typeof wideTabletL !== 'undefined', _cn[_ButtonModule.default["button_wideDesktopS_" + wideDesktopS]] = typeof wideDesktopS !== 'undefined', _cn[_ButtonModule.default["button_wideDesktopM_" + wideDesktopM]] = typeof wideDesktopM !== 'undefined', _cn[_ButtonModule.default["button_wideDesktopL_" + wideDesktopL]] = typeof wideDesktopL !== 'undefined', _cn[_ButtonModule.default.button_inGroup] = inGroup, _cn[_ButtonModule.default.button_round] = isIcon && round, _cn[_ButtonModule.default.button_isButtonLink] = isButtonLink, _cn[_ButtonModule.default.button_inGroup_horizontal] = inGroup && !vertical, _cn[_ButtonModule.default.button_inGroup_vertical] = inGroup && vertical, _cn[_ButtonModule.default.button_uppercase] = uppercase, _cn[_ButtonModule.default.button_unselectable] = unselectable, _cn));
  var buttonStyle = {};

  if (customTheme) {
    buttonStyle = {
      color: customTheme.background && (0, _color.calcFontColor)((0, _getBackgroundMainColor.default)(customTheme.background)),
      border: customTheme.border || customTheme.background && '1px solid transparent',
      // иначе (если ставить styles.backgroundOrigin = 'border-box') после смены обновления props и смены background
      // происходит сброс background-origin
      // вообще нужно для того, чтобы с градиентным фоном не появлялись артефакты на бордерах кнопки
      background: customTheme.background && customTheme.background + " border-box"
    };
  }

  buttonStyle = (0, _extends2.default)({}, buttonStyle, corners.style(flatCorners));
  var buttonWrapperClassName = (0, _classnames.default)((_cn2 = {}, _cn2[_ButtonModule.default.buttonWrapper] = true, _cn2[_ButtonModule.default.buttonWrapper_disableHorizontalPadding] = disableHorizontalPadding, _cn2[_ButtonModule.default.buttonWrapper_disableVerticalPadding] = disableVerticalPadding, _cn2[_ButtonModule.default.buttonWrapper_isIcon] = isIcon, _cn2));
  var progressiveFillStyle = {};

  if (progressiveFill) {
    progressiveFillStyle.transform = "translateX(" + limitProgressiveFillValue(-100 + progressiveFill) + "%)";
  }

  return {
    button: {
      className: buttonClassName,
      style: buttonStyle
    },
    buttonWrapper: {
      className: buttonWrapperClassName
    },
    progressiveFillContainer: {
      className: _ButtonModule.default.progressiveFillContainer
    },
    progressiveFill: {
      className: _ButtonModule.default.progressiveFill,
      style: progressiveFillStyle
    },
    icon: {
      className: _ButtonModule.default.icon
    },
    content: {
      className: _ButtonModule.default.content
    }
  };
}

var _default = useButtonStyle;
exports.default = _default;