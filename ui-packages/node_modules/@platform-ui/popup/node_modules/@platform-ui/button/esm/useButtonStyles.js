import _extends from "@babel/runtime/helpers/extends";
import cn from 'classnames'; // @ts-ignore

import { calcFontColor } from '@platform-ui/utils/color'; // @ts-ignore

import getBackgroundMainColor from '@platform-ui/utils/getBackgroundMainColor';
import * as corners from '@platform-ui/flatCorners';
import styles from './Button.module.css';

const limitProgressiveFillValue = percent => Math.min(Math.max(percent, -100), 0);

function useButtonStyle(props) {
  const {
    theme,
    isButtonLink,
    disabled,
    wide,
    wideTabletS,
    wideTabletL,
    wideDesktopS,
    wideDesktopM,
    wideDesktopL,
    inGroup,
    round,
    vertical,
    uppercase,
    unselectable,
    icon,
    children,
    flatCorners,
    disableHorizontalPadding,
    disableVerticalPadding,
    progressiveFill
  } = props;
  const isIcon = icon && !children;
  const themeType = typeof theme !== 'object' ? theme : 'custom';
  const customTheme = theme;
  const buttonClassName = cn({
    [styles.button]: true,
    [styles[`button_theme_${themeType}`]]: !isButtonLink && true,
    [styles.button_theme_custom_hideOverlay]: customTheme == null ? void 0 : customTheme.hideOverlay,
    [styles.button_disabled]: disabled,
    [styles[`button_wide_${wide}`]]: wide,
    [styles[`button_wideTabletS_${wideTabletS}`]]: typeof wideTabletS !== 'undefined',
    [styles[`button_wideTabletL_${wideTabletL}`]]: typeof wideTabletL !== 'undefined',
    [styles[`button_wideDesktopS_${wideDesktopS}`]]: typeof wideDesktopS !== 'undefined',
    [styles[`button_wideDesktopM_${wideDesktopM}`]]: typeof wideDesktopM !== 'undefined',
    [styles[`button_wideDesktopL_${wideDesktopL}`]]: typeof wideDesktopL !== 'undefined',
    [styles.button_inGroup]: inGroup,
    [styles.button_round]: isIcon && round,
    [styles.button_isButtonLink]: isButtonLink,
    [styles.button_inGroup_horizontal]: inGroup && !vertical,
    [styles.button_inGroup_vertical]: inGroup && vertical,
    [styles.button_uppercase]: uppercase,
    [styles.button_unselectable]: unselectable
  });
  let buttonStyle = {};

  if (customTheme) {
    buttonStyle = {
      color: customTheme.background && calcFontColor(getBackgroundMainColor(customTheme.background)),
      border: customTheme.border || customTheme.background && '1px solid transparent',
      // иначе (если ставить styles.backgroundOrigin = 'border-box') после смены обновления props и смены background
      // происходит сброс background-origin
      // вообще нужно для того, чтобы с градиентным фоном не появлялись артефакты на бордерах кнопки
      background: customTheme.background && `${customTheme.background} border-box`
    };
  }

  buttonStyle = _extends({}, buttonStyle, corners.style(flatCorners));
  const buttonWrapperClassName = cn({
    [styles.buttonWrapper]: true,
    [styles.buttonWrapper_disableHorizontalPadding]: disableHorizontalPadding,
    [styles.buttonWrapper_disableVerticalPadding]: disableVerticalPadding,
    [styles.buttonWrapper_isIcon]: isIcon
  });
  const progressiveFillStyle = {};

  if (progressiveFill) {
    progressiveFillStyle.transform = `translateX(${limitProgressiveFillValue(-100 + progressiveFill)}%)`;
  }

  return {
    button: {
      className: buttonClassName,
      style: buttonStyle
    },
    buttonWrapper: {
      className: buttonWrapperClassName
    },
    progressiveFillContainer: {
      className: styles.progressiveFillContainer
    },
    progressiveFill: {
      className: styles.progressiveFill,
      style: progressiveFillStyle
    },
    icon: {
      className: styles.icon
    },
    content: {
      className: styles.content
    }
  };
}

export default useButtonStyle;