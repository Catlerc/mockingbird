import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["ariaBusy", "ariaLabel", "children", "dataQaData", "dataQaType", "disabled", "flatCorners", "href", "icon", "inGroup", "isButtonLink", "progressiveFill", "round", "size", "tabIndex", "tagName", "target", "theme", "type", "unselectable", "uppercase", "vertical", "wide", "wideDesktopL", "wideDesktopM", "wideDesktopS", "wideTabletL", "wideTabletS", "onClick", "onMouseLeave", "onMouseOver", "innerRef", "disableHorizontalPadding", "disableVerticalPadding"];
import React, { forwardRef } from 'react';
import noop from '@tinkoff/utils/function/noop';
import Clickable from '@platform-ui/clickable';
import useButtonStyle from './useButtonStyles';
import Icon from './Icon'; // Используется в stories компонентов Button и Group

export const props = {
  sizes: ['xl', 'l', 'm', 's', 'xs'],
  themes: ['primary', 'secondary', 'outline', 'outlineDark', 'outlineLight', 'flat', 'flatDark', 'flatLight', 'mono']
};
const Button = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    ariaBusy,
    ariaLabel,
    children,
    dataQaData,
    dataQaType,
    disabled,
    href,
    icon,
    progressiveFill,
    size,
    tabIndex,
    tagName,
    target,
    type,
    onClick,
    onMouseLeave,
    onMouseOver,
    innerRef
  } = props,
        otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  const buttonStyles = useButtonStyle(props);
  return /*#__PURE__*/React.createElement(Clickable, Object.assign({}, otherProps, {
    "data-size": size,
    ref: ref,
    "aria-busy": ariaBusy,
    dataQaData: dataQaData,
    dataQaType: dataQaType,
    tagName: tagName,
    target: target,
    type: href ? undefined : type,
    href: href,
    "aria-label": (!children || typeof children !== 'string') && ariaLabel || undefined,
    disabled: disabled,
    onClick: onClick,
    onMouseOver: onMouseOver,
    onMouseLeave: onMouseLeave,
    tabIndex: tabIndex,
    className: buttonStyles.button.className,
    style: buttonStyles.button.style,
    innerClassName: buttonStyles.buttonWrapper.className,
    innerRef: innerRef
  }), progressiveFill ? /*#__PURE__*/React.createElement("span", {
    className: buttonStyles.progressiveFillContainer.className
  }, /*#__PURE__*/React.createElement("span", {
    "data-qa-type": `${dataQaType}.progressiveFill`,
    className: buttonStyles.progressiveFill.className,
    style: buttonStyles.progressiveFill.style
  })) : null, icon && /*#__PURE__*/React.createElement("span", {
    className: buttonStyles.icon.className,
    "data-qa-type": `${dataQaType}.icon`
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: icon
  })), children && /*#__PURE__*/React.createElement("span", {
    className: buttonStyles.content.className,
    "data-qa-type": `${dataQaType}.content`
  }, children));
});
Button.defaultProps = {
  dataQaType: 'uikit/button',
  size: 'xl',
  theme: 'primary',
  type: 'button',
  onClick: noop,
  onMouseOver: noop,
  onMouseLeave: noop
}; // TODO: разобраться как подружить сборку TS и displayName

Button.displayName = 'Button';
export default Button;