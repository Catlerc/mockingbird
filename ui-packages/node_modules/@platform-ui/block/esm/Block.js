import React from 'react';
import cn from 'classnames';
import * as corners from '@platform-ui/flatCorners';
import { BlockSection } from './BlockSection';
import { PrimaryText } from './PrimaryText';
import { SecondaryText } from './SecondaryText';
import { BlockHintWrapper } from './BlockHintWrapper';
import styles from './Block.module.css';

const Block = props => {
  const {
    dataQaType = 'uikit/block',
    disabled,
    input,
    icon,
    title,
    label,
    description,
    hintBlock,
    size = 'l',
    vertical,
    reverse,
    inGroup,
    separated,
    flatCorners = '',
    borderType = 'around',
    alignSections = 'smart'
  } = props;
  const fieldChild = /*#__PURE__*/React.createElement(BlockSection, null, input);
  let {
    children
  } = props;

  if (!children) {
    const large = size === 'l' || size === 'xl';
    const hintChild = hintBlock && /*#__PURE__*/React.createElement(BlockHintWrapper, {
      key: "hint"
    }, hintBlock);
    const iconChild = icon && /*#__PURE__*/React.createElement(BlockSection, {
      centered: !title && !description,
      key: "icon"
    }, icon);
    const mainChild = /*#__PURE__*/React.createElement(BlockSection, {
      centered: !title && !description,
      stretch: true,
      key: "main"
    }, title && large && /*#__PURE__*/React.createElement(SecondaryText, {
      role: "heading",
      "aria-level": 3,
      dataQaType: `${dataQaType}.title`
    }, title), /*#__PURE__*/React.createElement(PrimaryText, {
      role: "heading",
      "aria-level": 4,
      dataQaType: `${dataQaType}.label`
    }, label, !reverse && /*#__PURE__*/React.createElement(React.Fragment, null, "\xA0", hintChild)), description && large && /*#__PURE__*/React.createElement(SecondaryText, {
      dataQaType: `${dataQaType}.description`
    }, description));
    children = reverse ? /*#__PURE__*/React.createElement(React.Fragment, null, mainChild, hintChild && /*#__PURE__*/React.createElement(BlockSection, null, hintChild), iconChild) : /*#__PURE__*/React.createElement(React.Fragment, null, iconChild, mainChild);
  }

  let groupMod;

  if (inGroup && borderType !== 'under') {
    groupMod = vertical ? 'vertical' : 'horizontal';
  }

  return /*#__PURE__*/React.createElement("label", {
    "data-qa-type": dataQaType,
    className: cn({
      [styles.wrapper]: true,
      [styles.wrapper_disabled]: disabled,
      [styles.wrapper_reverse]: reverse,
      [styles.wrapper_separated]: separated,
      [styles[`wrapper_size_${size}`]]: size,
      [styles[`wrapper_inGroup_${groupMod}`]]: groupMod,
      [styles[`wrapper_borderType_${borderType}`]]: borderType,
      [styles[`wrapper_alignSections_${alignSections}`]]: alignSections
    }),
    style: corners.style(flatCorners)
  }, /*#__PURE__*/React.createElement("span", {
    className: styles.focusWrapper
  }, reverse ? /*#__PURE__*/React.createElement(React.Fragment, null, fieldChild, children) : /*#__PURE__*/React.createElement(React.Fragment, null, children, fieldChild)));
};

export default Block;