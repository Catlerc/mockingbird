import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { InputBoxProps } from '@platform-ui/inputBox';
import type { UnitsInputProps } from '@platform-ui/inputTools';
export interface InputCountStatelessProps extends DataQaInterface, Pick<InputBoxProps, 'filled' | 'label' | 'id' | 'disabled' | 'readOnly' | 'required' | 'error' | 'flatCorners' | 'hintBlock' | 'onClick'>, Pick<UnitsInputProps, 'value' | 'name' | 'max' | 'min' | 'step' | 'units' | 'precision' | 'showPlus' | 'insertSpaces' | 'padStartingZeroes' | 'onKeyUp' | 'onKeyDown' | 'onKeyPress'> {
    focused: boolean;
    onBlur: React.FocusEventHandler;
    onFocus: React.FocusEventHandler;
    /**
     * Размер инпута
     */
    size?: 'm' | 'l';
    /**
     * Показать кнопки изменения значения
     */
    showButtons?: boolean;
    /**
     * Обработчик изменения инпута
     */
    onChange: (event: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLSpanElement>, params: {
        value: number;
        name?: string;
    }) => void;
    /**
     * Обработчик изменения на шаг (плюс/минус)
     */
    onStepButtonClick?: (event: React.SyntheticEvent<HTMLButtonElement>, params: {
        value: number;
        name?: string;
        sign: string;
    }) => void;
}
declare function InputCountStateless(props: InputCountStatelessProps): JSX.Element;
export { InputCountStateless };
declare const InputCount: React.ForwardRefExoticComponent<Omit<InputCountStatelessProps, "value" | "onChange" | "focused" | "onFocus" | "onBlur"> & Partial<Pick<InputCountStatelessProps, "value" | "onChange" | "focused" | "onFocus" | "onBlur">> & {
    defaultValue?: number | undefined;
} & React.RefAttributes<never>>;
export declare type InputCountProps = React.ComponentType<typeof InputCount>;
export default InputCount;
