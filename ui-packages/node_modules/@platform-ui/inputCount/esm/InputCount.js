import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["label", "error", "required", "hintBlock", "flatCorners", "onStepButtonClick", "size", "showButtons", "dataQaType", "min", "max", "step", "precision"];
import React, { Fragment } from 'react';
import cn from 'classnames';
import { withValueInputState } from '@platform-ui/stateUtils';
import InputBox from '@platform-ui/inputBox';
import { FocusArea, UnitsInput, addStep, canAddStep, isEmptyValue } from '@platform-ui/inputTools';
import * as corners from '@platform-ui/flatCorners';
import Clickable from '@platform-ui/clickable';
import styles from './InputCount.module.css';

function InputCountStateless(props) {
  const {
    label,
    error,
    required,
    hintBlock,
    flatCorners = '',
    onStepButtonClick,
    size,
    showButtons = true,
    dataQaType = 'uikit/inputCount',
    min = -(2 ** 53 - 1),
    // Number.MIN_SAFE_INTEGER не поддерживается в IE 11
    max = 2 ** 53 - 1,
    // Number.MAX_SAFE_INTEGER не поддерживается в IE 11
    step = 1,
    precision = 0
  } = props,
        inputProps = _objectWithoutPropertiesLoose(props, _excluded);

  const inputCorners = corners.toBooleanArray(flatCorners);

  const handleButtonClick = event => {
    const {
      name,
      onChange
    } = props;
    const {
      sign
    } = event.currentTarget.dataset;
    const value = addStep(props.value, {
      min,
      max,
      step,
      precision
    }, sign === 'plus' ? 1 : -1);
    onStepButtonClick && onStepButtonClick(event, {
      name,
      sign,
      value
    });
    onChange && onChange(event, {
      name,
      value
    });
  };

  const renderButton = (sign, ariaLabel) => {
    const {
      value,
      disabled,
      readOnly
    } = props;
    const buttonDisabled = disabled || readOnly || !canAddStep(value, {
      min,
      max,
      step,
      precision
    }, sign === 'plus' ? 1 : -1);
    return /*#__PURE__*/React.createElement(Clickable, {
      dataQaType: `${dataQaType}.button-${sign}`,
      role: "button",
      "data-sign": sign,
      "aria-label": ariaLabel,
      "aria-disabled": buttonDisabled ? true : undefined,
      className: cn({
        [styles.button]: true,
        [styles[`button_sign_${sign}`]]: true,
        [styles.button_disabled]: buttonDisabled
      }),
      onClick: !buttonDisabled ? handleButtonClick : undefined
    });
  };

  if (showButtons) {
    inputCorners[1] = showButtons;
    inputCorners[2] = showButtons;
  }

  return /*#__PURE__*/React.createElement(FocusArea, {
    className: cn({
      [styles.root]: true,
      [styles.root_showButtons]: showButtons
    }),
    "data-qa-type": dataQaType,
    style: corners.style(flatCorners)
  }, /*#__PURE__*/React.createElement(InputBox, {
    dataQaType: `${dataQaType}.wrapper`,
    flatCorners: inputCorners.join(' '),
    label: label,
    error: error,
    filled: inputProps.filled || !isEmptyValue(inputProps.value),
    focused: inputProps.focused,
    readOnly: inputProps.readOnly,
    disabled: inputProps.disabled,
    required: required,
    hintBlock: hintBlock,
    size: size,
    labelFor: inputProps.id
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.inputContainer
  }, /*#__PURE__*/React.createElement(UnitsInput, Object.assign({
    dataQaType: dataQaType,
    min: min,
    max: max,
    step: step,
    precision: precision
  }, inputProps))), '\u200B'
  /* пробел нулевой ширины чтобы растянуть родителя по высоте до line-height */
  ), showButtons && /*#__PURE__*/React.createElement(Fragment, null, renderButton('plus', 'Плюс'), renderButton('minus', 'Минус')));
}

export { InputCountStateless };
const InputCount = withValueInputState(InputCountStateless, {
  emptyValue: 0
});
export default InputCount;