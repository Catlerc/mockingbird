import React from 'react';
import cn from 'classnames';
import CollapseBlock from '@platform-ui/collapseBlock';
import { useId } from '@platform-ui/generateId';
import overrideStyles from '@platform-ui/overrideStyles';
import baseStyles from './FormRow.module.css';

const FormRow = props => {
  var _props$__overrideStyl;

  const isWithMessage = () => !!(props.message || props.messageRight);

  const isWithError = () => props.error && !!props.errorMessage;

  const id = useId();
  const errorId = `error_${id}`;
  const messageId = `message_${id}`;
  const styles = overrideStyles(baseStyles, props == null ? void 0 : (_props$__overrideStyl = props.__overrideStyles) == null ? void 0 : _props$__overrideStyl.FormRow);
  const {
    children,
    errorMessage,
    message,
    messageRight,
    outerLabel,
    bigMessageOffset,
    withoutOffset,
    flexBasis,
    inFormGroup,
    refCallback,
    required,
    offset,
    dataQaType,
    size
  } = props;
  const withError = isWithError();
  return /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.root]: true,
      [styles[`root_offset-${offset}`]]: offset,
      [styles.root_withoutOffset]: withoutOffset,
      [styles.root_inFormGroup]: inFormGroup
    }),
    style: {
      flexBasis
    },
    ref: refCallback,
    "data-qa-type": dataQaType
  }, outerLabel && /*#__PURE__*/React.createElement("div", {
    className: cn(styles.label, {
      [styles[`label_size-${size}`]]: size
    })
  }, outerLabel, required && '*'), typeof children === 'function' ? children({
    errorId,
    messageId
  }) : children, /*#__PURE__*/React.createElement(CollapseBlock, {
    collapsed: !withError
  }, /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.errorBlock]: true,
      [styles.errorBlock_showed]: withError
    }),
    id: errorId,
    "data-qa-type": `${dataQaType}.errorBlock`
  }, errorMessage)), isWithMessage() && /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.messageBlock]: true,
      [styles.messageBlock_withBigOffset]: bigMessageOffset
    }),
    id: messageId,
    "data-qa-type": `${dataQaType}.messageBlock`
  }, message && /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.message]: true,
      [styles.message_left]: true,
      [styles.message_halfRow]: messageRight
    })
  }, message), messageRight && /*#__PURE__*/React.createElement("div", {
    className: cn({
      [styles.message]: true,
      [styles.message_right]: true,
      [styles.message_halfRow]: message
    })
  }, messageRight)));
};

FormRow.defaultProps = {
  dataQaType: 'uikit/formRow',
  offset: 20,
  size: 'l'
};
export default FormRow;