import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { InputProps } from '@platform-ui/input';
export interface FormRowIds {
    errorId?: string;
    messageId?: string;
}
export interface FormRowProps extends DataQaInterface, Pick<InputProps, 'size'> {
    children?: React.ReactNode | (({ errorId, messageId }: FormRowIds) => React.ReactNode);
    /**
     * Включает отображение сообщения ошибки
     */
    error?: boolean;
    /**
     * Сообщение ошибки под полем
     */
    errorMessage?: React.ReactNode;
    /**
     * Сообщение под полем
     */
    message?: React.ReactNode;
    /**
     * Сообщение под полем справа
     */
    messageRight?: React.ReactNode;
    /**
     * Label над полем
     */
    outerLabel?: React.ReactNode;
    /**
     * Включает увеличенный отступ для сообщения под полем
     */
    bigMessageOffset?: boolean;
    /**
     * Удаляет отступ
     */
    withoutOffset?: boolean;
    /**
     * Задает поведение элемента внутри flex контейнера
     */
    flexBasis?: string | number;
    /**
     * Задает поведение элемента внутри FormGroup
     */
    inFormGroup?: boolean;
    /**
     * ref-функция
     */
    refCallback?: React.RefCallback<HTMLDivElement>;
    /**
     * Обязательное поле (добавляет звёздочку в лейбл)
     */
    required?: boolean;
    /**
     * Отступ
     */
    offset?: 20 | 16;
    /**
     * Временный проп для переопределения стилей, не предназначен для широкого использования.
     * Создан специально для задачи https://
     * TODO: удалить когда появится общий механизм темизации.
     */
    __overrideStyles?: {
        FormRow?: {
            [key: string]: string;
        };
        [key: string]: any;
    };
}
declare const FormRow: {
    (props: FormRowProps): JSX.Element;
    defaultProps: {
        dataQaType: string;
        offset: number;
        size: string;
    };
};
export default FormRow;
