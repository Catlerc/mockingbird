import type React from 'react';
export declare type EventHandler<TEvent, TParams extends {}> = (event: TEvent, params: TParams) => void;
export declare type GetEvent<TEventHandler> = TEventHandler extends {
    (event: infer TEvent): void;
} ? TEvent : never;
export declare type GetParams<TEventHandler> = TEventHandler extends {
    (event: any, params: infer TParams): void;
} ? TParams : never;
export declare type GetRef<TProps> = TProps extends {
    ref?: React.Ref<infer TRef>;
} ? TRef : never;
export declare type GetValue<TProps> = TProps extends {
    value?: infer TValue;
} ? TValue : never;
export declare type GetChangeEvent<TProps> = TProps extends {
    onChange?: EventHandler<infer TEvent, any>;
} ? TEvent : never;
export declare type GetFocusEvent<TProps> = TProps extends {
    onFocus?: EventHandler<infer TEvent, any>;
} ? TEvent : never;
export declare type GetBlurEvent<TProps> = TProps extends {
    onBlur?: EventHandler<infer TEvent, any>;
} ? TEvent : never;
export declare type GetChangeParams<TProps> = TProps extends {
    onChange?: EventHandler<any, infer TParams>;
} ? TParams : never;
export declare type GetFocusParams<TProps> = TProps extends {
    onFocus?: EventHandler<any, infer TParams>;
} ? TParams : never;
export declare type GetBlurParams<TProps> = TProps extends {
    onBlur?: EventHandler<any, infer TParams>;
} ? TParams : never;
export declare type Optional<TInterface extends {}, TKeys extends keyof TInterface> = Omit<TInterface, TKeys> & Partial<Pick<TInterface, TKeys>>;
export interface CheckableInputEventParams {
    name?: string;
    value?: string;
    checked: boolean;
}
export interface CheckableInputProps<TChangeEvent = React.ChangeEvent<HTMLInputElement>, TChangeParams extends CheckableInputEventParams = CheckableInputEventParams, TFocusEvent = React.FocusEvent<HTMLInputElement>, TFocusParams extends CheckableInputEventParams = TChangeParams, TBlurEvent = TFocusEvent, TBlurParams extends CheckableInputEventParams = TFocusParams> {
    name?: string;
    value?: string;
    checked: boolean;
    indeterminate?: boolean;
    focused: boolean;
    disabled?: boolean;
    tabIndex?: number;
    onChange: EventHandler<TChangeEvent, TChangeParams>;
    onFocus: EventHandler<TFocusEvent, TFocusParams>;
    onBlur: EventHandler<TBlurEvent, TBlurParams>;
}
export interface ValueInputEventParams<TValue> {
    name?: string;
    value: TValue;
}
export interface ValueInputProps<TValue = string, TChangeEvent = React.ChangeEvent<HTMLInputElement>, TChangeParams extends ValueInputEventParams<TValue> = ValueInputEventParams<TValue>, TFocusEvent = React.FocusEvent<HTMLInputElement>, TFocusParams extends ValueInputEventParams<TValue> = TChangeParams, TBlurEvent = TFocusEvent, TBlurParams extends ValueInputEventParams<TValue> = TFocusParams> {
    name?: string;
    value: TValue;
    focused: boolean;
    disabled?: boolean;
    tabIndex?: number;
    onChange: EventHandler<TChangeEvent, TChangeParams>;
    onFocus: EventHandler<TFocusEvent, TFocusParams>;
    onBlur: EventHandler<TBlurEvent, TBlurParams>;
}
export declare type NonEmptyArray<T> = [T, ...T[]];
export declare type FCC<P = {}> = React.FunctionComponent<React.PropsWithChildren<P>>;
