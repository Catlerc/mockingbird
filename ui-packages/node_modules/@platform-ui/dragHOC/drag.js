"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _head = _interopRequireDefault(require("@tinkoff/utils/array/head"));

var _function = _interopRequireDefault(require("@tinkoff/utils/is/function"));

var DRAG_THRESHOLD = 4; // величина в px, необходимая чтобы отличить клик от дрега
// eslint-disable-next-line no-shadow

var dragName = function dragName(Component) {
  return "Drag(" + (Component.displayName || Component.name || 'Component(!)') + ")";
}; // eslint-disable-next-line compat/compat


var noopPromiseFunc = function noopPromiseFunc() {
  return new Promise(function (resolve) {
    return resolve();
  });
};
/**
 * @deprecated Используйте @platform-ui/draggable
 */


var drag = function drag(WrappedComponent) {
  var dragDecorator = /*#__PURE__*/function (_Component) {
    (0, _inheritsLoose2.default)(dragDecorator, _Component);

    function dragDecorator() {
      var _this;

      _this = _Component.call(this) || this;

      _this.setRef = function (node) {
        _this.wrappedComponent = node;
      };

      _this.onDragMouseDown = function () {
        document.addEventListener('mousemove', _this.onDragMouseMoveBind);
        document.addEventListener('touchmove', _this.onDragMouseMoveBind);
        document.addEventListener('mouseup', _this.onDragMouseUpBind);
        document.addEventListener('touchend', _this.onDragMouseUpBind);
      };

      _this.onDragMouseMove = function (event) {
        var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
            wrappedComponent = _assertThisInitialize.wrappedComponent;

        if (wrappedComponent) {
          if (!wrappedComponent.allowDefaultAction) {
            event.preventDefault();
          }

          var touch = (0, _head.default)(event.touches) || event;
          var currentPosition = {
            x: touch.pageX,
            y: touch.pageY,
            clientX: touch.clientX,
            clientY: touch.clientY
          };

          if (!wrappedComponent.props.noDragThreshold && Math.abs(currentPosition.x - wrappedComponent.dragStartPosition.x) < DRAG_THRESHOLD && Math.abs(currentPosition.y - wrappedComponent.dragStartPosition.y) < DRAG_THRESHOLD) {
            return;
          }

          (0, _function.default)(wrappedComponent.props.onDragStart) && wrappedComponent.props.onDragStart(wrappedComponent.startIndex);

          if (wrappedComponent.dragPrevPosition.x !== currentPosition.x || wrappedComponent.dragPrevPosition.y !== currentPosition.y) {
            (0, _function.default)(wrappedComponent.onDragProcess) && wrappedComponent.onDragProcess(currentPosition, wrappedComponent.dragPrevPosition, wrappedComponent.dragStartPosition, event);
            wrappedComponent.dragPrevPosition = currentPosition;
          }
        }
      };

      _this.onDragMouseUp = function (event) {
        var _assertThisInitialize2 = (0, _assertThisInitialized2.default)(_this),
            wrappedComponent = _assertThisInitialize2.wrappedComponent;

        if (wrappedComponent) {
          if (!wrappedComponent.allowDefaultAction) {
            event.stopPropagation();
            event.preventDefault();
          }

          var touch = (0, _head.default)(event.changedTouches) || event;
          (0, _function.default)(wrappedComponent.onDragEnd) && wrappedComponent.onDragEnd({
            x: touch.pageX,
            y: touch.pageY,
            clientX: touch.clientX,
            clientY: touch.clientY
          });
          wrappedComponent.dragStartPosition = {};
          wrappedComponent.dragPrevPosition = {};
        }

        document.removeEventListener('mousemove', _this.onDragMouseMoveBind);
        document.removeEventListener('touchmove', _this.onDragMouseMoveBind);
        document.removeEventListener('mouseup', _this.onDragMouseUpBind);
        document.removeEventListener('touchend', _this.onDragMouseUpBind);
      };

      _this.handleDrag = function (event) {
        var _assertThisInitialize3 = (0, _assertThisInitialized2.default)(_this),
            wrappedComponent = _assertThisInitialize3.wrappedComponent;

        if (wrappedComponent) {
          if (!wrappedComponent.allowDefaultAction) {
            event.stopPropagation();
            event.preventDefault();
          }

          var touch = (0, _head.default)(event.touches) || event;
          wrappedComponent.dragStartPosition = {
            x: touch.pageX,
            y: touch.pageY,
            clientX: touch.clientX,
            clientY: touch.clientY
          };
          wrappedComponent.dragPrevPosition = wrappedComponent.dragStartPosition;
          (0, _function.default)(wrappedComponent.beforeDragStart) && wrappedComponent.beforeDragStart(wrappedComponent.dragStartPosition);
          (wrappedComponent.props.beforeDragStart || noopPromiseFunc)(wrappedComponent.startIndex).then(function () {
            _this.onDragMouseDown(event);

            (0, _function.default)(wrappedComponent.onDragStart) && wrappedComponent.onDragStart(wrappedComponent.dragStartPosition, event);
          });
        }
      };

      _this.onDragMouseMoveBind = function (event) {
        return _this.onDragMouseMove(event);
      };

      _this.onDragMouseUpBind = function (event) {
        return _this.onDragMouseUp(event);
      };

      return _this;
    }

    var _proto = dragDecorator.prototype;

    _proto.componentWillUnmount = function componentWillUnmount() {
      document.removeEventListener('mousemove', this.onDragMouseMoveBind);
      document.removeEventListener('touchmove', this.onDragMouseMoveBind);
      document.removeEventListener('mouseup', this.onDragMouseUpBind);
      document.removeEventListener('touchend', this.onDragMouseUpBind);
    };

    _proto.render = function render() {
      return /*#__PURE__*/_react.default.createElement(WrappedComponent, Object.assign({
        onDrag: this.handleDrag,
        ref: this.setRef
      }, this.props));
    };

    return dragDecorator;
  }(_react.Component);

  dragDecorator.displayName = dragName(WrappedComponent);
  return (0, _hoistNonReactStatics.default)(dragDecorator, WrappedComponent);
};

var _default = drag;
exports.default = _default;