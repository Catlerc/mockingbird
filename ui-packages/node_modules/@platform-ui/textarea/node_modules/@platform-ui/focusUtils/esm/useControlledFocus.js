import _extends from "@babel/runtime/helpers/extends";
import { useRef, useCallback, useEffect } from 'react';
import { useMergeRefs } from 'use-callback-ref';
export const useControlledFocus = props => {
  const {
    ref,
    focused,
    onFocus,
    onBlur
  } = props;
  const localRef = useRef(null);
  const mergedRef = useMergeRefs([localRef, ref]);
  const handleFocus = useCallback(event => {
    if (!focused) {
      onFocus(event);
    }
  }, [focused, onFocus]);
  const handleBlur = useCallback(event => {
    if (focused) {
      onBlur(event);
    }
  }, [focused, onBlur]);
  useEffect(() => {
    const element = localRef.current;

    if (focused && element && element !== document.activeElement) {
      element.focus();
    }

    if (!focused && element && element === document.activeElement) {
      element.blur();
    }
  }, [focused]);
  return _extends({}, props, {
    ref: mergedRef,
    onFocus: handleFocus,
    onBlur: handleBlur
  });
};