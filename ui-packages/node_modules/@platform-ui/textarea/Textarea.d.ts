import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
export interface TextareaStatelessProps extends DataQaInterface {
    /**
     * Не обрабатывать нажатие return
     */
    preventReturn?: boolean;
    /**
     * Плейсхолдер поля
     */
    placeholder?: string;
    /**
     * Максимальное кол-во символов
     */
    maxLength?: number;
    /**
     * Минимальное количество строк
     */
    minRows?: JSX.IntrinsicElements['textarea']['rows'];
    /**
     * Фиксированное количество строк
     */
    rows?: JSX.IntrinsicElements['textarea']['rows'];
    /**
     * Id лейбла (нужно указывать, если используется кастомный лейбл)
     */
    labelId?: string;
    /**
     * Id поля
     */
    id?: string;
    /**
     * Имя поля
     */
    name?: string;
    /**
     * Значение в поле
     */
    value: string;
    /**
     * Обработчик расфокуса
     */
    onBlur: (event: React.FocusEvent<HTMLTextAreaElement>, params: {
        value: string;
        name?: string;
    }) => void;
    /**
     * Обработчик на изменение значения
     */
    onChange: (event: React.ChangeEvent<HTMLTextAreaElement>, params: {
        value: string;
        name?: string;
    }) => void;
    /**
     * Обработчик на фокус в поле
     */
    onFocus: (event: React.FocusEvent<HTMLTextAreaElement>, params: {
        value: string;
        name?: string;
    }) => void;
    /**
     * Обработчик по нажатию
     */
    onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>, params: {
        value: string;
        name?: string;
    }) => void;
    /**
     * Обработчик по нажатию
     */
    onKeyPress?: (event: React.KeyboardEvent<HTMLTextAreaElement>, params: {
        value: string;
        name?: string;
    }) => void;
    /**
     * Обработчик события onInput
     */
    onInput?: (event: React.KeyboardEvent<HTMLTextAreaElement>, params: {
        value: string;
        name?: string;
    }) => void;
    /**
     * ref-функция
     * @deprecated используйте ref
     */
    refCallback?: React.RefCallback<HTMLTextAreaElement>;
    /**
     * Неактивное состояние
     */
    disabled?: boolean;
    /**
     * Состояние с ошибкой
     */
    error?: boolean;
    /**
     * Валидное состояние
     */
    valid?: boolean;
    /**
     * Состояние readOnly
     */
    readOnly?: boolean;
    /**
     * Обязательное поле, помечается звёздочкой
     */
    required?: boolean;
    /**
     * Лейбл
     */
    label?: React.ReactNode;
    /**
     * Состояние filled
     */
    filled?: boolean;
    /**
     * Состояние focused
     */
    focused: boolean;
    /**
     * Отключает скругление углов
     */
    flatCorners?: string;
    /**
     * Слот для вывода подсказки
     */
    hintBlock?: React.ReactNode;
    /**
     * Размер инпута (default: l)
     * Доступные размеры: [l - 56px, m - 44px]
     */
    size?: 'l' | 'm';
    /**
     * Слот для содержимого слева
     */
    leftContent?: React.ReactNode;
    /**
     * Слот для содержимого справа
     */
    rightContent?: React.ReactNode;
    /**
     * Атрибут aria-label для нативного инпута
     */
    ariaLabel?: React.AriaAttributes['aria-label'];
    /**
     * Атрибут aria-labelledby для нативного инпута
     */
    ariaLabelledby?: React.AriaAttributes['aria-labelledby'];
    /**
     * Атрибут aria-autocomplete для нативного инпута
     */
    ariaAutocomplete?: React.AriaAttributes['aria-autocomplete'];
    /**
     * Атрибут aria-controls для нативного инпута
     */
    ariaControls?: React.AriaAttributes['aria-controls'];
    /**
     * Атрибут aria-describedby для нативного инпута
     */
    ariaDescribedBy?: React.AriaAttributes['aria-describedby'];
    /**
     * Атрибут aria-errormessage для нативного инпута
     */
    ariaErrorMessage?: React.AriaAttributes['aria-placeholder'];
    /**
     * Включает cobrowsing-атрибуты
     */
    cobrowsingSecure?: boolean;
}
export declare const TextareaStateless: React.ForwardRefExoticComponent<TextareaStatelessProps & React.RefAttributes<HTMLTextAreaElement>>;
declare const Textarea: React.ForwardRefExoticComponent<Pick<Omit<TextareaStatelessProps & React.RefAttributes<HTMLTextAreaElement>, "value" | "onChange" | "focused" | "onFocus" | "onBlur"> & Partial<Pick<TextareaStatelessProps & React.RefAttributes<HTMLTextAreaElement>, "value" | "onChange" | "focused" | "onFocus" | "onBlur">> & {
    defaultValue?: string | undefined;
}, "required" | "disabled" | "error" | "label" | "size" | "filled" | "key" | "dataQaType" | "dataQaData" | "value" | "defaultValue" | "onChange" | "focused" | "onFocus" | "onBlur" | "leftContent" | "rightContent" | "readOnly" | "flatCorners" | "hintBlock" | "labelId" | "valid" | "cobrowsingSecure" | "id" | "placeholder" | "onInput" | "onKeyDown" | "onKeyPress" | "name" | "maxLength" | "refCallback" | "rows" | "preventReturn" | "minRows" | "ariaLabel" | "ariaLabelledby" | "ariaAutocomplete" | "ariaControls" | "ariaDescribedBy" | "ariaErrorMessage"> & React.RefAttributes<HTMLTextAreaElement>>;
export declare type TextareaProps = React.ComponentProps<typeof Textarea>;
export default Textarea;
