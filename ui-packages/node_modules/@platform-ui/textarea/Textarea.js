"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = exports.TextareaStateless = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useCallbackRef = require("use-callback-ref");

var _generateId = require("@platform-ui/generateId");

var _stateUtils = require("@platform-ui/stateUtils");

var _inputBox = _interopRequireWildcard(require("@platform-ui/inputBox"));

var _scroll = _interopRequireWildcard(require("@platform-ui/scroll"));

var _inputTools = require("@platform-ui/inputTools");

var _Counter = require("./Counter");

var _TextareaValue = require("./TextareaValue/TextareaValue");

var _useDetachedScrollBar2 = require("./useDetachedScrollBar");

var _TextareaModule = _interopRequireDefault(require("./Textarea.module.css"));

var TextareaStateless = /*#__PURE__*/(0, _react.forwardRef)(function (props, forwardedRef) {
  var _props$dataQaType = props.dataQaType,
      dataQaType = _props$dataQaType === void 0 ? 'uikit/textarea' : _props$dataQaType,
      id = props.id,
      name = props.name,
      value = props.value,
      placeholder = props.placeholder,
      disabled = props.disabled,
      readOnly = props.readOnly,
      rows = props.rows,
      _props$minRows = props.minRows,
      minRows = _props$minRows === void 0 ? 3 : _props$minRows,
      maxLength = props.maxLength,
      _props$size = props.size,
      size = _props$size === void 0 ? 'l' : _props$size,
      label = props.label,
      error = props.error,
      valid = props.valid,
      filled = props.filled,
      focused = props.focused,
      required = props.required,
      flatCorners = props.flatCorners,
      hintBlock = props.hintBlock,
      leftContent = props.leftContent,
      rightContent = props.rightContent,
      cobrowsingSecure = props.cobrowsingSecure,
      ariaControls = props.ariaControls,
      refCallback = props.refCallback,
      ariaAutocomplete = props.ariaAutocomplete,
      ariaErrorMessage = props.ariaErrorMessage,
      ariaDescribedBy = props.ariaDescribedBy,
      ariaLabel = props.ariaLabel,
      ariaLabelledby = props.ariaLabelledby,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onKeyPress = props.onKeyPress,
      onInput = props.onInput;
  var labelId = (0, _generateId.useId)(props.labelId);
  var lineHeight = size === 'm' ? _inputBox.LINE_HEIGHT_M : _inputBox.LINE_HEIGHT_L;

  var handleChange = function handleChange(event) {
    onChange(event, {
      value: event.target.value,
      name: name
    });
  };

  var handleKeyDown = function handleKeyDown(event) {
    var preventReturn = props.preventReturn,
        onKeyDown = props.onKeyDown;

    if (preventReturn && event.keyCode === 13) {
      event.preventDefault();
    }

    onKeyDown && onKeyDown(event, {
      name: name,
      value: value
    });
  };

  var handleFocus = function handleFocus(event) {
    onFocus(event, {
      name: name,
      value: value
    });
  };

  var handleBlur = function handleBlur(event) {
    onBlur(event, {
      name: name,
      value: value
    });
  };

  var handleInput = function handleInput(event) {
    onInput && onInput(event, {
      name: name,
      value: value
    });
  };

  var handleKeyPress = function handleKeyPress(event) {
    onKeyPress && onKeyPress(event, {
      name: name,
      value: value
    });
  };

  var _useDetachedScrollBar = (0, _useDetachedScrollBar2.useDetachedScrollBar)(),
      containerProps = _useDetachedScrollBar[0],
      scrollProps = _useDetachedScrollBar[1],
      scrollBarProps = _useDetachedScrollBar[2];

  var textarea = /*#__PURE__*/_react.default.createElement(_TextareaValue.TextareaValue, {
    focused: focused,
    "aria-controls": ariaControls,
    "aria-autocomplete": ariaAutocomplete,
    "aria-errormessage": ariaErrorMessage,
    "aria-describedby": ariaDescribedBy,
    "aria-invalid": error,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby || labelId,
    ref: (0, _useCallbackRef.useMergeRefs)([forwardedRef, refCallback]),
    className: _TextareaModule.default.textarea,
    id: id,
    name: name,
    dataQaType: dataQaType,
    placeholder: placeholder,
    disabled: disabled,
    readOnly: readOnly,
    value: value,
    onChange: handleChange,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onInput: handleInput,
    onKeyDown: handleKeyDown,
    onKeyPress: handleKeyPress,
    style: {
      minHeight: rows ? Number(rows) * lineHeight : undefined
    },
    rows: minRows,
    cobrowsingSecure: cobrowsingSecure,
    whiteSpace: "pre-wrap"
  });

  var scrollBar = /*#__PURE__*/_react.default.createElement(_scroll.ScrollBar, scrollBarProps);

  var counter = minRows && minRows > 1 && maxLength ? /*#__PURE__*/_react.default.createElement(_Counter.Counter, {
    length: value.length,
    maxLength: maxLength
  }) : null;
  return /*#__PURE__*/_react.default.createElement(_inputTools.FocusArea, Object.assign({
    className: _TextareaModule.default.root,
    "data-qa-type": dataQaType
  }, containerProps), /*#__PURE__*/_react.default.createElement(_inputBox.default, {
    rightContent: rightContent,
    leftContent: leftContent,
    flatCorners: flatCorners,
    label: label,
    error: error,
    expandable: true,
    filled: filled || !!value,
    focused: focused,
    readOnly: readOnly,
    disabled: disabled,
    required: required,
    hintBlock: hintBlock,
    labelId: labelId,
    size: size,
    valid: valid && !error,
    counter: counter,
    scrollBar: scrollBar
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _TextareaModule.default.textareaContainer,
    style: {
      height: rows ? Number(rows) * lineHeight : undefined
    }
  }, rows ? /*#__PURE__*/_react.default.createElement(_scroll.default, scrollProps, /*#__PURE__*/_react.default.createElement("div", {
    className: _TextareaModule.default.scrollContent
  }, textarea)) : textarea)));
});
exports.TextareaStateless = TextareaStateless;
var Textarea = (0, _stateUtils.withValueInputState)(TextareaStateless, {
  emptyValue: ''
});
var _default = Textarea;
exports.default = _default;