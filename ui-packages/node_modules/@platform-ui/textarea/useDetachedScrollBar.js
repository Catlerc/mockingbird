"use strict";

exports.__esModule = true;
exports.useDetachedScrollBar = void 0;

var _react = require("react");

var noop = function noop() {};

var useDetachedScrollBar = function useDetachedScrollBar() {
  var _useState = (0, _react.useState)(0),
      size = _useState[0],
      setSize = _useState[1];

  var _useState2 = (0, _react.useState)(false),
      hovered = _useState2[0],
      setHovered = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      dragging = _useState3[0],
      setDragging = _useState3[1];

  var _useState4 = (0, _react.useState)(undefined),
      scrolling = _useState4[0],
      setScrolling = _useState4[1];

  var _useState5 = (0, _react.useState)(undefined),
      barElement = _useState5[0],
      setBarElement = _useState5[1];

  var handlers = (0, _react.useRef)({
    onMouseDown: noop,
    handleDragStart: noop,
    handleDragProcess: noop,
    handleDragEnd: noop
  });
  var containerProps = {
    onMouseOver: (0, _react.useCallback)(function () {
      setHovered(true);
    }, []),
    onMouseLeave: (0, _react.useCallback)(function () {
      setHovered(false);
    }, [])
  };
  var scrollProps = {
    getMouseDownFunc: (0, _react.useCallback)(function (func) {
      handlers.current.onMouseDown = func;
    }, []),
    getDragStartFunc: (0, _react.useCallback)(function (func) {
      handlers.current.handleDragStart = func;
    }, []),
    getDragProcessFunc: (0, _react.useCallback)(function (func) {
      handlers.current.handleDragProcess = func;
    }, []),
    getDragEndFunc: (0, _react.useCallback)(function (func) {
      handlers.current.handleDragEnd = func;
    }, []),
    scrollbarVisibility: 'hidden',
    verticalBarRef: barElement,
    onUpdate: (0, _react.useCallback)(function (_ref) {
      var isVScrolling = _ref.isVScrolling,
          verticalSize = _ref.verticalSize;
      setScrolling(isVScrolling);
      setSize(verticalSize || 0);
    }, [])
  };
  var scrollBarProps = {
    size: size,
    visible: hovered || scrolling,
    direction: 'vertical',
    onMouseDown: (0, _react.useCallback)(function () {
      var _handlers$current;

      (_handlers$current = handlers.current).onMouseDown.apply(_handlers$current, arguments);
    }, []),
    handleDragStart: (0, _react.useCallback)(function () {
      var _handlers$current2;

      (_handlers$current2 = handlers.current).handleDragStart.apply(_handlers$current2, arguments);
    }, []),
    handleDragProcess: (0, _react.useCallback)(function () {
      var _handlers$current3;

      (_handlers$current3 = handlers.current).handleDragProcess.apply(_handlers$current3, arguments);
    }, []),
    handleDragEnd: (0, _react.useCallback)(function () {
      var _handlers$current4;

      (_handlers$current4 = handlers.current).handleDragEnd.apply(_handlers$current4, arguments);
    }, []),
    barRef: (0, _react.useCallback)(function (el) {
      setBarElement(el || undefined);
    }, [])
  };
  return [containerProps, scrollProps, scrollBarProps];
};

exports.useDetachedScrollBar = useDetachedScrollBar;