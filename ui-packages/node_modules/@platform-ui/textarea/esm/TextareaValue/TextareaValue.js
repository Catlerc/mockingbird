import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["dataQaType", "value", "focused", "cobrowsingSecure"];
import React, { forwardRef, useState, useRef, useEffect, useCallback } from 'react';
import throttle from '@tinkoff/utils/function/throttle';
import { useMergeRefs } from 'use-callback-ref';
import { useControlledFocus } from '@platform-ui/focusUtils';
import { placeholderHOC, InlinePlaceholder } from '@platform-ui/inputTools';
import styles from './TextareaValue.module.css';
export const TextareaValue = placeholderHOC(InlinePlaceholder)( /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const selfRef = useRef(null);

  const _useControlledFocus = useControlledFocus(_extends({}, props, {
    ref: useMergeRefs([selfRef, forwardedRef])
  })),
        {
    dataQaType,
    value,
    cobrowsingSecure
  } = _useControlledFocus,
        otherProps = _objectWithoutPropertiesLoose(_useControlledFocus, _excluded);

  const [height, setHeight] = useState('auto');
  const updateHeight = useCallback(() => {
    const textarea = selfRef.current;

    if (!textarea) {
      return;
    }

    textarea.style.height = 'auto';
    const {
      scrollHeight
    } = textarea;

    if (scrollHeight === 0) {
      return;
    }

    textarea.style.height = `${scrollHeight}px`;
    setHeight(scrollHeight);
  }, []);
  useEffect(updateHeight, [value, updateHeight]);
  useEffect(() => {
    if (typeof ResizeObserver !== 'undefined') {
      const observer = new ResizeObserver(updateHeight);

      if (selfRef.current) {
        observer.observe(selfRef.current);
      }

      return () => {
        observer.disconnect();
      };
    }

    const onWindowResize = throttle(100, updateHeight);
    window.addEventListener('resize', onWindowResize);
    return () => {
      window.removeEventListener('resize', onWindowResize);
    };
  }, [updateHeight]);
  return /*#__PURE__*/React.createElement("textarea", Object.assign({}, otherProps, {
    "data-qa-type": `${dataQaType}.input`,
    className: styles.textarea,
    value: value,
    style: _extends({}, otherProps.style || {}, {
      height
    }),
    placeholder: "",
    "data-cobrowsing-secure": cobrowsingSecure ? 'input' : ''
  }));
}));