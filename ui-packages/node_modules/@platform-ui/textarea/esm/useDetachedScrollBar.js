import { useState, useRef, useCallback } from 'react';

const noop = () => {};

export const useDetachedScrollBar = () => {
  const [size, setSize] = useState(0);
  const [hovered, setHovered] = useState(false);
  const [dragging, setDragging] = useState(false);
  const [scrolling, setScrolling] = useState(undefined);
  const [barElement, setBarElement] = useState(undefined);
  const handlers = useRef({
    onMouseDown: noop,
    handleDragStart: noop,
    handleDragProcess: noop,
    handleDragEnd: noop
  });
  const containerProps = {
    onMouseOver: useCallback(() => {
      setHovered(true);
    }, []),
    onMouseLeave: useCallback(() => {
      setHovered(false);
    }, [])
  };
  const scrollProps = {
    getMouseDownFunc: useCallback(func => {
      handlers.current.onMouseDown = func;
    }, []),
    getDragStartFunc: useCallback(func => {
      handlers.current.handleDragStart = func;
    }, []),
    getDragProcessFunc: useCallback(func => {
      handlers.current.handleDragProcess = func;
    }, []),
    getDragEndFunc: useCallback(func => {
      handlers.current.handleDragEnd = func;
    }, []),
    scrollbarVisibility: 'hidden',
    verticalBarRef: barElement,
    onUpdate: useCallback(({
      isVScrolling,
      verticalSize
    }) => {
      setScrolling(isVScrolling);
      setSize(verticalSize || 0);
    }, [])
  };
  const scrollBarProps = {
    size,
    visible: hovered || scrolling,
    direction: 'vertical',
    onMouseDown: useCallback((...args) => {
      handlers.current.onMouseDown(...args);
    }, []),
    handleDragStart: useCallback((...args) => {
      handlers.current.handleDragStart(...args);
    }, []),
    handleDragProcess: useCallback((...args) => {
      handlers.current.handleDragProcess(...args);
    }, []),
    handleDragEnd: useCallback((...args) => {
      handlers.current.handleDragEnd(...args);
    }, []),
    barRef: useCallback(el => {
      setBarElement(el || undefined);
    }, [])
  };
  return [containerProps, scrollProps, scrollBarProps];
};