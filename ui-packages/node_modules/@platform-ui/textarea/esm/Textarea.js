import React, { forwardRef } from 'react';
import { useMergeRefs } from 'use-callback-ref';
import { useId } from '@platform-ui/generateId';
import { withValueInputState } from '@platform-ui/stateUtils';
import InputBox, { LINE_HEIGHT_L, LINE_HEIGHT_M } from '@platform-ui/inputBox';
import Scroll, { ScrollBar } from '@platform-ui/scroll';
import { FocusArea } from '@platform-ui/inputTools';
import { Counter } from './Counter';
import { TextareaValue } from './TextareaValue/TextareaValue';
import { useDetachedScrollBar } from './useDetachedScrollBar';
import styles from './Textarea.module.css';
export const TextareaStateless = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const {
    dataQaType = 'uikit/textarea',
    id,
    name,
    value,
    placeholder,
    disabled,
    readOnly,
    rows,
    minRows = 3,
    maxLength,
    size = 'l',
    label,
    error,
    valid,
    filled,
    focused,
    required,
    flatCorners,
    hintBlock,
    leftContent,
    rightContent,
    cobrowsingSecure,
    ariaControls,
    refCallback,
    ariaAutocomplete,
    ariaErrorMessage,
    ariaDescribedBy,
    ariaLabel,
    ariaLabelledby,
    onChange,
    onFocus,
    onBlur,
    onKeyPress,
    onInput
  } = props;
  const labelId = useId(props.labelId);
  const lineHeight = size === 'm' ? LINE_HEIGHT_M : LINE_HEIGHT_L;

  const handleChange = event => {
    onChange(event, {
      value: event.target.value,
      name
    });
  };

  const handleKeyDown = event => {
    const {
      preventReturn,
      onKeyDown
    } = props;

    if (preventReturn && event.keyCode === 13) {
      event.preventDefault();
    }

    onKeyDown && onKeyDown(event, {
      name,
      value
    });
  };

  const handleFocus = event => {
    onFocus(event, {
      name,
      value
    });
  };

  const handleBlur = event => {
    onBlur(event, {
      name,
      value
    });
  };

  const handleInput = event => {
    onInput && onInput(event, {
      name,
      value
    });
  };

  const handleKeyPress = event => {
    onKeyPress && onKeyPress(event, {
      name,
      value
    });
  };

  const [containerProps, scrollProps, scrollBarProps] = useDetachedScrollBar();
  const textarea = /*#__PURE__*/React.createElement(TextareaValue, {
    focused: focused,
    "aria-controls": ariaControls,
    "aria-autocomplete": ariaAutocomplete,
    "aria-errormessage": ariaErrorMessage,
    "aria-describedby": ariaDescribedBy,
    "aria-invalid": error,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby || labelId,
    ref: useMergeRefs([forwardedRef, refCallback]),
    className: styles.textarea,
    id: id,
    name: name,
    dataQaType: dataQaType,
    placeholder: placeholder,
    disabled: disabled,
    readOnly: readOnly,
    value: value,
    onChange: handleChange,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onInput: handleInput,
    onKeyDown: handleKeyDown,
    onKeyPress: handleKeyPress,
    style: {
      minHeight: rows ? Number(rows) * lineHeight : undefined
    },
    rows: minRows,
    cobrowsingSecure: cobrowsingSecure,
    whiteSpace: "pre-wrap"
  });
  const scrollBar = /*#__PURE__*/React.createElement(ScrollBar, scrollBarProps);
  const counter = minRows && minRows > 1 && maxLength ? /*#__PURE__*/React.createElement(Counter, {
    length: value.length,
    maxLength: maxLength
  }) : null;
  return /*#__PURE__*/React.createElement(FocusArea, Object.assign({
    className: styles.root,
    "data-qa-type": dataQaType
  }, containerProps), /*#__PURE__*/React.createElement(InputBox, {
    rightContent: rightContent,
    leftContent: leftContent,
    flatCorners: flatCorners,
    label: label,
    error: error,
    expandable: true,
    filled: filled || !!value,
    focused: focused,
    readOnly: readOnly,
    disabled: disabled,
    required: required,
    hintBlock: hintBlock,
    labelId: labelId,
    size: size,
    valid: valid && !error,
    counter: counter,
    scrollBar: scrollBar
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.textareaContainer,
    style: {
      height: rows ? Number(rows) * lineHeight : undefined
    }
  }, rows ? /*#__PURE__*/React.createElement(Scroll, scrollProps, /*#__PURE__*/React.createElement("div", {
    className: styles.scrollContent
  }, textarea)) : textarea)));
});
const Textarea = withValueInputState(TextareaStateless, {
  emptyValue: ''
});
export default Textarea;