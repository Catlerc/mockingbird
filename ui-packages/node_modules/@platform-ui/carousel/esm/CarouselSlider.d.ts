import React, { PureComponent } from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
export declare type SliderProps = DataQaInterface & React.PropsWithChildren<{
    /**
     * Флаг, включающий возможность перетаскивания слайдов
     */
    draggable?: boolean;
    /**
     * Длительность анимации смены слайдов
     */
    duration?: number;
    /**
     * Функция анимации смены слайдов
     */
    easing?: string;
    /**
     * Количество слайдов на странице
     */
    perPage: number;
    /**
     * Пороговое значения сдвига при перетаскивании, для смены слайда
     */
    threshold: number;
    /**
     * Флаг, включающий зациклинность анимации
     */
    loop?: boolean;
    /**
     * Добавляет эластик эффект при выходе за границы
     */
    elastic?: boolean;
    /**
     * Отступ между слайдами
     */
    margin: number;
    /**
     * Отступ по бокам контейнера (для отображения кусочков соседних слайдов)
     */
    stagePadding?: number;
    /**
     * Автоматическое изменение высоты контейнера в зависимости от высоты текущего слайда
     */
    autoHeight?: boolean;
    /**
     * Количество слайдов перелистываемых за раз
     */
    slideStep?: number;
    /**
     * Обработчик на завершение перетаскивания слайда
     */
    onDragEnd: () => void;
    /**
     * Скрыть слайды за пределами видимой области
     */
    hideInvisibleSlides?: boolean;
    /**
     * Анимировать скрываемые слайды
     */
    animateHiding?: boolean;
    /**
     * Индекс текущего слайда
     */
    startIndex: number;
    /**
     *  Сallback события смены слайда
     */
    onSlide: (translateTo: number) => void;
    /**
     * Overflow контейнера со слайдами
     */
    containerOverflow?: React.CSSProperties['overflow'];
    /**
     * Выбор скругления углов карусели
     */
    borderRadius?: React.CSSProperties['borderRadius'];
}>;
declare type SliderState = {
    preview?: boolean;
};
declare class Slider extends PureComponent<SliderProps, SliderState> {
    container: React.RefObject<HTMLDivElement>;
    sliderFrame: React.RefObject<HTMLUListElement>;
    items: Record<string, HTMLLIElement>;
    refMemo: Record<string, (elem: HTMLLIElement) => void>;
    currentIndex: number;
    elemWidth?: number;
    moving?: boolean;
    dragging?: boolean;
    drag: {
        start?: number;
        startY?: number;
        end?: number;
        direction?: 'vertical' | 'horizontal' | null;
    };
    setRef: (refName: string) => (elem: HTMLLIElement) => void;
    constructor(props: SliderProps);
    static defaultProps: {
        duration: number;
        easing: string;
        perPage: number;
        startIndex: number;
        draggable: boolean;
        threshold: number;
        loop: boolean;
        onSlide: import("@tinkoff/utils/typings/types").Func<void>;
        children: never[];
        margin: number;
        stagePadding: number;
        autoHeight: boolean;
        slideStep: null;
        elastic: boolean;
        onDragEnd: import("@tinkoff/utils/typings/types").Func<void>;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: SliderProps, prevState: SliderState): void;
    componentWillUnmount(): void;
    handleTransitionEnd: () => void;
    handleResize: () => void;
    handleStart: (e: TouchEvent | MouseEvent) => void;
    handleMove: (e: TouchEvent | MouseEvent) => void;
    handleEnd: () => void;
    getChildren(): React.ReactNode;
    getCycledIndex(index: number): number;
    getSlideStep(): number;
    getItemStyles(index: number): {
        visibility: "hidden" | "visible";
        opacity: number;
        transition: string | undefined;
    } | {
        visibility: "hidden" | "visible";
        opacity?: undefined;
        transition?: undefined;
    };
    getTransform(position: number): string;
    isElemHidden(i: number, position?: number): true | undefined;
    normalizePosition(pos: number): number;
    translate(from: number, to: number, dir: number): void;
    setFramePosition(position: number): void;
    clearDrag(): void;
    setContainerHeight(): void;
    updateAfterDrag(): void;
    prev(): void;
    next(): void;
    toggleFrameTransition(enabled?: boolean): void;
    toggleElemsTransition(enabled?: boolean): void;
    updateAriaHiddenOfElems(position?: number): void;
    render(): JSX.Element;
}
export default Slider;
