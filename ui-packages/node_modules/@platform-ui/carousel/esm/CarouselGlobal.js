import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["activeIndex", "autoplay", "autoplayTimeout", "children", "customControls", "customCounter", "dataQaType", "nextButton", "prevButton", "setActive", "withControls", "withCounter"];
import React, { useState, useRef, useEffect, useCallback } from 'react';
import dataQa from '@platform-ui/dataQa';
import generateId from '@platform-ui/generateId';
import Slider from './CarouselSlider';
import ControlsGlobal from './CarouselControlsGlobal';
import s from './Carousel.module.css';

const noop = () => {};

const Carousel = props => {
  const {
    activeIndex,
    autoplay,
    autoplayTimeout,
    children,
    customControls: ControlsComponent,
    customCounter: CounterComponent,
    dataQaType,
    nextButton,
    prevButton,
    setActive,
    withControls,
    withCounter
  } = props,
        otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  const sliderRef = useRef(null);
  const carouselId = useRef(generateId());
  const autoplayInterval = useRef();
  const [currentSlide, setCurrentSlide] = useState(activeIndex);
  const [startIndex, setStartIndex] = useState(activeIndex);
  const [hovered, setHovered] = useState(false);
  const handleNextClick = useCallback(() => {
    var _sliderRef$current;

    (_sliderRef$current = sliderRef.current) == null ? void 0 : _sliderRef$current.next();
  }, []);
  const handlePrevClick = useCallback(() => {
    var _sliderRef$current2;

    (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.prev();
  }, []);
  const handleSlide = useCallback(index => {
    setCurrentSlide(index);
    setActive(index);
  }, [setActive]);
  const handleMouseOver = useCallback(() => {
    setHovered(true);
  }, []);
  const handleMouseOut = useCallback(() => {
    setHovered(false);
  }, []);
  const startAutoplay = useCallback(() => {
    if (autoplayInterval.current !== undefined) {
      return;
    }

    autoplayInterval.current = window.setInterval(() => {
      var _sliderRef$current3;

      (_sliderRef$current3 = sliderRef.current) == null ? void 0 : _sliderRef$current3.next();
    }, autoplayTimeout);
  }, [autoplayTimeout]);
  const stopAutoplay = useCallback(() => {
    if (autoplayInterval.current !== undefined) {
      clearInterval(autoplayInterval.current);
    }

    autoplayInterval.current = undefined;
  }, []);
  useEffect(() => {
    if (activeIndex !== startIndex) {
      setStartIndex(activeIndex);
    }
  }, [activeIndex, startIndex]);
  useEffect(() => {
    if (autoplay && !hovered) {
      startAutoplay();
    } else {
      stopAutoplay();
    }

    return () => {
      stopAutoplay();
    };
  }, [autoplay, hovered, startAutoplay, stopAutoplay]);
  const wrappedChildren = React.Children.toArray(children);
  const isMultiPage = wrappedChildren.length > props.perPage;
  return /*#__PURE__*/React.createElement("div", Object.assign({}, dataQa({
    dataQaType
  }), {
    id: carouselId.current,
    className: s.carousel,
    onMouseEnter: autoplay ? handleMouseOver : undefined,
    onMouseLeave: autoplay ? handleMouseOut : undefined
  }), prevButton && isMultiPage && /*#__PURE__*/React.cloneElement(prevButton, {
    disabled: !props.loop && currentSlide === 0,
    onClick: handlePrevClick
  }), /*#__PURE__*/React.createElement(Slider, Object.assign({}, otherProps, {
    dataQaType: `${dataQaType}.slider`,
    ref: sliderRef,
    startIndex: startIndex,
    onSlide: handleSlide,
    onDragEnd: props.onDragEnd
  }), wrappedChildren), nextButton && isMultiPage && /*#__PURE__*/React.cloneElement(nextButton, {
    disabled: !props.loop && currentSlide >= wrappedChildren.length - props.perPage,
    onClick: handleNextClick
  }), withCounter && isMultiPage && CounterComponent && /*#__PURE__*/React.createElement(CounterComponent, {
    dataQaType: `${dataQaType}.counter`,
    currentSlideIndex: currentSlide + 1,
    totalSlidesCount: wrappedChildren.length
  }), withControls && !(prevButton || nextButton) && isMultiPage && /*#__PURE__*/React.createElement(ControlsComponent, {
    dataQaType: `${dataQaType}.controls`,
    carouselId: carouselId.current,
    prevDisabled: !props.loop && currentSlide === 0,
    nextDisabled: !props.loop && currentSlide >= wrappedChildren.length - props.perPage,
    onNextClick: handleNextClick,
    onPrevClick: handlePrevClick
  }));
};

Carousel.defaultProps = _extends({}, Slider.defaultProps, {
  activeIndex: 0,
  children: [],
  dataQaType: 'uikit/carousel',
  withControls: false,
  withCounter: false,
  customCounter: null,
  prevButton: null,
  nextButton: null,
  customControls: ControlsGlobal,
  setActive: noop,
  startIndex: 0,
  perPage: 1,
  loop: false,
  slideStep: null,
  autoplay: false,
  autoplayTimeout: 10000,
  onDragEnd: noop,
  hideInvisibleSlides: false,
  animateHiding: true
});
export default Carousel;