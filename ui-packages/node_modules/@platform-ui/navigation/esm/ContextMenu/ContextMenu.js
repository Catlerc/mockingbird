import React, { useMemo, useState } from 'react';
import cn from 'classnames';
import ContextMenuBase from '@platform-ui/contextMenu';
import ArrowDown from '@platform-ui/iconsPack/interface/24/ArrowDown';
import { menuItemToContextMenu } from '../utils';
import styles from './ContextMenu.module.css';
import { useNavigationContext } from '../NavigationContext';

function ContextMenu({
  items,
  withTitle = true
}) {
  const {
    theme
  } = useNavigationContext();
  const [opened, setOpened] = useState(false);
  const selectedItem = ((items == null ? void 0 : items.filter(item => item.active === true)[0]) || items[0]).title;
  const memoizedItems = useMemo(() => items.map(item => menuItemToContextMenu(item)), [items]);

  const handleShow = () => {
    setOpened(true);
  };

  const handleClose = () => {
    setOpened(false);
  };

  return /*#__PURE__*/React.createElement(ContextMenuBase, {
    showOnHover: true,
    items: memoizedItems,
    itemSize: "xs",
    hideOnResize: true,
    onShow: handleShow,
    onClose: handleClose
  }, /*#__PURE__*/React.createElement("span", {
    className: cn(styles.root, {
      [styles[`root_theme_${theme}`]]: theme,
      [styles.root_active]: opened
    })
  }, withTitle ? /*#__PURE__*/React.createElement("span", {
    className: styles.content
  }, selectedItem) : null, /*#__PURE__*/React.createElement("span", {
    className: cn(styles.arrow, {
      [styles.arrow_opened]: opened
    })
  }, /*#__PURE__*/React.createElement(ArrowDown, null))));
}

ContextMenu.displayName = 'Navigation.ContextMenu';
export default ContextMenu;