"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var _MenuModule = _interopRequireDefault(require("./Menu.module.css"));

var _excluded = ["items"];

var Menu = function Menu(props) {
  var items = props.items,
      underlined = props.underlined,
      onClick = props.onClick,
      _props$align = props.align,
      align = _props$align === void 0 ? 'left' : _props$align,
      dataQaType = props.dataQaType,
      dataQaData = props.dataQaData;

  var _React$useState = _react.default.useState(items.length - 1),
      contextMenuIndex = _React$useState[0],
      setContextMenuIndex = _React$useState[1];

  var memoizedContextItems = (0, _react.useMemo)(function () {
    return items.slice(contextMenuIndex + 1, items.length).map(function (_ref) {
      var __ = _ref.items,
          itemProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
      return (0, _extends2.default)({
        onClick: onClick
      }, itemProps);
    });
  }, [contextMenuIndex, items, onClick]);

  var rootRef = _react.default.useRef(null);

  _react.default.useEffect(function () {
    var root = rootRef.current;

    if (root === null) {
      return;
    }

    var indexMap = new WeakMap();
    var lastVisibleIndex = items.length - 1;

    if (typeof IntersectionObserver !== 'undefined') {
      var observer = new IntersectionObserver(function (entries) {
        entries.forEach(function (entry) {
          var index = indexMap.get(entry.target);
          var visible = entry.intersectionRatio > 0;

          if (visible && index > lastVisibleIndex) {
            lastVisibleIndex = index;
          }

          if (!visible && index <= lastVisibleIndex) {
            lastVisibleIndex = index - 1;
          }
        });
        setContextMenuIndex(lastVisibleIndex);
      }, {
        root: root,
        rootMargin: '-1px'
      });
      /**
       * Chrome до 51 версии не поддерживает forEach в NodeList,
       * а полифила может не оказаться, по этому перебираем через for
       * https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach
       */

      for (var i = 0; i < root.childNodes.length; i++) {
        indexMap.set(root.childNodes[i], i);
        observer.observe(root.childNodes[i]);
      }

      return function () {
        observer.disconnect();
      };
    }
    /**
     * Для старых браузеров делаем фолбэк на ресайз окна
     * Этого должно быть достаточно, т.к. навигация у нас во всю ширину
     */


    var onWindowResize = function onWindowResize() {
      var rootRect = root.getBoundingClientRect(); // Нулевой элемент всегда виден, поэтому > а не >= и установка индекса после цикла

      for (var _i = root.childNodes.length - 1; _i > 0; _i--) {
        var child = root.childNodes[_i];
        var childRect = child.getBoundingClientRect();

        if (childRect.top === rootRect.top) {
          setContextMenuIndex(_i);
          return;
        }
      }

      setContextMenuIndex(0);
    };

    onWindowResize();
    window.addEventListener('resize', onWindowResize);
    return function () {
      window.removeEventListener('resize', onWindowResize);
    };
  }, [items]);

  return /*#__PURE__*/_react.default.createElement("nav", {
    ref: rootRef,
    className: _MenuModule.default.root + " " + _MenuModule.default["root_align_" + align],
    "data-qa-type": dataQaType || 'uikit/navigation.menu',
    "data-qa-data": dataQaData
  }, items.map(function (itemProps, index) {
    return /*#__PURE__*/_react.default.createElement(_MenuItem.default, Object.assign({
      key: itemProps.id || index,
      hidden: index > contextMenuIndex,
      contextItems: index === contextMenuIndex && index < items.length - 1 ? memoizedContextItems : undefined,
      underlined: underlined,
      onClick: onClick
    }, itemProps));
  }));
};

var _default = Menu;
exports.default = _default;