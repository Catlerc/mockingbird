import React from 'react';
import type { ClickableProps } from '@platform-ui/clickable';
export declare const props: {
    sizes: string[];
    themes: string[];
};
declare type CustomTheme = {
    border?: string;
    background?: string;
    hideOverlay?: boolean;
};
export interface ButtonProps extends Pick<ClickableProps, Exclude<keyof ClickableProps, 'unselectable' | 'innerClassName' | 'className'>> {
    /**
     * Атрибут aria-busy
     */
    ariaBusy?: boolean;
    /**
     * accessibility-тэг(нужно заполнять вручную если содержимое кнопки - не строка)
     */
    ariaLabel?: string;
    /**
     * Цветовая схема
     */
    theme?: CustomTheme | 'primary' | 'secondary' | 'outline' | 'outlineDark' | 'outlineLight' | 'flat' | 'flatDark' | 'flatLight' | 'mono';
    /**
     * Размер
     */
    size?: 'xl' | 'l' | 'm' | 's' | 'xs';
    /**
     * Флаг отвечающий за отображение кнопки на всю ширину родительского блока
     */
    wide?: boolean;
    /**
     * Флаг отвечающий за отображение кнопки на всю ширину родительского блока для брейкпойнта Tablet S
     */
    wideTabletS?: boolean;
    /**
     * Флаг отвечающий за отображение кнопки на всю ширину родительского блока для брейкпойнта Tablet L
     */
    wideTabletL?: boolean;
    /**
     * Флаг отвечающий за отобржение кнопки на всю ширину родительского блока для брейкпойнта Desktop S
     */
    wideDesktopS?: boolean;
    /**
     * Флаг отвечающий за отображение кнопки на всю ширину родительского блока для брейкпойнта Desktop M
     */
    wideDesktopM?: boolean;
    /**
     * Флаг отвечающий за отображение кнопки на всю ширину родительского блока для брейкпойнта Desktop L
     */
    wideDesktopL?: boolean;
    /**
     * Иконка.
     *
     * ⚠️ Для размеров `s` и `xs` используйте иконки 16x16, для остальных размеров используйте 24x24
     */
    icon?: React.ComponentType | React.ReactNode;
    /**
     * Делает кнопку круглой
     */
    round?: boolean;
    /**
     * Отмена скругления углов кнопки
     */
    flatCorners?: string;
    /**
     * Callback события mouseOver
     */
    onMouseOver?: (event: React.MouseEvent) => void;
    /**
     * Callback события mouseLeave
     */
    onMouseLeave?: (event: React.MouseEvent) => void;
    /**
     * Флаг указывает, что компонент находится в группе
     */
    inGroup?: boolean;
    /**
     * Компонент является ссылкой с размерами кнопки
     */
    isButtonLink?: boolean;
    /**
     * Направление в группе
     */
    vertical?: boolean;
    /**
     * Флаг для uppercase
     */
    uppercase?: boolean;
    /**
     * Запрещает выделение текста на кнопке
     */
    unselectable?: boolean;
    /**
     * Заливает кнопку на указанное количество процентов
     * от 0 до 100
     */
    progressiveFill?: number;
    /**
     *  Отключает горизонтальный padding
     */
    disableHorizontalPadding?: boolean;
}
declare const Button: React.ForwardRefExoticComponent<ButtonProps & React.RefAttributes<HTMLElement>>;
export default Button;
