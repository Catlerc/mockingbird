import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef } from 'react';
import cn from 'classnames';
import noop from '@tinkoff/utils/function/noop'; // @ts-ignore

import { calcFontColor } from '@platform-ui/utils/color'; // @ts-ignore

import getBackgroundMainColor from '@platform-ui/utils/getBackgroundMainColor';
import Clickable from '@platform-ui/clickable';
import * as corners from '@platform-ui/flatCorners';
import styles from './Button.module.css';
const ICON_SIZE = 24;

const limitProgressiveFillValue = percent => Math.min(Math.max(percent, -100), 0); // Используется в stories компонентов Button и Group


export const props = {
  sizes: ['xl', 'l', 'm', 's', 'xs'],
  themes: ['primary', 'secondary', 'outline', 'outlineDark', 'outlineLight', 'flat', 'flatDark', 'flatLight', 'mono']
};
const Button = /*#__PURE__*/forwardRef(({
  ariaBusy,
  ariaLabel,
  children,
  dataQaData,
  dataQaType,
  disabled,
  flatCorners,
  href,
  icon,
  inGroup,
  isButtonLink,
  progressiveFill,
  round,
  size,
  tabIndex,
  tagName,
  target,
  theme,
  type,
  unselectable,
  uppercase,
  vertical,
  wide,
  wideDesktopL,
  wideDesktopM,
  wideDesktopS,
  wideTabletL,
  wideTabletS,
  onClick,
  onMouseLeave,
  onMouseOver,
  innerRef,
  disableHorizontalPadding
}, ref) => {
  const IconTag = icon;
  const isIcon = IconTag && !children;
  const themeType = typeof theme !== 'object' ? theme : 'custom';
  const customTheme = theme;
  return /*#__PURE__*/React.createElement(Clickable, {
    ref: ref,
    "aria-busy": ariaBusy,
    dataQaData: dataQaData,
    dataQaType: dataQaType,
    tagName: tagName,
    target: target,
    type: href ? undefined : type,
    href: href,
    "aria-label": (!children || typeof children !== 'string') && ariaLabel || undefined,
    disabled: disabled,
    onClick: onClick,
    onMouseOver: onMouseOver,
    onMouseLeave: onMouseLeave,
    tabIndex: tabIndex,
    className: cn({
      [styles.button]: true,
      [styles[`button_theme_${themeType}`]]: !isButtonLink && true,
      [styles.button_theme_custom_hideOverlay]: customTheme.hideOverlay,
      [styles.button_disabled]: disabled,
      [styles[`button_wide_${wide}`]]: wide,
      [styles[`button_wideTabletS_${wideTabletS}`]]: typeof wideTabletS !== 'undefined',
      [styles[`button_wideTabletL_${wideTabletL}`]]: typeof wideTabletL !== 'undefined',
      [styles[`button_wideDesktopS_${wideDesktopS}`]]: typeof wideDesktopS !== 'undefined',
      [styles[`button_wideDesktopM_${wideDesktopM}`]]: typeof wideDesktopM !== 'undefined',
      [styles[`button_wideDesktopL_${wideDesktopL}`]]: typeof wideDesktopL !== 'undefined',
      [styles.button_inGroup]: inGroup,
      [styles.button_round]: isIcon && round,
      [styles.button_isButtonLink]: isButtonLink,
      [styles.button_inGroup_horizontal]: inGroup && !vertical,
      [styles.button_inGroup_vertical]: inGroup && vertical,
      [styles.button_uppercase]: uppercase,
      [styles.button_unselectable]: unselectable
    }),
    style: _extends({
      color: customTheme.background && calcFontColor(getBackgroundMainColor(customTheme.background)),
      border: customTheme.border || customTheme.background && '1px solid transparent',
      // иначе (если ставить styles.backgroundOrigin = 'border-box') после смены обновления props и смены background
      // происходит сброс background-origin
      // вообще нужно для того, чтобы с градиентным фоном не появлялись артефакты на бордерах кнопки
      background: customTheme.background && `${customTheme.background} border-box`
    }, corners.style(flatCorners)),
    innerClassName: cn({
      [styles.buttonWrapper]: true,
      [styles[`buttonWrapper_size_${size}`]]: size,
      [styles.buttonWrapper_disableHorizontalPadding]: disableHorizontalPadding,
      [styles.buttonWrapper_isIcon]: isIcon
    }),
    innerRef: innerRef
  }, progressiveFill ? /*#__PURE__*/React.createElement("span", {
    className: styles.progressiveFillContainer
  }, /*#__PURE__*/React.createElement("span", {
    "data-qa-type": `${dataQaType}.progressiveFill`,
    className: styles.progressiveFill,
    style: {
      transform: `translateX(${limitProgressiveFillValue(-100 + progressiveFill)}%)`
    }
  })) : null, icon && /*#__PURE__*/React.createElement("div", {
    className: styles.icon,
    "data-qa-type": `${dataQaType}.icon`
  }, typeof icon === 'object' ? icon : /*#__PURE__*/React.createElement(IconTag, {
    iconSize: ICON_SIZE
  })), children && /*#__PURE__*/React.createElement("span", {
    className: styles.content,
    "data-qa-type": `${dataQaType}.content`
  }, children));
});
Button.defaultProps = {
  dataQaType: 'uikit/button',
  size: 'xl',
  theme: 'primary',
  type: 'button',
  onClick: noop,
  onMouseOver: noop,
  onMouseLeave: noop
}; // TODO: разобраться как подружить сборку TS и displayName

Button.displayName = 'Button';
export default Button;