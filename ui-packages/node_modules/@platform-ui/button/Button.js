"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.props = exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("@tinkoff/utils/function/noop"));

var _color = require("@platform-ui/utils/color");

var _getBackgroundMainColor = _interopRequireDefault(require("@platform-ui/utils/getBackgroundMainColor"));

var _clickable = _interopRequireDefault(require("@platform-ui/clickable"));

var corners = _interopRequireWildcard(require("@platform-ui/flatCorners"));

var _ButtonModule = _interopRequireDefault(require("./Button.module.css"));

// @ts-ignore
// @ts-ignore
var ICON_SIZE = 24;

var limitProgressiveFillValue = function limitProgressiveFillValue(percent) {
  return Math.min(Math.max(percent, -100), 0);
}; // Используется в stories компонентов Button и Group


var props = {
  sizes: ['xl', 'l', 'm', 's', 'xs'],
  themes: ['primary', 'secondary', 'outline', 'outlineDark', 'outlineLight', 'flat', 'flatDark', 'flatLight', 'mono']
};
exports.props = props;
var Button = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _cn, _cn2;

  var ariaBusy = _ref.ariaBusy,
      ariaLabel = _ref.ariaLabel,
      children = _ref.children,
      dataQaData = _ref.dataQaData,
      dataQaType = _ref.dataQaType,
      disabled = _ref.disabled,
      flatCorners = _ref.flatCorners,
      href = _ref.href,
      icon = _ref.icon,
      inGroup = _ref.inGroup,
      isButtonLink = _ref.isButtonLink,
      progressiveFill = _ref.progressiveFill,
      round = _ref.round,
      size = _ref.size,
      tabIndex = _ref.tabIndex,
      tagName = _ref.tagName,
      target = _ref.target,
      theme = _ref.theme,
      type = _ref.type,
      unselectable = _ref.unselectable,
      uppercase = _ref.uppercase,
      vertical = _ref.vertical,
      wide = _ref.wide,
      wideDesktopL = _ref.wideDesktopL,
      wideDesktopM = _ref.wideDesktopM,
      wideDesktopS = _ref.wideDesktopS,
      wideTabletL = _ref.wideTabletL,
      wideTabletS = _ref.wideTabletS,
      onClick = _ref.onClick,
      onMouseLeave = _ref.onMouseLeave,
      onMouseOver = _ref.onMouseOver,
      innerRef = _ref.innerRef,
      disableHorizontalPadding = _ref.disableHorizontalPadding;
  var IconTag = icon;
  var isIcon = IconTag && !children;
  var themeType = typeof theme !== 'object' ? theme : 'custom';
  var customTheme = theme;
  return /*#__PURE__*/_react.default.createElement(_clickable.default, {
    ref: ref,
    "aria-busy": ariaBusy,
    dataQaData: dataQaData,
    dataQaType: dataQaType,
    tagName: tagName,
    target: target,
    type: href ? undefined : type,
    href: href,
    "aria-label": (!children || typeof children !== 'string') && ariaLabel || undefined,
    disabled: disabled,
    onClick: onClick,
    onMouseOver: onMouseOver,
    onMouseLeave: onMouseLeave,
    tabIndex: tabIndex,
    className: (0, _classnames.default)((_cn = {}, _cn[_ButtonModule.default.button] = true, _cn[_ButtonModule.default["button_theme_" + themeType]] = !isButtonLink && true, _cn[_ButtonModule.default.button_theme_custom_hideOverlay] = customTheme.hideOverlay, _cn[_ButtonModule.default.button_disabled] = disabled, _cn[_ButtonModule.default["button_wide_" + wide]] = wide, _cn[_ButtonModule.default["button_wideTabletS_" + wideTabletS]] = typeof wideTabletS !== 'undefined', _cn[_ButtonModule.default["button_wideTabletL_" + wideTabletL]] = typeof wideTabletL !== 'undefined', _cn[_ButtonModule.default["button_wideDesktopS_" + wideDesktopS]] = typeof wideDesktopS !== 'undefined', _cn[_ButtonModule.default["button_wideDesktopM_" + wideDesktopM]] = typeof wideDesktopM !== 'undefined', _cn[_ButtonModule.default["button_wideDesktopL_" + wideDesktopL]] = typeof wideDesktopL !== 'undefined', _cn[_ButtonModule.default.button_inGroup] = inGroup, _cn[_ButtonModule.default.button_round] = isIcon && round, _cn[_ButtonModule.default.button_isButtonLink] = isButtonLink, _cn[_ButtonModule.default.button_inGroup_horizontal] = inGroup && !vertical, _cn[_ButtonModule.default.button_inGroup_vertical] = inGroup && vertical, _cn[_ButtonModule.default.button_uppercase] = uppercase, _cn[_ButtonModule.default.button_unselectable] = unselectable, _cn)),
    style: (0, _extends2.default)({
      color: customTheme.background && (0, _color.calcFontColor)((0, _getBackgroundMainColor.default)(customTheme.background)),
      border: customTheme.border || customTheme.background && '1px solid transparent',
      // иначе (если ставить styles.backgroundOrigin = 'border-box') после смены обновления props и смены background
      // происходит сброс background-origin
      // вообще нужно для того, чтобы с градиентным фоном не появлялись артефакты на бордерах кнопки
      background: customTheme.background && customTheme.background + " border-box"
    }, corners.style(flatCorners)),
    innerClassName: (0, _classnames.default)((_cn2 = {}, _cn2[_ButtonModule.default.buttonWrapper] = true, _cn2[_ButtonModule.default["buttonWrapper_size_" + size]] = size, _cn2[_ButtonModule.default.buttonWrapper_disableHorizontalPadding] = disableHorizontalPadding, _cn2[_ButtonModule.default.buttonWrapper_isIcon] = isIcon, _cn2)),
    innerRef: innerRef
  }, progressiveFill ? /*#__PURE__*/_react.default.createElement("span", {
    className: _ButtonModule.default.progressiveFillContainer
  }, /*#__PURE__*/_react.default.createElement("span", {
    "data-qa-type": dataQaType + ".progressiveFill",
    className: _ButtonModule.default.progressiveFill,
    style: {
      transform: "translateX(" + limitProgressiveFillValue(-100 + progressiveFill) + "%)"
    }
  })) : null, icon && /*#__PURE__*/_react.default.createElement("div", {
    className: _ButtonModule.default.icon,
    "data-qa-type": dataQaType + ".icon"
  }, typeof icon === 'object' ? icon : /*#__PURE__*/_react.default.createElement(IconTag, {
    iconSize: ICON_SIZE
  })), children && /*#__PURE__*/_react.default.createElement("span", {
    className: _ButtonModule.default.content,
    "data-qa-type": dataQaType + ".content"
  }, children));
});
Button.defaultProps = {
  dataQaType: 'uikit/button',
  size: 'xl',
  theme: 'primary',
  type: 'button',
  onClick: _noop.default,
  onMouseOver: _noop.default,
  onMouseLeave: _noop.default
}; // TODO: разобраться как подружить сборку TS и displayName

Button.displayName = 'Button';
var _default = Button;
exports.default = _default;