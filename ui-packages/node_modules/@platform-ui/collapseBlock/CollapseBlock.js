"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _CollapseBlockModule = _interopRequireDefault(require("./CollapseBlock.module.css"));

var CollapseBlock = function CollapseBlock(props) {
  var _cn;

  var _props$dataQaType = props.dataQaType,
      dataQaType = _props$dataQaType === void 0 ? 'uikit/CollapseBlock' : _props$dataQaType,
      dataQaData = props.dataQaData,
      collapsed = props.collapsed,
      children = props.children,
      minHeight = props.minHeight,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 250 : _props$duration,
      delay = props.delay,
      _props$overflowHidden = props.overflowHidden,
      overflowHidden = _props$overflowHidden === void 0 ? true : _props$overflowHidden,
      _props$childrenAlign = props.childrenAlign,
      childrenAlign = _props$childrenAlign === void 0 ? 'top' : _props$childrenAlign,
      _props$removeCollapse = props.removeCollapsedContent,
      removeCollapsedContent = _props$removeCollapse === void 0 ? true : _props$removeCollapse,
      onTransitionEnd = props.onTransitionEnd,
      _props$fallbackRender = props.fallbackRender,
      fallbackRender = _props$fallbackRender === void 0 ? false : _props$fallbackRender;

  var _useState = (0, _react.useState)(fallbackRender || !collapsed ? null : 0),
      height = _useState[0],
      setHeight = _useState[1];

  var _useState2 = (0, _react.useState)(collapsed ? 'collapsed' : 'expanded'),
      animationState = _useState2[0],
      setAnimationState = _useState2[1];

  var initedRef = (0, _react.useRef)(false);
  var childrenBlock = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (!initedRef.current) {
      initedRef.current = true;
      return;
    }

    if (!childrenBlock.current) {
      return;
    }

    if (animationState === 'collapsed') {
      setAnimationState('preparing');
    } else if (animationState === 'expanded') {
      setAnimationState('preparing');
      setHeight(childrenBlock.current.offsetHeight);
    } else {
      setHeight(collapsed ? 0 : childrenBlock.current.offsetHeight);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [collapsed]);
  (0, _react.useEffect)(function () {
    if (!childrenBlock.current) {
      return;
    }

    if (animationState === 'preparing') {
      setHeight(collapsed ? 0 : childrenBlock.current.offsetHeight);
      setAnimationState('animating');
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [animationState]);
  var handleTransitionEnd = (0, _react.useCallback)(function (e) {
    if (e.target !== e.currentTarget) {
      return;
    }

    if (collapsed) {
      setAnimationState('collapsed');
    } else {
      setAnimationState('expanded');
      setHeight(null);
    }

    onTransitionEnd && onTransitionEnd(e);
  }, [onTransitionEnd, collapsed]);
  var transitionDuration = animationState === 'animating' ? duration + "ms" : undefined;
  var transitionDelay = delay && animationState === 'animating' ? delay + "ms" : undefined;
  var overflow = overflowHidden || animationState !== 'expanded' ? 'hidden' : undefined;
  var hideChildren = removeCollapsedContent && animationState === 'collapsed';
  return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType,
    dataQaData: dataQaData
  }), {
    onTransitionEnd: handleTransitionEnd,
    className: _CollapseBlockModule.default.container,
    style: {
      minHeight: minHeight,
      height: height,
      overflow: overflow,
      WebkitTransitionDuration: transitionDuration,
      transitionDuration: transitionDuration,
      WebkitTransitionDelay: transitionDelay,
      transitionDelay: transitionDelay
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    ref: childrenBlock,
    className: (0, _classnames.default)((_cn = {}, _cn[_CollapseBlockModule.default.childrenBlock_animating] = animationState !== 'expanded' && typeof height === 'number', _cn[_CollapseBlockModule.default["childrenBlock_align_" + childrenAlign]] = childrenAlign, _cn))
  }, hideChildren ? null : children));
};
/* TODO: убрать в следующем мажорном обновлении */


CollapseBlock.defaultProps = {
  dataQaType: 'uikit/CollapseBlock',
  duration: 250,
  overflowHidden: true,
  childrenAlign: 'top',
  removeCollapsedContent: true
};
var _default = CollapseBlock;
exports.default = _default;