import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
export declare type InputBoxVariant = 'default' | 'mono';
export interface InputBoxProps extends React.HTMLAttributes<HTMLDivElement>, DataQaInterface {
    /**
     * Размер инпута (default: l)
     * Доступные размеры: [l - 56px, m - 44px, s - 32px]
     */
    size?: 'l' | 'm' | 's';
    /**
     * Включает валидированное состояние
     */
    valid?: boolean;
    /**
     * Состояние ошибки
     */
    error?: boolean;
    /**
     * Флаг динимаческой высоты
     */
    expandable?: boolean;
    /**
     * Поле заполнено (нужно показывать инпут даже не в фокусе)
     */
    filled?: boolean;
    /**
     * Фокусное состояние
     */
    focused?: boolean;
    /**
     * Выключенное состояние
     */
    disabled?: boolean;
    /**
     * Только для чтения
     */
    readOnly?: boolean;
    /**
     * Обязательное поле, помечается звёздочкой
     */
    required?: boolean;
    /**
     * Отображать ли крестик для очистки
     */
    cleanable?: boolean;
    /**
     * Спрямленные углы
     */
    flatCorners?: string;
    /**
     * Курсор при ховере на поле
     */
    cursor?: string;
    /**
     * Основное содержимое. Например, поле ввода или название выбранного пункта.
     */
    children?: React.ReactNode;
    /**
     * Содержимое слева
     */
    leftContent?: React.ReactNode;
    /**
     * Содержимое справа
     */
    rightContent?: React.ReactNode;
    /**
     * Слот для вывода подсказки
     */
    hintBlock?: React.ReactNode;
    /**
     * Лейбл
     */
    label?: React.ReactNode;
    /**
     * Контейнер для информации по инпуту (логотип карты, флаг государства и тд.)
     * Контейнер расположен первым за инпутом
     */
    informationContent?: React.ReactNode;
    /**
     * Иконка контрола, например стрелка у select, календарь у inputDate, лупа у inputSearch
     */
    inputIcon?: React.ReactNode;
    /**
     * Id лейбла
     */
    labelId?: string;
    /**
     * Атрибут for для лейбла
     */
    labelFor?: string;
    /**
     * ARIA-атрибуты для лейбла;
     */
    labelAria?: React.AriaAttributes;
    /**
     * Callback события клика крестика для очистки
     */
    onClean?: React.MouseEventHandler;
    /**
     * Счётчик символов
     */
    counter?: React.ReactNode;
    /**
     * Контейнер скролбара
     */
    scrollBar?: React.ReactNode;
    /**
     * Включает подсветку автозаполнения
     */
    autofilled?: boolean;
    /**
     * Выключает стили контейнера
     */
    transparent?: boolean;
    /**
     * Включает необходимые атрибуты для cobrowsing
     */
    cobrowsingSecure?: boolean;
    /**
     *  Определяет стилизацию компонента
     */
    variant?: InputBoxVariant;
    /**
     * Временный проп для переопределения стилей, не предназначен для широкого использования.
     * Создан специально для задачи https://
     * TODO: удалить когда появится общий механизм темизации.
     */
    __overrideStyles?: {
        InputBox?: {
            [key: string]: string;
        };
        [key: string]: any;
    };
}
declare const InputBox: React.ForwardRefExoticComponent<InputBoxProps & React.RefAttributes<HTMLDivElement>>;
export default InputBox;
