"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var corners = _interopRequireWildcard(require("@platform-ui/flatCorners"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _overrideStyles = _interopRequireDefault(require("@platform-ui/overrideStyles"));

var _icons = require("./icons");

var _InputBoxModule = _interopRequireDefault(require("./InputBox.module.css"));

var _excluded = ["dataQaType", "dataQaData", "label", "children", "leftContent", "rightContent", "error", "expandable", "filled", "focused", "readOnly", "disabled", "required", "cleanable", "flatCorners", "cursor", "informationContent", "hintBlock", "onClean", "inputIcon", "labelId", "labelFor", "labelAria", "size", "valid", "counter", "scrollBar", "autofilled", "transparent", "cobrowsingSecure", "__overrideStyles", "variant"];

var useIsMounted = function useIsMounted() {
  var isMounted = _react.default.useRef(false);

  _react.default.useEffect(function () {
    isMounted.current = true;
    return function () {
      isMounted.current = false;
    };
  }, []);

  return isMounted;
};

var stopEventPropagate = function stopEventPropagate(event) {
  event.stopPropagation();
};

var handleTooltipClick = function handleTooltipClick(event) {
  stopEventPropagate(event); // в некоторых случаях компонент обернут в label и нужно предотвратить поведение по умолчанию такое как изменение состояния чекбоксов

  event.preventDefault();
};

var InputBox = /*#__PURE__*/_react.default.forwardRef(function (_ref, forwardedRef) {
  var _cn, _cn2, _cn3;

  var dataQaType = _ref.dataQaType,
      dataQaData = _ref.dataQaData,
      label = _ref.label,
      children = _ref.children,
      leftContent = _ref.leftContent,
      rightContent = _ref.rightContent,
      error = _ref.error,
      expandable = _ref.expandable,
      filled = _ref.filled,
      focused = _ref.focused,
      readOnly = _ref.readOnly,
      disabled = _ref.disabled,
      required = _ref.required,
      cleanable = _ref.cleanable,
      flatCorners = _ref.flatCorners,
      cursor = _ref.cursor,
      informationContent = _ref.informationContent,
      hintBlock = _ref.hintBlock,
      onClean = _ref.onClean,
      inputIcon = _ref.inputIcon,
      labelId = _ref.labelId,
      labelFor = _ref.labelFor,
      labelAria = _ref.labelAria,
      size = _ref.size,
      valid = _ref.valid,
      counter = _ref.counter,
      scrollBar = _ref.scrollBar,
      autofilled = _ref.autofilled,
      transparent = _ref.transparent,
      cobrowsingSecure = _ref.cobrowsingSecure,
      __overrideStyles = _ref.__overrideStyles,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'default' : _ref$variant,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  var showClean = !readOnly && cleanable && filled;
  var isValid = valid && !error;

  var _React$useState = _react.default.useState(false),
      animated = _React$useState[0],
      setAnimated = _React$useState[1];

  var isMounted = useIsMounted();
  var styles = (0, _overrideStyles.default)(_InputBoxModule.default, __overrideStyles == null ? void 0 : __overrideStyles.InputBox);
  /**
   * Обходим бессмысленный ворнинг Реакта про useLayoutEffect и SSR
   * Вообще писать хуки в if - страшный грех, но конкретно в данном случае ничего страшного не произойдет,
   * т.к. на сервере он не отработает никогда, а на клиенте всегда.
   *
   * Использование useLayoutEffect в данном случае принципиально,
   * т.к. нам необходимо чтобы setAnimated отработал перед обновлением DOM
   *
   * Также выключаем правило линта, поскольку эффект должен срабатывать ТОЛЬКО при изменении focused,
   * и автофиксить зависимости ни в коем случае не нужно.
   */

  /* eslint-disable react-hooks/exhaustive-deps, react-hooks/rules-of-hooks */

  if (typeof window !== 'undefined') {
    _react.default.useLayoutEffect(function () {
      if (isMounted.current && !filled) {
        setAnimated(true);
      }
    }, [focused]);
  }
  /* eslint-enable react-hooks/exhaustive-deps, react-hooks/rules-of-hooks */


  var handleAnimationEnd = _react.default.useCallback(function () {
    setAnimated(false);
  }, []);

  var handleCleanerMouseDown = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    onClean && onClean(event);
  }, [onClean]);
  return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, otherProps, (0, _dataQa.default)({
    dataQaType: (0, _classnames.default)(dataQaType, (_cn = {}, _cn[dataQaType + "_required"] = required, _cn)),
    dataQaData: dataQaData
  }), {
    ref: forwardedRef,
    className: (0, _classnames.default)(styles.box, styles[variant], (_cn2 = {}, _cn2[styles.box_error] = error, _cn2[styles.box_filled] = filled, _cn2[styles.box_focused] = focused, _cn2[styles.box_readOnly] = readOnly, _cn2[styles.box_disabled] = disabled, _cn2[styles.box_required] = required, _cn2[styles.box_expandable] = expandable, _cn2[styles.box_noLabel] = !label, _cn2[styles["box_size_" + size]] = size, _cn2[styles.box_valid] = isValid, _cn2[styles.box_animated] = animated, _cn2[styles.box_autofilled] = autofilled, _cn2[styles.box_transparent] = transparent, _cn2)),
    style: (0, _extends2.default)({}, corners.style(flatCorners), {
      cursor: cursor
    })
  }), leftContent && /*#__PURE__*/_react.default.createElement("div", {
    className: styles.leftContent,
    "data-qa-type": dataQaType + ".leftContent"
  }, leftContent), /*#__PURE__*/_react.default.createElement("div", {
    className: styles.main,
    "data-qa-type": dataQaType + ".main"
  }, label && /*#__PURE__*/_react.default.createElement("div", {
    className: styles.labelContainer
  }, /*#__PURE__*/_react.default.createElement("label", Object.assign({}, labelAria, {
    id: labelId,
    htmlFor: labelFor,
    className: styles.label,
    onAnimationEnd: handleAnimationEnd,
    "data-qa-type": dataQaType + ".label"
  }), label)), /*#__PURE__*/_react.default.createElement("div", {
    "data-qa-type": dataQaType + ".inputContainer",
    "data-cobrowsing-secure": cobrowsingSecure ? 'text' : undefined,
    className: styles.input
  }, children)), informationContent && /*#__PURE__*/_react.default.createElement("div", {
    "data-qa-type": dataQaType + ".informationContent",
    className: styles.informationContent
  }, informationContent), (rightContent || showClean || hintBlock || inputIcon || isValid || counter) && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(styles.rightContainer, (_cn3 = {}, _cn3[styles.rightContainer_expandable] = expandable, _cn3)),
    "data-qa-type": dataQaType + ".rightContainer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: styles.rightContent,
    "data-qa-type": dataQaType + ".rightContent"
  }, rightContent, isValid && /*#__PURE__*/_react.default.createElement("div", {
    className: styles.validIcon,
    "data-qa-type": dataQaType + ".validIcon"
  }, /*#__PURE__*/_react.default.createElement(_icons.Check, null)), showClean && /*#__PURE__*/_react.default.createElement("div", {
    className: styles.liftingWrapper
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: styles.clean,
    onMouseDown: handleCleanerMouseDown,
    role: "button",
    "data-qa-type": dataQaType + ".cleanButton"
  }, /*#__PURE__*/_react.default.createElement(_icons.Clear, null))), hintBlock && /*#__PURE__*/_react.default.createElement("div", {
    tabIndex: -1,
    className: styles.liftingWrapper,
    "data-qa-type": dataQaType + ".hintBlock",
    onMouseDown: stopEventPropagate,
    onClick: handleTooltipClick,
    onFocus: stopEventPropagate,
    onBlur: stopEventPropagate
  }, hintBlock), inputIcon), /*#__PURE__*/_react.default.createElement("div", {
    className: styles.counter,
    "data-qa-type": dataQaType + ".counter"
  }, counter)), scrollBar && /*#__PURE__*/_react.default.createElement("div", {
    className: styles.scrollBar,
    "data-qa-type": dataQaType + ".scrollBar"
  }, scrollBar));
});

InputBox.defaultProps = {
  dataQaType: 'uikit/inputBox',
  size: 'l'
}; // TODO: разобраться как подружить сборку TS и displayName

InputBox.displayName = 'InputBox';
var _default = InputBox;
exports.default = _default;