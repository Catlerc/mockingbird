import React from 'react';
import type { InputTagAutocompleteProps } from './InputTagAutocompleteGlobal';
declare const InputTagAutocomplete: {
    (props: InputTagAutocompleteProps): JSX.Element;
    defaultProps: {
        noResultsContent: string;
        dataQaType?: string | undefined;
        size?: "s" | "m" | "l" | undefined;
        name?: string | undefined;
        value?: import("./types").Tag[] | undefined;
        onChange?: ((event: any, params: {
            value: import("./types").Tag[];
            name?: string | undefined;
        }) => void) | undefined;
        focused?: boolean | undefined;
        onFocus?: ((event: import("./types").InputTagFocusEvent, params: {
            name?: string | undefined;
        }) => void) | undefined;
        onBlur?: ((event: import("./types").InputTagFocusEvent, params: {
            name?: string | undefined;
        }) => void) | undefined;
        request?: ((query: string) => import("./types").Option[] | Promise<import("./types").Option[]>) | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        error?: boolean | undefined;
        valueErrors?: boolean[] | undefined;
        valid?: boolean | undefined;
        cleanable?: boolean | undefined;
        leftContent?: React.ReactNode;
        rightContent?: React.ReactNode;
        informationContent?: React.ReactNode;
        hintBlock?: React.ReactNode;
        inputIcon?: React.ReactNode;
        placeholder?: React.ReactNode;
        scrollable?: boolean | undefined;
        isEmptyTag?: ((tag: import("./types").Tag) => boolean) | undefined;
        isEqualTags?: ((tagA: import("./types").Tag, tagB: import("./types").Tag) => boolean) | undefined;
        acceptTag?: ((tag: import("./types").Tag) => import("./types").Tag | null) | undefined;
        smartDirection?: boolean | undefined;
        tagSeparators?: string[] | undefined;
        variant?: import("@platform-ui/inputBox").InputBoxVariant | undefined;
    };
};
export default InputTagAutocomplete;
