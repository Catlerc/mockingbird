import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["name", "value", "onChange", "size", "focused", "onFocus", "onBlur", "request", "disabled", "readOnly", "valueErrors", "placeholder", "scrollable", "isEmptyTag", "isEqualTags", "acceptTag", "smartDirection", "tagSeparators", "dataQaType", "noResultsContent"];
import React from 'react';
import InputBox from '@platform-ui/inputBox';
import Popover from '@platform-ui/popover';
import { renderCustomContent } from '@platform-ui/dropdown';
import TagsContext from './TagsContext';
import TagsList from './TagsList/TagsList';
import TagButtonConnected from './TagButton/TagButtonConnected';
import TagAddInputAutocomplete from './TagInput/TagAddInputAutocomplete';
import TagEditInputAutocomplete from './TagInput/TagEditInputAutocomplete';
import Droplist from './Droplist/Droplist';
import Placeholder from './Placeholder/Placeholder';
import useTagsState from './useTagsState';
import useSuggestState from './useSuggestState';

const InputTagAutocomplete = _ref => {
  let {
    name,
    value,
    onChange,
    size = 'l',
    focused,
    onFocus,
    onBlur,
    request,
    disabled,
    readOnly,
    valueErrors,
    placeholder,
    scrollable,
    isEmptyTag,
    isEqualTags,
    acceptTag = tag => tag,
    smartDirection,
    tagSeparators,
    dataQaType = 'uikit/inputTagAutocomplete',
    noResultsContent = 'No results'
  } = _ref,
      inputBoxProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const tagsState = useTagsState({
    name,
    value,
    focused,
    onChange,
    onFocus,
    onBlur,
    disabled,
    readOnly,
    valueErrors,
    isEmptyTag,
    isEqualTags,
    acceptTag
  });
  const suggestState = useSuggestState({
    focused: tagsState.focusedIndex === 'input' || tagsState.focusedIndex !== null && tagsState.editing,
    query: tagsState.inputValue,
    request,
    disabled: Boolean(disabled || readOnly)
  });

  const context = _extends({
    dataQaType,
    size
  }, tagsState, suggestState);

  const {
    loading,
    noResults
  } = context;
  const popoverContent = /*#__PURE__*/React.createElement(Droplist, null, renderCustomContent({
    loading,
    noResults,
    noResultsContent
  }));
  return /*#__PURE__*/React.createElement(TagsContext.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement(Popover, {
    popoverBlock: popoverContent,
    wide: true,
    isActive: context.opened,
    isInactive: !context.opened,
    smartDirection: smartDirection,
    align: "stretch"
  }, /*#__PURE__*/React.createElement("div", Object.assign({}, context.container, {
    style: {
      flexGrow: 1,
      minWidth: 0
    }
  }), /*#__PURE__*/React.createElement(InputBox, Object.assign({}, inputBoxProps, {
    dataQaType: dataQaType,
    size: size,
    cursor: "text",
    filled: value.length > 0,
    focused: context.focused,
    disabled: disabled,
    readOnly: readOnly,
    onClean: event => {
      context.onChange(event, {
        value: []
      });
    },
    expandable: true
  }), value.length === 0 && context.inputValue === '' && !context.highlightedOption && placeholder ? /*#__PURE__*/React.createElement(Placeholder, {
    dataQaType: `${dataQaType}.placeholder`
  }, placeholder) : null, /*#__PURE__*/React.createElement(TagsList, {
    scrollable: scrollable,
    focused: context.focused,
    size: size
  }, value.map((item, index) => !disabled && !readOnly && context.editing && index === context.focusedIndex ? /*#__PURE__*/React.createElement(TagEditInputAutocomplete, {
    key: "edit"
  }) : /*#__PURE__*/React.createElement(TagButtonConnected, {
    key: `button_${typeof item === 'string' ? item : (item == null ? void 0 : item.value) || index}`,
    index: index,
    size: size
  })), /*#__PURE__*/React.createElement(TagAddInputAutocomplete, {
    tagSeparators: tagSeparators
  }))))));
}; // TODO: remove defaultProps in the next major


InputTagAutocomplete.defaultProps = {
  acceptTag: tag => tag,
  dataQaType: 'uikit/inputTagAutocomplete',
  size: 'l'
};
export default InputTagAutocomplete;