import React from 'react';
import Tag from '@platform-ui/tag';
import { Int16AttentionFilled as ErrorIcon } from '@platform-ui/iconsPack';

const TagButtonStandalone = props => {
  const {
    size,
    focused,
    disabled,
    error,
    readOnly,
    children,
    onBlur,
    onEdit,
    onRemove,
    onExitForward,
    onExitBackward
  } = props;
  const tagRef = React.useRef(null);
  const handleBlur = focused ? onBlur : undefined;

  const handleKeyDown = event => {
    switch (event.key) {
      case 'ArrowLeft':
        {
          onExitBackward(event);
          break;
        }

      case 'ArrowRight':
        {
          onExitForward(event);
          break;
        }

      case 'Enter':
        {
          if (!readOnly) {
            event.preventDefault();
            onEdit(event);
          }
        }
    }
  };

  React.useLayoutEffect(() => {
    const tag = tagRef.current;

    if (!tag) {
      return;
    }

    if (focused) {
      if (tag !== document.activeElement) {
        tag.focus();
      }
    } else if (tag === document.activeElement) {
      tag.blur();
    }
  }, [focused]);
  return /*#__PURE__*/React.createElement(Tag, {
    ref: tagRef,
    size: size,
    theme: "onLight",
    tagName: "span",
    tabIndex: -1,
    disabled: disabled,
    removable: !disabled && !readOnly,
    onBlur: handleBlur,
    onClick: readOnly ? undefined : onEdit,
    onRemove: onRemove,
    onKeyDown: handleKeyDown,
    onMouseDown: event => {
      event.preventDefault();
    },
    icon: error && /*#__PURE__*/React.createElement(ErrorIcon, {
      theme: "red"
    })
  }, children);
};

export default /*#__PURE__*/React.memo(TagButtonStandalone);