import React from 'react';
import { isTagGroup } from './types';
const EMPTY_OPTIONS = [];

function flattenOptions(options) {
  return options.reduce((acc, option) => {
    if (isTagGroup(option)) {
      acc.push(...option.options);
    } else {
      acc.push(option);
    }

    return acc;
  }, []);
}

function useSuggestState(params) {
  const {
    focused,
    disabled,
    query,
    request
  } = params;
  const [opened, setOpened] = React.useState(true);
  const [loading, setLoading] = React.useState(false);
  const [options, setOptions] = React.useState(EMPTY_OPTIONS);
  const [highlightedOption, setHighlightedOption] = React.useState(null);
  React.useEffect(() => {
    if (!focused) {
      return;
    }

    const newOptionsRequest = request(query);

    if (Array.isArray(newOptionsRequest)) {
      setOptions(newOptionsRequest);
      setHighlightedOption(null);
      return;
    }

    let aborted = false; // Таймер для того чтобы избежать дёрганий когда подсказки приходят быстро

    const loadingTimeout = window.setTimeout(() => {
      setLoading(true);
      setOptions(EMPTY_OPTIONS);
      setHighlightedOption(null);
    }, 300);
    newOptionsRequest.then(newOptions => {
      clearTimeout(loadingTimeout);

      if (aborted) {
        return;
      }

      setLoading(false);
      setOptions(newOptions);
    });
    return () => {
      clearTimeout(loadingTimeout);
      aborted = true;
    };
  }, [request, query, focused]);
  const flatOptions = React.useMemo(() => flattenOptions(options), [options]);
  const noResults = flatOptions.length === 0 && !loading && Boolean(query.length);
  const showOpened = !disabled && focused && opened && (loading || noResults || options.length > 0);
  const context = {
    options,
    noResults,
    loading,
    opened: showOpened,
    setOpened,
    highlightedOption,
    setHighlightedOption,
    onHighlightNext: () => {
      if (!context.opened) {
        setOpened(true);
        return;
      }

      if (loading || flatOptions.length === 0) {
        return;
      }

      if (highlightedOption === null) {
        setHighlightedOption(flatOptions[0]);
        return;
      }

      const index = flatOptions.indexOf(highlightedOption);

      if (index === flatOptions.length - 1) {
        return;
      }

      setHighlightedOption(flatOptions[index + 1]);
    },
    onHighlightPrev: () => {
      if (loading || highlightedOption === null || flatOptions.length === 0) {
        return;
      }

      const index = flatOptions.indexOf(highlightedOption);

      if (index > 0) {
        setHighlightedOption(flatOptions[index - 1]);
      }
    }
  };
  return context;
}

export default useSuggestState;