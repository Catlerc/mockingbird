import React from 'react';
import { useTagsContext } from '../TagsContext';
import TagInputStandalone from './TagInputStandalone';

const TagEditInput = () => {
  const context = useTagsContext();
  const index = context.focusedIndex;
  const {
    inputValue,
    onBlur,
    onReplace,
    setEditing,
    setInputValue,
    dataQaType,
    acceptTag
  } = context;
  return /*#__PURE__*/React.createElement(TagInputStandalone, {
    dataQaType: `${dataQaType}.editInput`,
    focused: true,
    value: inputValue,
    onBlur: event => {
      onBlur(event);
      const tag = acceptTag(inputValue);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      } else {
        setEditing(false);
        setInputValue('');
      }
    },
    onChange: (event, params) => {
      setInputValue(params.value);
    },
    onApply: event => {
      const tag = acceptTag(inputValue);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      }
    },
    onCancel: () => {
      setEditing(false);
      setInputValue('');
    },
    onExitForward: event => {
      if (index === context.value.length - 1) {
        context.setFocusedIndex('input');
      } else {
        context.setFocusedIndex(index + 1);
      }

      const tag = acceptTag(inputValue);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      } else {
        setInputValue('');
        setEditing(false);
      }
    },
    onExitBackward: event => {
      if (index === 0) {
        return;
      }

      const tag = acceptTag(inputValue);
      context.setFocusedIndex(context.value.length - 1);
      setInputValue('');
      setEditing(false);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      }
    }
  });
};

export default TagEditInput;