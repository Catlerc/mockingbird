import React from 'react';
import TagInputStandalone from './TagInputStandalone';
import { useTagsContextAutocomplete } from '../TagsContext';

const TagEditInputAutocomplete = () => {
  const context = useTagsContextAutocomplete();
  const {
    value,
    opened,
    setOpened,
    highlightedOption,
    setInputValue,
    setFocusedIndex,
    setEditing,
    onReplace,
    onBlur,
    onHighlightPrev,
    onHighlightNext,
    acceptTag,
    dataQaType
  } = context;
  const {
    inputValue
  } = context;
  const index = context.focusedIndex;
  return /*#__PURE__*/React.createElement(TagInputStandalone, {
    dataQaType: `${dataQaType}.editInputAutocomplete`,
    value: inputValue,
    focused: true,
    onBlur: event => {
      const tag = acceptTag(highlightedOption || inputValue);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      }

      onBlur(event);
    },
    onCancel: () => {
      if (opened) {
        setOpened(false);
        return;
      }

      setEditing(false);
      setInputValue('');
    },
    onChange: (event, params) => {
      setInputValue(params.value);
    },
    onApply: event => {
      const tag = acceptTag(highlightedOption || inputValue);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      }
    },
    onExitBackward: event => {
      if (index === 0) {
        return;
      }

      const tag = acceptTag(highlightedOption || inputValue);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      } else {
        setEditing(false);
        setInputValue('');
      }

      setFocusedIndex(index - 1);
    },
    onExitForward: event => {
      const tag = acceptTag(highlightedOption || inputValue);
      setFocusedIndex(index === value.length - 1 ? 'input' : index + 1);

      if (tag !== null) {
        onReplace(event, {
          index,
          tag
        });
      } else {
        setEditing(false);
        setInputValue('');
      }
    },
    onOptionNext: onHighlightNext,
    onOptionPrev: onHighlightPrev
  });
};

export default TagEditInputAutocomplete;