import React from 'react';
import { InlineInput } from '@platform-ui/inputTools';

function isFocused(element) {
  return document.activeElement === element;
}

const TagInputStandalone = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
  const {
    value,
    focused,
    onFocus,
    onBlur,
    onApply,
    onCancel,
    onChange,
    onExitForward,
    onExitBackward,
    onOptionPrev,
    onOptionNext,
    disabled,
    readOnly,
    dataQaType
  } = props;
  const inputRef = React.useRef(null);

  const handleKeyUp = event => {
    const input = event.target;

    switch (event.key) {
      case 'Enter':
        {
          if (onApply) {
            event.preventDefault();
            onApply(event);
          }

          break;
        }

      case 'Escape':
        {
          if (onCancel) {
            onCancel(event);
          }

          break;
        }

      case 'ArrowLeft':
      case 'Backspace':
        {
          if (input.selectionStart === 0 && input.selectionEnd === 0 && onExitBackward) {
            onExitBackward(event);
          }

          break;
        }

      case 'ArrowRight':
        {
          const {
            length
          } = input.value;

          if (input.selectionStart === length && input.selectionEnd === length && onExitForward) {
            onExitForward(event);
          }

          break;
        }

      case 'ArrowUp':
        {
          if (onOptionPrev) {
            onOptionPrev(event);
          }

          break;
        }

      case 'ArrowDown':
        {
          if (onOptionNext) {
            onOptionNext(event);
          }

          break;
        }

      default:
        break;
    }
  };

  React.useLayoutEffect(() => {
    const input = inputRef.current;

    if (!input) {
      return;
    }

    if (focused) {
      if (!isFocused(input)) {
        input.focus();
      }
    } else if (isFocused(input)) {
      input.blur();
    }
  }, [focused, inputRef]);

  const handleFocus = event => {
    if (!focused && onFocus) {
      onFocus(event);
    }
  };

  const handleBlur = event => {
    if (focused && onBlur) {
      onBlur(event);
    }
  };

  const handleChange = event => {
    onChange(event, {
      value: event.target.value
    });
  };

  return /*#__PURE__*/React.createElement(InlineInput, {
    dataQaType: dataQaType,
    minWidth: 40,
    ref: inputRef,
    value: value,
    disabled: disabled,
    readOnly: readOnly,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onChange: handleChange,
    onKeyDown: handleKeyUp
  });
});
export default /*#__PURE__*/React.memo(TagInputStandalone);