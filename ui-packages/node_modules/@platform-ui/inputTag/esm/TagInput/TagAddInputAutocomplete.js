import React from 'react';
import TagInputStandalone from './TagInputStandalone';
import { useTagsContextAutocomplete } from '../TagsContext';

const TagAddInputAutocomplete = ({
  tagSeparators
}) => {
  const context = useTagsContextAutocomplete();
  const focused = context.focusedIndex === 'input';
  const {
    dataQaType,
    highlightedOption,
    setHighlightedOption,
    onAdd,
    onBlur,
    onFocus,
    onHighlightPrev,
    onHighlightNext,
    setInputValue,
    setFocusedIndex,
    setOpened,
    acceptTag
  } = context;
  let inputValue = '';

  if (focused) {
    inputValue = context.inputValue;
  }

  return /*#__PURE__*/React.createElement(TagInputStandalone, {
    dataQaType: `${dataQaType}.addInputAutocomplete`,
    value: inputValue,
    focused: focused,
    disabled: context.disabled,
    readOnly: context.readOnly,
    onBlur: event => {
      const tag = acceptTag(highlightedOption || inputValue);
      setHighlightedOption(null);
      onBlur(event);

      if (tag !== null) {
        onAdd(event, {
          tag
        });
      }
    },
    onFocus: event => {
      setFocusedIndex('input');
      onFocus(event);
    },
    onChange: (event, {
      value
    }) => {
      if (tagSeparators != null && tagSeparators.length) {
        if (tagSeparators.some(char => value.includes(char))) {
          const tag = acceptTag(value.substring(0, value.length - 1));
          onAdd(event, {
            tag
          });
          return;
        }
      }

      setHighlightedOption(null);
      setInputValue(value);
      setOpened(true);
    },
    onApply: event => {
      const tag = acceptTag(highlightedOption || inputValue);

      if (tag !== null) {
        setHighlightedOption(null);
        onAdd(event, {
          tag
        });
        setFocusedIndex(context.value.length + 1);
      }
    },
    onCancel: () => {
      setOpened(false);
    },
    onExitBackward: event => {
      if (context.value.length === 0) {
        return;
      }

      const tag = acceptTag(highlightedOption || inputValue);
      setHighlightedOption(null);
      setFocusedIndex(context.value.length - 1);

      if (tag !== null) {
        onAdd(event, {
          tag
        });
      } else {
        setInputValue('');
      }
    },
    onOptionNext: onHighlightNext,
    onOptionPrev: onHighlightPrev
  });
};

export default TagAddInputAutocomplete;