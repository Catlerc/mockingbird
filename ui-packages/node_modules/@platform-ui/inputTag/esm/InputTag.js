import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["dataQaType", "name", "value", "onChange", "size", "focused", "onFocus", "onBlur", "disabled", "readOnly", "valueErrors", "placeholder", "scrollable", "acceptTag"];
import React from 'react';
import InputBox from '@platform-ui/inputBox';
import TagsContext from './TagsContext';
import TagsList from './TagsList/TagsList';
import TagAddInput from './TagInput/TagAddInput';
import TagEditInput from './TagInput/TagEditInput';
import TagButtonConnected from './TagButton/TagButtonConnected';
import Placeholder from './Placeholder/Placeholder';
import useTagsState from './useTagsState';

const InputTag = props => {
  const {
    dataQaType,
    name,
    value,
    onChange,
    size,
    focused,
    onFocus,
    onBlur,
    disabled,
    readOnly,
    valueErrors,
    placeholder,
    scrollable,
    acceptTag
  } = props,
        inputBoxProps = _objectWithoutPropertiesLoose(props, _excluded);

  const context = _extends({
    dataQaType
  }, useTagsState({
    name,
    value,
    focused,
    disabled,
    valueErrors,
    readOnly,
    onChange,
    onFocus,
    onBlur,
    acceptTag
  }));

  return /*#__PURE__*/React.createElement(TagsContext.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement(InputBox, Object.assign({}, inputBoxProps, context.container, {
    dataQaType: dataQaType,
    size: size,
    cursor: "text",
    filled: value.length > 0,
    focused: context.focused,
    disabled: disabled,
    readOnly: readOnly,
    cleanable: props.cleanable,
    onClean: event => {
      context.onChange(event, {
        value: []
      });
    },
    expandable: true
  }), value.length === 0 && context.inputValue === '' && placeholder ? /*#__PURE__*/React.createElement(Placeholder, {
    dataQaType: `${dataQaType}.placeholder`
  }, placeholder) : null, /*#__PURE__*/React.createElement(TagsList, {
    scrollable: scrollable,
    focused: context.focused,
    size: size
  }, value.map((item, index) => !disabled && !readOnly && context.editing && index === context.focusedIndex ? /*#__PURE__*/React.createElement(TagEditInput, {
    key: "edit"
  }) : /*#__PURE__*/React.createElement(TagButtonConnected, {
    key: `button_${item}`,
    index: index,
    size: size
  })), /*#__PURE__*/React.createElement(TagAddInput, null))));
};

InputTag.defaultProps = {
  acceptTag: tag => tag,
  dataQaType: 'uikit/inputTag',
  size: 'l'
};
export default InputTag;