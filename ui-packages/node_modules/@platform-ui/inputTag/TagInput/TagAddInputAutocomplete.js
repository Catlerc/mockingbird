"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TagInputStandalone = _interopRequireDefault(require("./TagInputStandalone"));

var _TagsContext = require("../TagsContext");

var TagAddInputAutocomplete = function TagAddInputAutocomplete(_ref) {
  var tagSeparators = _ref.tagSeparators;
  var context = (0, _TagsContext.useTagsContextAutocomplete)();
  var focused = context.focusedIndex === 'input';
  var dataQaType = context.dataQaType,
      highlightedOption = context.highlightedOption,
      setHighlightedOption = context.setHighlightedOption,
      onAdd = context.onAdd,
      _onBlur = context.onBlur,
      _onFocus = context.onFocus,
      onHighlightPrev = context.onHighlightPrev,
      onHighlightNext = context.onHighlightNext,
      setInputValue = context.setInputValue,
      setFocusedIndex = context.setFocusedIndex,
      setOpened = context.setOpened,
      acceptTag = context.acceptTag;
  var inputValue = '';

  if (focused) {
    inputValue = context.inputValue;
  }

  return /*#__PURE__*/_react.default.createElement(_TagInputStandalone.default, {
    dataQaType: dataQaType + ".addInputAutocomplete",
    value: inputValue,
    focused: focused,
    disabled: context.disabled,
    readOnly: context.readOnly,
    onBlur: function onBlur(event) {
      var tag = acceptTag(highlightedOption || inputValue);
      setHighlightedOption(null);

      _onBlur(event);

      if (tag !== null) {
        onAdd(event, {
          tag: tag
        });
      }
    },
    onFocus: function onFocus(event) {
      setFocusedIndex('input');

      _onFocus(event);
    },
    onChange: function onChange(event, _ref2) {
      var value = _ref2.value;

      if (tagSeparators != null && tagSeparators.length) {
        if (tagSeparators.some(function (char) {
          return value.includes(char);
        })) {
          var tag = acceptTag(value.substring(0, value.length - 1));
          onAdd(event, {
            tag: tag
          });
          return;
        }
      }

      setHighlightedOption(null);
      setInputValue(value);
      setOpened(true);
    },
    onApply: function onApply(event) {
      var tag = acceptTag(highlightedOption || inputValue);

      if (tag !== null) {
        setHighlightedOption(null);
        onAdd(event, {
          tag: tag
        });
        setFocusedIndex(context.value.length + 1);
      }
    },
    onCancel: function onCancel() {
      setOpened(false);
    },
    onExitBackward: function onExitBackward(event) {
      if (context.value.length === 0) {
        return;
      }

      var tag = acceptTag(highlightedOption || inputValue);
      setHighlightedOption(null);
      setFocusedIndex(context.value.length - 1);

      if (tag !== null) {
        onAdd(event, {
          tag: tag
        });
      } else {
        setInputValue('');
      }
    },
    onOptionNext: onHighlightNext,
    onOptionPrev: onHighlightPrev
  });
};

var _default = TagAddInputAutocomplete;
exports.default = _default;