"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TagsContext = require("../TagsContext");

var _TagInputStandalone = _interopRequireDefault(require("./TagInputStandalone"));

var TagAddInput = function TagAddInput() {
  var context = (0, _TagsContext.useTagsContext)();
  var value = context.value,
      disabled = context.disabled,
      readOnly = context.readOnly,
      setInputValue = context.setInputValue,
      focusedIndex = context.focusedIndex,
      setFocusedIndex = context.setFocusedIndex,
      _onFocus = context.onFocus,
      _onBlur = context.onBlur,
      onAdd = context.onAdd,
      dataQaType = context.dataQaType,
      acceptTag = context.acceptTag;
  var focused = focusedIndex === 'input';
  var inputValue = focused ? context.inputValue : '';
  return /*#__PURE__*/_react.default.createElement(_TagInputStandalone.default, {
    dataQaType: dataQaType + ".addInput",
    value: inputValue,
    focused: focused,
    disabled: disabled,
    readOnly: readOnly,
    onBlur: function onBlur(event) {
      _onBlur(event);

      var tag = acceptTag(inputValue);

      if (tag !== null) {
        onAdd(event, {
          tag: tag
        });
      }
    },
    onFocus: function onFocus(event) {
      setFocusedIndex('input');

      _onFocus(event);
    },
    onChange: function onChange(event, params) {
      setInputValue(params.value);
    },
    onApply: function onApply(event) {
      var tag = acceptTag(inputValue);

      if (tag !== null) {
        onAdd(event, {
          tag: tag
        });
        setFocusedIndex(value.length + 1);
      }
    },
    onExitBackward: function onExitBackward(event) {
      if (value.length === 0) {
        return;
      }

      setFocusedIndex(value.length - 1);
      var tag = acceptTag(inputValue);

      if (tag !== null) {
        onAdd(event, {
          tag: tag
        });
      } else {
        setInputValue('');
      }
    }
  });
};

var _default = TagAddInput;
exports.default = _default;