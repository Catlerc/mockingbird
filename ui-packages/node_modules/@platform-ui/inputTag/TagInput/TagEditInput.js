"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TagsContext = require("../TagsContext");

var _TagInputStandalone = _interopRequireDefault(require("./TagInputStandalone"));

var TagEditInput = function TagEditInput() {
  var context = (0, _TagsContext.useTagsContext)();
  var index = context.focusedIndex;
  var inputValue = context.inputValue,
      _onBlur = context.onBlur,
      onReplace = context.onReplace,
      setEditing = context.setEditing,
      setInputValue = context.setInputValue,
      dataQaType = context.dataQaType,
      acceptTag = context.acceptTag;
  return /*#__PURE__*/_react.default.createElement(_TagInputStandalone.default, {
    dataQaType: dataQaType + ".editInput",
    focused: true,
    value: inputValue,
    onBlur: function onBlur(event) {
      _onBlur(event);

      var tag = acceptTag(inputValue);

      if (tag !== null) {
        onReplace(event, {
          index: index,
          tag: tag
        });
      } else {
        setEditing(false);
        setInputValue('');
      }
    },
    onChange: function onChange(event, params) {
      setInputValue(params.value);
    },
    onApply: function onApply(event) {
      var tag = acceptTag(inputValue);

      if (tag !== null) {
        onReplace(event, {
          index: index,
          tag: tag
        });
      }
    },
    onCancel: function onCancel() {
      setEditing(false);
      setInputValue('');
    },
    onExitForward: function onExitForward(event) {
      if (index === context.value.length - 1) {
        context.setFocusedIndex('input');
      } else {
        context.setFocusedIndex(index + 1);
      }

      var tag = acceptTag(inputValue);

      if (tag !== null) {
        onReplace(event, {
          index: index,
          tag: tag
        });
      } else {
        setInputValue('');
        setEditing(false);
      }
    },
    onExitBackward: function onExitBackward(event) {
      if (index === 0) {
        return;
      }

      var tag = acceptTag(inputValue);
      context.setFocusedIndex(context.value.length - 1);
      setInputValue('');
      setEditing(false);

      if (tag !== null) {
        onReplace(event, {
          index: index,
          tag: tag
        });
      }
    }
  });
};

var _default = TagEditInput;
exports.default = _default;