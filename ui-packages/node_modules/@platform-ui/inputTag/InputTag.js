"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireDefault(require("react"));

var _inputBox = _interopRequireDefault(require("@platform-ui/inputBox"));

var _TagsContext = _interopRequireDefault(require("./TagsContext"));

var _TagsList = _interopRequireDefault(require("./TagsList/TagsList"));

var _TagAddInput = _interopRequireDefault(require("./TagInput/TagAddInput"));

var _TagEditInput = _interopRequireDefault(require("./TagInput/TagEditInput"));

var _TagButtonConnected = _interopRequireDefault(require("./TagButton/TagButtonConnected"));

var _Placeholder = _interopRequireDefault(require("./Placeholder/Placeholder"));

var _useTagsState = _interopRequireDefault(require("./useTagsState"));

var _excluded = ["dataQaType", "name", "value", "onChange", "size", "focused", "onFocus", "onBlur", "disabled", "readOnly", "valueErrors", "placeholder", "scrollable", "acceptTag"];

var InputTag = function InputTag(props) {
  var dataQaType = props.dataQaType,
      name = props.name,
      value = props.value,
      onChange = props.onChange,
      size = props.size,
      focused = props.focused,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      disabled = props.disabled,
      readOnly = props.readOnly,
      valueErrors = props.valueErrors,
      placeholder = props.placeholder,
      scrollable = props.scrollable,
      acceptTag = props.acceptTag,
      inputBoxProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  var context = (0, _extends2.default)({
    dataQaType: dataQaType
  }, (0, _useTagsState.default)({
    name: name,
    value: value,
    focused: focused,
    disabled: disabled,
    valueErrors: valueErrors,
    readOnly: readOnly,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    acceptTag: acceptTag
  }));
  return /*#__PURE__*/_react.default.createElement(_TagsContext.default.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_inputBox.default, Object.assign({}, inputBoxProps, context.container, {
    dataQaType: dataQaType,
    size: size,
    cursor: "text",
    filled: value.length > 0,
    focused: context.focused,
    disabled: disabled,
    readOnly: readOnly,
    cleanable: props.cleanable,
    onClean: function onClean(event) {
      context.onChange(event, {
        value: []
      });
    },
    expandable: true
  }), value.length === 0 && context.inputValue === '' && placeholder ? /*#__PURE__*/_react.default.createElement(_Placeholder.default, {
    dataQaType: dataQaType + ".placeholder"
  }, placeholder) : null, /*#__PURE__*/_react.default.createElement(_TagsList.default, {
    scrollable: scrollable,
    focused: context.focused,
    size: size
  }, value.map(function (item, index) {
    return !disabled && !readOnly && context.editing && index === context.focusedIndex ? /*#__PURE__*/_react.default.createElement(_TagEditInput.default, {
      key: "edit"
    }) : /*#__PURE__*/_react.default.createElement(_TagButtonConnected.default, {
      key: "button_" + item,
      index: index,
      size: size
    });
  }), /*#__PURE__*/_react.default.createElement(_TagAddInput.default, null))));
};

InputTag.defaultProps = {
  acceptTag: function acceptTag(tag) {
    return tag;
  },
  dataQaType: 'uikit/inputTag',
  size: 'l'
};
var _default = InputTag;
exports.default = _default;