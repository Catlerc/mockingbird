"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _types = require("./types");

var EMPTY_OPTIONS = [];

function flattenOptions(options) {
  return options.reduce(function (acc, option) {
    if ((0, _types.isTagGroup)(option)) {
      acc.push.apply(acc, option.options);
    } else {
      acc.push(option);
    }

    return acc;
  }, []);
}

function useSuggestState(params) {
  var focused = params.focused,
      disabled = params.disabled,
      query = params.query,
      request = params.request;

  var _React$useState = _react.default.useState(true),
      opened = _React$useState[0],
      setOpened = _React$useState[1];

  var _React$useState2 = _react.default.useState(false),
      loading = _React$useState2[0],
      setLoading = _React$useState2[1];

  var _React$useState3 = _react.default.useState(EMPTY_OPTIONS),
      options = _React$useState3[0],
      setOptions = _React$useState3[1];

  var _React$useState4 = _react.default.useState(null),
      highlightedOption = _React$useState4[0],
      setHighlightedOption = _React$useState4[1];

  _react.default.useEffect(function () {
    if (!focused) {
      return;
    }

    var newOptionsRequest = request(query);

    if (Array.isArray(newOptionsRequest)) {
      setOptions(newOptionsRequest);
      setHighlightedOption(null);
      return;
    }

    var aborted = false; // Таймер для того чтобы избежать дёрганий когда подсказки приходят быстро

    var loadingTimeout = window.setTimeout(function () {
      setLoading(true);
      setOptions(EMPTY_OPTIONS);
      setHighlightedOption(null);
    }, 300);
    newOptionsRequest.then(function (newOptions) {
      clearTimeout(loadingTimeout);

      if (aborted) {
        return;
      }

      setLoading(false);
      setOptions(newOptions);
    });
    return function () {
      clearTimeout(loadingTimeout);
      aborted = true;
    };
  }, [request, query, focused]);

  var flatOptions = _react.default.useMemo(function () {
    return flattenOptions(options);
  }, [options]);

  var noResults = flatOptions.length === 0 && !loading && Boolean(query.length);
  var showOpened = !disabled && focused && opened && (loading || noResults || options.length > 0);
  var context = {
    options: options,
    noResults: noResults,
    loading: loading,
    opened: showOpened,
    setOpened: setOpened,
    highlightedOption: highlightedOption,
    setHighlightedOption: setHighlightedOption,
    onHighlightNext: function onHighlightNext() {
      if (!context.opened) {
        setOpened(true);
        return;
      }

      if (loading || flatOptions.length === 0) {
        return;
      }

      if (highlightedOption === null) {
        setHighlightedOption(flatOptions[0]);
        return;
      }

      var index = flatOptions.indexOf(highlightedOption);

      if (index === flatOptions.length - 1) {
        return;
      }

      setHighlightedOption(flatOptions[index + 1]);
    },
    onHighlightPrev: function onHighlightPrev() {
      if (loading || highlightedOption === null || flatOptions.length === 0) {
        return;
      }

      var index = flatOptions.indexOf(highlightedOption);

      if (index > 0) {
        setHighlightedOption(flatOptions[index - 1]);
      }
    }
  };
  return context;
}

var _default = useSuggestState;
exports.default = _default;