"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _tag = _interopRequireDefault(require("@platform-ui/tag"));

var _iconsPack = require("@platform-ui/iconsPack");

var TagButtonStandalone = function TagButtonStandalone(props) {
  var size = props.size,
      focused = props.focused,
      disabled = props.disabled,
      error = props.error,
      readOnly = props.readOnly,
      children = props.children,
      onBlur = props.onBlur,
      onEdit = props.onEdit,
      onRemove = props.onRemove,
      onExitForward = props.onExitForward,
      onExitBackward = props.onExitBackward;

  var tagRef = _react.default.useRef(null);

  var handleBlur = focused ? onBlur : undefined;

  var handleKeyDown = function handleKeyDown(event) {
    switch (event.key) {
      case 'ArrowLeft':
        {
          onExitBackward(event);
          break;
        }

      case 'ArrowRight':
        {
          onExitForward(event);
          break;
        }

      case 'Enter':
        {
          if (!readOnly) {
            event.preventDefault();
            onEdit(event);
          }
        }
    }
  };

  _react.default.useLayoutEffect(function () {
    var tag = tagRef.current;

    if (!tag) {
      return;
    }

    if (focused) {
      if (tag !== document.activeElement) {
        tag.focus();
      }
    } else if (tag === document.activeElement) {
      tag.blur();
    }
  }, [focused]);

  return /*#__PURE__*/_react.default.createElement(_tag.default, {
    ref: tagRef,
    size: size,
    theme: "onLight",
    tagName: "span",
    tabIndex: -1,
    disabled: disabled,
    removable: !disabled && !readOnly,
    onBlur: handleBlur,
    onClick: readOnly ? undefined : onEdit,
    onRemove: onRemove,
    onKeyDown: handleKeyDown,
    onMouseDown: function onMouseDown(event) {
      event.preventDefault();
    },
    icon: error && /*#__PURE__*/_react.default.createElement(_iconsPack.Int16AttentionFilled, {
      theme: "red"
    })
  }, children);
};

var _default = /*#__PURE__*/_react.default.memo(TagButtonStandalone);

exports.default = _default;