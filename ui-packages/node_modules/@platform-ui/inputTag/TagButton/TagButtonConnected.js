"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TagsContext = require("../TagsContext");

var _TagButtonStandalone = _interopRequireDefault(require("./TagButtonStandalone"));

var TagButtonConnected = function TagButtonConnected(props) {
  var context = (0, _TagsContext.useTagsContextAutocomplete)();
  var index = props.index;
  var _onRemove = context.onRemove,
      setFocusedIndex = context.setFocusedIndex;
  var tag = context.value[index];
  var tagTitle = typeof tag === 'string' ? tag : tag.title;
  return /*#__PURE__*/_react.default.createElement(_TagButtonStandalone.default, {
    size: props.size,
    focused: index === context.focusedIndex,
    disabled: context.disabled,
    readOnly: context.readOnly,
    error: context.valueErrors && context.valueErrors[index],
    onBlur: context.onBlur,
    onEdit: function onEdit(event) {
      if (context.focusedIndex === null) {
        context.onFocus(event);
      }

      context.setFocusedIndex(index);
      context.setEditing(true);
      context.setInputValue(tagTitle);
    },
    onRemove: function onRemove(event) {
      _onRemove(event, {
        index: index
      });
    },
    onExitForward: function onExitForward(event) {
      if (index === context.value.length - 1) {
        setFocusedIndex('input');
      } else {
        setFocusedIndex(index + 1);
      }
    },
    onExitBackward: function onExitBackward(event) {
      if (index > 0) {
        context.setFocusedIndex(index - 1);
      }
    }
  }, tagTitle);
};

var _default = TagButtonConnected;
exports.default = _default;