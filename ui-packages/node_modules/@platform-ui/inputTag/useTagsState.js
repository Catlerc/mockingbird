"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _useTags2 = _interopRequireDefault(require("./useTags"));

function relatedTargetOutside(container, event) {
  var focusEvent = event;
  return !container || !focusEvent.relatedTarget || !container.contains(focusEvent.relatedTarget);
}

function useTagsState(props) {
  var name = props.name,
      value = props.value,
      disabled = props.disabled,
      readOnly = props.readOnly,
      valueErrors = props.valueErrors,
      _onChange = props.onChange,
      _onFocus = props.onFocus,
      _onBlur = props.onBlur,
      acceptTag = props.acceptTag,
      isEmptyTag = props.isEmptyTag,
      isEqualTags = props.isEqualTags;

  var _React$useState = _react.default.useState(false),
      editing = _React$useState[0],
      setEditing = _React$useState[1];

  var _React$useState2 = _react.default.useState(''),
      inputValue = _React$useState2[0],
      setInputValue = _React$useState2[1];

  var _React$useState3 = _react.default.useState(false),
      stateFocused = _React$useState3[0],
      setStateFocused = _React$useState3[1];

  var _React$useState4 = _react.default.useState(null),
      focusedIndexState = _React$useState4[0],
      setFocusedIndex = _React$useState4[1];

  var focused = typeof props.focused === 'boolean' ? props.focused : stateFocused;

  var containerRef = _react.default.useRef(null);

  var commonEventParams = name ? {
    name: name
  } : {};
  var focusedIndex = focusedIndexState;

  if (!focused) {
    focusedIndex = null;
  } else if (focusedIndex === null || focusedIndex >= value.length) {
    focusedIndex = 'input';
  }

  var _useTags = (0, _useTags2.default)(value, {
    empty: isEmptyTag,
    equals: isEqualTags
  }),
      addTag = _useTags.addTag,
      removeTag = _useTags.removeTag,
      replaceTag = _useTags.replaceTag;

  var context = {
    value: value,
    focused: focused,
    disabled: disabled,
    readOnly: readOnly,
    valueErrors: valueErrors,
    editing: editing,
    setEditing: setEditing,
    inputValue: inputValue,
    setInputValue: setInputValue,
    focusedIndex: focusedIndex,
    setFocusedIndex: setFocusedIndex,
    onChange: function onChange(event, params) {
      if (params.value !== value) {
        _onChange(event, (0, _extends2.default)({}, commonEventParams, params));
      }
    },
    onAdd: function onAdd(event, params) {
      if (!params.tag) {
        event.preventDefault();
      }

      setInputValue('');
      context.onChange(event, {
        value: addTag(params.tag)
      });
    },
    onRemove: function onRemove(event, params) {
      context.onChange(event, {
        value: removeTag(params.index)
      });
    },
    onReplace: function onReplace(event, params) {
      setEditing(false);
      setInputValue('');
      context.onChange(event, {
        value: replaceTag(params.index, params.tag)
      });
    },
    onFocus: function onFocus(event) {
      if (!focused && relatedTargetOutside(containerRef.current, event)) {
        setStateFocused(true);
        _onFocus && _onFocus(event, commonEventParams);
      }
    },
    onBlur: function onBlur(event) {
      if (focused && relatedTargetOutside(containerRef.current, event)) {
        setFocusedIndex(null);
        setStateFocused(false);
        setInputValue('');
        _onBlur && _onBlur(event, commonEventParams);
      }
    },
    container: {
      ref: containerRef,
      onMouseDown: function onMouseDown(event) {
        event.preventDefault();
        setFocusedIndex('input');
        setInputValue('');
        context.onFocus(event);
      }
    },
    acceptTag: acceptTag
  };
  return context;
}

var _default = useTagsState;
exports.default = _default;