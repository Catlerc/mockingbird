"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireDefault(require("react"));

var _inputBox = _interopRequireDefault(require("@platform-ui/inputBox"));

var _popover = _interopRequireDefault(require("@platform-ui/popover"));

var _dropdown = require("@platform-ui/dropdown");

var _TagsContext = _interopRequireDefault(require("./TagsContext"));

var _TagsList = _interopRequireDefault(require("./TagsList/TagsList"));

var _TagButtonConnected = _interopRequireDefault(require("./TagButton/TagButtonConnected"));

var _TagAddInputAutocomplete = _interopRequireDefault(require("./TagInput/TagAddInputAutocomplete"));

var _TagEditInputAutocomplete = _interopRequireDefault(require("./TagInput/TagEditInputAutocomplete"));

var _Droplist = _interopRequireDefault(require("./Droplist/Droplist"));

var _Placeholder = _interopRequireDefault(require("./Placeholder/Placeholder"));

var _useTagsState = _interopRequireDefault(require("./useTagsState"));

var _useSuggestState = _interopRequireDefault(require("./useSuggestState"));

var _excluded = ["name", "value", "onChange", "size", "focused", "onFocus", "onBlur", "request", "disabled", "readOnly", "valueErrors", "placeholder", "scrollable", "isEmptyTag", "isEqualTags", "acceptTag", "smartDirection", "tagSeparators", "dataQaType", "noResultsContent"];

var InputTagAutocomplete = function InputTagAutocomplete(_ref) {
  var name = _ref.name,
      value = _ref.value,
      onChange = _ref.onChange,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'l' : _ref$size,
      focused = _ref.focused,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      request = _ref.request,
      disabled = _ref.disabled,
      readOnly = _ref.readOnly,
      valueErrors = _ref.valueErrors,
      placeholder = _ref.placeholder,
      scrollable = _ref.scrollable,
      isEmptyTag = _ref.isEmptyTag,
      isEqualTags = _ref.isEqualTags,
      _ref$acceptTag = _ref.acceptTag,
      acceptTag = _ref$acceptTag === void 0 ? function (tag) {
    return tag;
  } : _ref$acceptTag,
      smartDirection = _ref.smartDirection,
      tagSeparators = _ref.tagSeparators,
      _ref$dataQaType = _ref.dataQaType,
      dataQaType = _ref$dataQaType === void 0 ? 'uikit/inputTagAutocomplete' : _ref$dataQaType,
      _ref$noResultsContent = _ref.noResultsContent,
      noResultsContent = _ref$noResultsContent === void 0 ? 'No results' : _ref$noResultsContent,
      inputBoxProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  var tagsState = (0, _useTagsState.default)({
    name: name,
    value: value,
    focused: focused,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    disabled: disabled,
    readOnly: readOnly,
    valueErrors: valueErrors,
    isEmptyTag: isEmptyTag,
    isEqualTags: isEqualTags,
    acceptTag: acceptTag
  });
  var suggestState = (0, _useSuggestState.default)({
    focused: tagsState.focusedIndex === 'input' || tagsState.focusedIndex !== null && tagsState.editing,
    query: tagsState.inputValue,
    request: request,
    disabled: Boolean(disabled || readOnly)
  });
  var context = (0, _extends2.default)({
    dataQaType: dataQaType,
    size: size
  }, tagsState, suggestState);
  var loading = context.loading,
      noResults = context.noResults;

  var popoverContent = /*#__PURE__*/_react.default.createElement(_Droplist.default, null, (0, _dropdown.renderCustomContent)({
    loading: loading,
    noResults: noResults,
    noResultsContent: noResultsContent
  }));

  return /*#__PURE__*/_react.default.createElement(_TagsContext.default.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    popoverBlock: popoverContent,
    wide: true,
    isActive: context.opened,
    isInactive: !context.opened,
    smartDirection: smartDirection,
    align: "stretch"
  }, /*#__PURE__*/_react.default.createElement("div", Object.assign({}, context.container, {
    style: {
      flexGrow: 1,
      minWidth: 0
    }
  }), /*#__PURE__*/_react.default.createElement(_inputBox.default, Object.assign({}, inputBoxProps, {
    dataQaType: dataQaType,
    size: size,
    cursor: "text",
    filled: value.length > 0,
    focused: context.focused,
    disabled: disabled,
    readOnly: readOnly,
    onClean: function onClean(event) {
      context.onChange(event, {
        value: []
      });
    },
    expandable: true
  }), value.length === 0 && context.inputValue === '' && !context.highlightedOption && placeholder ? /*#__PURE__*/_react.default.createElement(_Placeholder.default, {
    dataQaType: dataQaType + ".placeholder"
  }, placeholder) : null, /*#__PURE__*/_react.default.createElement(_TagsList.default, {
    scrollable: scrollable,
    focused: context.focused,
    size: size
  }, value.map(function (item, index) {
    return !disabled && !readOnly && context.editing && index === context.focusedIndex ? /*#__PURE__*/_react.default.createElement(_TagEditInputAutocomplete.default, {
      key: "edit"
    }) : /*#__PURE__*/_react.default.createElement(_TagButtonConnected.default, {
      key: "button_" + (typeof item === 'string' ? item : (item == null ? void 0 : item.value) || index),
      index: index,
      size: size
    });
  }), /*#__PURE__*/_react.default.createElement(_TagAddInputAutocomplete.default, {
    tagSeparators: tagSeparators
  }))))));
}; // TODO: remove defaultProps in the next major


InputTagAutocomplete.defaultProps = {
  acceptTag: function acceptTag(tag) {
    return tag;
  },
  dataQaType: 'uikit/inputTagAutocomplete',
  size: 'l'
};
var _default = InputTagAutocomplete;
exports.default = _default;