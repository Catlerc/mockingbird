/// <reference types="react" />
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { InputBoxProps } from '@platform-ui/inputBox';
export declare type TagIndex = number | 'input';
export declare type InputSize = InputBoxProps['size'];
export declare type ObjectTag = {
    title: string;
    value: string;
    [name: string]: any;
};
export declare function isObjectTag(tag: Tag): tag is ObjectTag;
export declare type Tag = string | ObjectTag;
export interface TagGroup {
    title: string;
    options: Tag[];
}
export declare function isTagGroup(option: Option): option is TagGroup;
export declare type Option = Tag | TagGroup;
export declare type InputTagFocusEvent = React.FocusEvent | React.MouseEvent | React.KeyboardEvent;
export declare type InputTagChangeEvent = InputTagFocusEvent;
export interface TagsContextType<TagType = string> extends DataQaInterface {
    editing: boolean;
    setEditing: (e: boolean) => void;
    inputValue: string;
    setInputValue: (v: string) => void;
    focusedIndex: TagIndex | null;
    setFocusedIndex: (i: TagIndex | null) => void;
    value: TagType[];
    onChange: (e: InputTagChangeEvent, p: {
        value: TagType[];
    }) => void;
    onAdd: (e: InputTagChangeEvent, p: {
        tag: TagType;
    }) => void;
    onRemove: (e: InputTagChangeEvent, p: {
        index: number;
    }) => void;
    onReplace: (e: InputTagChangeEvent, p: {
        index: number;
        tag: TagType;
    }) => void;
    acceptTag: (tag: TagType) => TagType | null;
    focused: boolean;
    onFocus: (e: InputTagFocusEvent) => void;
    onBlur: (e: InputTagFocusEvent) => void;
    disabled?: boolean;
    readOnly?: boolean;
    valueErrors?: boolean[];
    container: {
        ref: React.Ref<HTMLDivElement>;
        onMouseDown: (e: React.MouseEvent) => void;
    };
}
export interface AutocompleteContextType {
    options: Option[];
    loading: boolean;
    noResults: boolean;
    opened: boolean;
    setOpened: (o: boolean) => void;
    highlightedOption: Tag | null;
    setHighlightedOption: (o: Tag | null) => void;
    onHighlightNext: () => void;
    onHighlightPrev: () => void;
    size?: InputSize;
}
export interface TagsContextAutocompleteType extends TagsContextType<Tag>, AutocompleteContextType {
}
