import React, { PureComponent } from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
export declare const FILE_STATUS: {
    LOADING: string;
    SUCCESS: string;
    ERROR: string;
    REMOVED: string;
};
declare type StatusType = typeof FILE_STATUS[keyof typeof FILE_STATUS];
declare type FileLike = {
    name: string;
    size?: number;
} | File;
declare type FileType = {
    file: FileLike;
    status: StatusType;
};
export interface FileItem {
    /**
     * Дополнительное сообщение под названием файла
     */
    message?: string;
    /**
     * Статус загрузки файла
     */
    status: StatusType;
    /**
     * Ссылка на загруженный файл
     */
    url?: string;
    /**
     * Возможность удалять файл
     */
    removable?: boolean;
    /**
     * Ссылка на preview
     */
    previewUrl?: string;
    /**
     * Флаг возможности восстановить файл
     */
    restorable?: boolean;
    /**
     * Нативный `File` либо похожая на него структура
     */
    file: FileLike;
    /**
     * Обработчик клика по файлу
     */
    onClick?: (e: React.SyntheticEvent, fileItem: FileItem) => void;
}
export declare type AttachFileProps = DataQaInterface & {
    /**
     * Файлы
     */
    files: FileItem[];
    /**
     * Лейблы для различных состояний
     */
    labels: {
        /**
         * Общая часть лейбла, оторая выводится и для мобильного, и для десктопного варианта
         */
        common?: string;
        /**
         * Часть только для десктопного варианта, намекает на возможность drag'n'drop
         */
        desktop?: string;
        /**
         * Лейбл, отображающийся во время перетаскивания
         */
        dragging?: string;
    };
    /**
     * Состояние ошибки
     */
    error?: boolean;
    /**
     * Ограничение в 1 файл
     */
    single?: boolean;
    /**
     * Допустимые MIME-типы файлов (атрибут `accept` у инпута)
     */
    accept?: string;
    /**
     * `html`-атрибут `tabindex` для инпута
     */
    tabIndex?: number;
    /**
     * Сфокусировано ли поле
     */
    focused?: boolean;
    /**
     * Обработчик потери фокуса
     */
    onBlur: (event: React.FocusEvent<HTMLElement>) => void;
    /**
     * Обработчик фокуса
     */
    onFocus: (event: React.FocusEvent<HTMLElement>) => void;
    /**
     * Обработчик добавления файлов
     */
    onAdd: (event: React.ChangeEvent<HTMLInputElement>, params: {
        files: FileType[];
    }) => void;
    /**
     * Обработчик удаления файла
     */
    onRemove: (event: React.SyntheticEvent<HTMLElement>, params: {
        file: FileType;
    }) => void;
    /**
     * Обработчик восстановления файла
     */
    onRestore: (event: React.SyntheticEvent<HTMLElement>, params: {
        file: FileType;
    }) => void;
    /**
     * Флаг при котором загрузка запрещена, а файлы доступны только для чтения
     */
    readOnly?: boolean;
    /**
     * Включает превью файлов
     */
    preview?: boolean;
    /**
     * Включает раскрытие/скрытие списка файлов
     */
    collapsible?: boolean;
    /**
     * Сокращённые названия
     */
    sizeUnits: string[];
    /**
     * Функция для форматирования размера файла
     */
    formatFileSize: (size: number, units: string[]) => string;
    /**
     * Текст кнопки "Показать всё"
     */
    expandButtonLabel?: string;
    /**
     * Текст кнопки "Скрыть"
     */
    collapseButtonLabel?: string;
    /**
     * Текст кнопки восстановления файла
     */
    restoreButtonLabel?: string;
    /**
     * aria-labеl кнопки удаления файла
     */
    removeButtonAriaLabel?: string | ((params: {
        file: FileLike;
    }) => string);
    /**
     * aria-label кнопки восстановления файла
     */
    restoreButtonAriaLabel?: string | ((params: {
        file: FileLike;
    }) => string);
};
declare type AttachFileState = {
    focused?: boolean;
    isTouch?: boolean;
    collapsed?: boolean;
    drag?: boolean;
    dragHover?: boolean;
};
declare class AttachFile extends PureComponent<AttachFileProps, AttachFileState> {
    refInput: React.RefObject<HTMLInputElement>;
    labelId: string;
    errorId: string;
    constructor(props: AttachFileProps);
    static defaultProps: {
        dataQaType: string;
        files: never[];
        single: boolean;
        focused: boolean;
        readOnly: boolean;
        preview: boolean;
        collapsible: boolean;
        labels: {};
        onBlur: () => void;
        onFocus: () => void;
        onAdd: () => void;
        onRemove: () => void;
        onRestore: () => void;
        sizeUnits: string[];
        formatFileSize: (size: number, units: string[]) => string;
        expandButtonLabel: string;
        collapseButtonLabel: string;
        restoreButtonLabel: string;
        removeButtonAriaLabel: ({ file }: {
            file: File;
        }) => string;
        restoreButtonAriaLabel: ({ file }: {
            file: FileLike;
        }) => string;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: AttachFileProps): void;
    componentWillUnmount(): void;
    handleDocumentDragEnter: (event: DragEvent) => void;
    handleDocumentDrop: () => void;
    handleDocumentDragLeave: (event: DragEvent) => void;
    handleInputFocus: (event: React.FocusEvent<HTMLElement>) => void;
    handleInputBlur: (event: React.FocusEvent<HTMLElement>) => void;
    handleInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    handleRemoveButtonClick: (event: React.MouseEvent<HTMLElement>) => void;
    handleRestoreButtonClick: (event: React.MouseEvent<HTMLElement>) => void;
    handleInputDragOver: () => void;
    handleInputDragLeave: () => void;
    handleCollapseButtonClick: (event: React.MouseEvent<HTMLElement>) => void;
    getLabels(): {
        common: string;
        desktop: string;
        dragging: string;
    } | {
        common: string;
        desktop: string;
        dragging: string;
    };
    focus(): void;
    blur(): void;
    renderLabel(): JSX.Element;
    renderFile(fileItem: FileItem, index: number): JSX.Element;
    render(): JSX.Element;
}
export default AttachFile;
