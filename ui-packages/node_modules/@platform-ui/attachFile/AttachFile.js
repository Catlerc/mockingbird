"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = exports.FILE_STATUS = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _findIndex = _interopRequireDefault(require("@tinkoff/utils/array/findIndex"));

var _deviceInfo = require("@platform-ui/device-info");

var _generateId = _interopRequireDefault(require("@platform-ui/generateId"));

var _loader = _interopRequireDefault(require("@platform-ui/loader"));

var _clickable = _interopRequireDefault(require("@platform-ui/clickable"));

var _Close = _interopRequireDefault(require("@platform-ui/iconsPack/interface/24/Close"));

var _TrashFilled = _interopRequireDefault(require("@platform-ui/iconsPack/interface/24/TrashFilled"));

var _SuccessFilled = _interopRequireDefault(require("@platform-ui/iconsPack/interface/24/SuccessFilled"));

var _AttentionFilled = _interopRequireDefault(require("@platform-ui/iconsPack/interface/24/AttentionFilled"));

var _Document = _interopRequireDefault(require("@platform-ui/iconsPack/interface/24/Document"));

var _AttachFileModule = _interopRequireDefault(require("./AttachFile.module.css"));

var noop = function noop() {};

var splitFilename = function splitFilename(filename) {
  return filename.split(/(?=.+)\.(?=[^.]*$)/);
};

var FILE_STATUS = {
  LOADING: 'loading',
  SUCCESS: 'success',
  ERROR: 'error',
  REMOVED: 'removed'
};
exports.FILE_STATUS = FILE_STATUS;

var formatFileSize = function formatFileSize(size, units) {
  var i;
  var result = size;

  for (i = 0; i < units.length - 1 && result >= 1024; i++) {
    result /= 1024;
  }

  return +result.toFixed(2) + " " + units[i];
};

var DEFAULT_LABELS = {
  single: {
    common: 'Выберите файл',
    desktop: ' или перетяните его сюда',
    dragging: 'Поместите файл сюда'
  },
  multiple: {
    common: 'Выберите файлы',
    desktop: ' или перетяните их сюда',
    dragging: 'Поместите файлы сюда'
  }
};

var callIfFn = function callIfFn(val, param) {
  return typeof val === 'function' ? val(param) : val;
};

var AttachFile = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2.default)(AttachFile, _PureComponent);

  function AttachFile(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.refInput = /*#__PURE__*/(0, _react.createRef)();
    _this.labelId = (0, _generateId.default)((0, _assertThisInitialized2.default)(_this));
    _this.errorId = (0, _generateId.default)((0, _assertThisInitialized2.default)(_this));

    _this.handleDocumentDragEnter = function (event) {
      if (event.dataTransfer && event.dataTransfer.files) {
        _this.setState({
          drag: true
        });
      }
    };

    _this.handleDocumentDrop = function () {
      _this.setState({
        drag: false
      });
    };

    _this.handleDocumentDragLeave = function (event) {
      // @ts-ignore
      if (!event.fromElement) {
        _this.setState({
          drag: false
        });
      }
    };

    _this.handleInputFocus = function (event) {
      _this.setState({
        focused: true
      });

      _this.props.onFocus(event);
    };

    _this.handleInputBlur = function (event) {
      _this.setState({
        focused: false
      });

      _this.props.onBlur(event);
    };

    _this.handleInputChange = function (event) {
      var files = [];

      if (event.target.files) {
        for (var i = 0, len = event.target.files.length; i < len; i++) {
          files.push({
            file: event.target.files[i],
            status: FILE_STATUS.LOADING
          });
        }
      }

      _this.setState({
        dragHover: false
      }); // @ts-ignore
      // eslint-disable-next-line no-param-reassign


      event.target.value = null;

      if (files.length === 0) {
        return;
      }

      _this.props.onAdd(event, {
        files: files
      });
    };

    _this.handleRemoveButtonClick = function (event) {
      event.preventDefault();
      event.stopPropagation();
      var index = event.currentTarget.dataset.index;

      _this.props.onRemove(event, {
        // @ts-ignore
        file: _this.props.files[index]
      });
    };

    _this.handleRestoreButtonClick = function (event) {
      event.preventDefault();
      var index = event.currentTarget.dataset.index;

      _this.props.onRestore(event, {
        // @ts-ignore
        file: _this.props.files[index]
      });
    };

    _this.handleInputDragOver = function () {
      _this.setState({
        dragHover: true
      });
    };

    _this.handleInputDragLeave = function () {
      _this.setState({
        dragHover: false
      });
    };

    _this.handleCollapseButtonClick = function (event) {
      event.preventDefault();
      var collapsed = _this.state.collapsed;

      _this.setState({
        collapsed: !collapsed
      });
    };

    _this.state = {
      focused: props.focused,
      isTouch: false,
      collapsed: true
    };
    return _this;
  }

  var _proto = AttachFile.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var focused = this.state.focused;
    focused ? this.focus() : this.blur();
    document.addEventListener('dragenter', this.handleDocumentDragEnter);
    document.addEventListener('dragleave', this.handleDocumentDragLeave);
    document.addEventListener('drop', this.handleDocumentDrop);
    this.setState({
      isTouch: (0, _deviceInfo.isTouchDevice)()
    });
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var focused = this.props.focused;

    if (!prevProps.focused && focused) {
      this.focus();
    }

    if (prevProps.focused && !focused) {
      this.blur();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.removeEventListener('dragenter', this.handleDocumentDragEnter);
    document.removeEventListener('dragleave', this.handleDocumentDragLeave);
    document.removeEventListener('drop', this.handleDocumentDrop);
  };

  _proto.getLabels = function getLabels() {
    var _this$props = this.props,
        labels = _this$props.labels,
        single = _this$props.single;
    var mergedLabels = (0, _extends2.default)({}, DEFAULT_LABELS[single ? 'single' : 'multiple']);
    Object.keys(labels).forEach(function (key) {
      if (labels[key]) {
        mergedLabels[key] = labels[key];
      }
    });
    return mergedLabels;
  };

  _proto.focus = function focus() {
    this.refInput && this.refInput.current && this.refInput.current.focus && this.refInput.current.focus();
  };

  _proto.blur = function blur() {
    this.refInput && this.refInput.current && this.refInput.current.blur && this.refInput.current.blur();
  };

  _proto.renderLabel = function renderLabel() {
    var _this$props2 = this.props,
        files = _this$props2.files,
        single = _this$props2.single,
        accept = _this$props2.accept,
        tabIndex = _this$props2.tabIndex,
        dataQaType = _this$props2.dataQaType;
    var drag = this.state.drag;
    var labels = this.getLabels();
    var hasError = Boolean(files.find(function (x) {
      return x.status === FILE_STATUS.ERROR;
    }));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _AttachFileModule.default.labelContainer
    }, /*#__PURE__*/_react.default.createElement("input", {
      className: _AttachFileModule.default.input,
      ref: this.refInput,
      tabIndex: tabIndex,
      type: "file",
      accept: accept,
      multiple: !single,
      "aria-labelledby": this.labelId,
      "aria-errormessage": hasError ? this.errorId : undefined,
      "aria-invalid": hasError || undefined,
      onMouseDown: function onMouseDown(event) {
        return event.preventDefault();
      },
      onDragLeave: this.handleInputDragLeave,
      onDragOver: this.handleInputDragOver,
      onChange: this.handleInputChange,
      onFocus: this.handleInputFocus,
      onBlur: this.handleInputBlur,
      "data-qa-type": dataQaType + ".input"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: _AttachFileModule.default.label,
      id: this.labelId,
      "data-qa-type": dataQaType + ".label"
    }, drag ? /*#__PURE__*/_react.default.createElement("span", {
      className: _AttachFileModule.default.dragLabel,
      "data-qa-type": dataQaType + ".labelText " + dataQaType + ".labelText_dragging"
    }, labels.dragging) : /*#__PURE__*/_react.default.createElement(_react.Fragment, null, labels.common, /*#__PURE__*/_react.default.createElement("span", {
      className: _AttachFileModule.default.dragLabel,
      "data-qa-type": dataQaType + ".labelText"
    }, labels.desktop))));
  };

  _proto.renderFile = function renderFile(fileItem, index) {
    var _cn, _FILE_STATUS$LOADING$, _FILE_STATUS$LOADING$2;

    var file = fileItem.file,
        status = fileItem.status,
        message = fileItem.message,
        url = fileItem.url,
        previewUrl = fileItem.previewUrl,
        _fileItem$removable = fileItem.removable,
        removable = _fileItem$removable === void 0 ? true : _fileItem$removable,
        _fileItem$restorable = fileItem.restorable,
        restorable = _fileItem$restorable === void 0 ? true : _fileItem$restorable,
        _onClick = fileItem.onClick;
    var _this$props3 = this.props,
        files = _this$props3.files,
        tabIndex = _this$props3.tabIndex,
        readOnly = _this$props3.readOnly,
        preview = _this$props3.preview,
        dataQaType = _this$props3.dataQaType,
        sizeUnits = _this$props3.sizeUnits,
        formatFileSize = _this$props3.formatFileSize,
        restoreButtonLabel = _this$props3.restoreButtonLabel,
        removeButtonAriaLabel = _this$props3.removeButtonAriaLabel,
        restoreButtonAriaLabel = _this$props3.restoreButtonAriaLabel;
    var errorIndex = (0, _findIndex.default)(function (x) {
      return x.status === FILE_STATUS.ERROR;
    })(files);

    var _splitFilename = splitFilename(file.name),
        name = _splitFilename[0],
        extension = _splitFilename[1];

    return /*#__PURE__*/_react.default.createElement("li", {
      key: file.name + "-" + status + "-" + url,
      className: _AttachFileModule.default.item,
      "data-qa-type": dataQaType + ".item"
    }, /*#__PURE__*/_react.default.createElement(_clickable.default, {
      className: (0, _classnames.default)((_cn = {}, _cn[_AttachFileModule.default.file] = true, _cn[_AttachFileModule.default["file_status-" + status]] = true, _cn[_AttachFileModule.default.file_link] = url || _onClick, _cn)),
      innerClassName: _AttachFileModule.default.fileInner,
      href: url,
      tagName: !url ? 'div' : undefined,
      target: url ? '_blank' : undefined,
      dataQaType: dataQaType + ".file_status-" + status,
      innerDataQaType: dataQaType + ".fileInner",
      onClick: function onClick(e) {
        return _onClick && _onClick(e, fileItem);
      }
    }, preview ? /*#__PURE__*/_react.default.createElement("div", {
      className: _AttachFileModule.default.preview,
      style: previewUrl ? {
        backgroundImage: "url(" + previewUrl + ")"
      } : undefined
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _AttachFileModule.default.previewOverlay
    }), /*#__PURE__*/_react.default.createElement("div", {
      "data-qa-type": dataQaType + ".statusIcon",
      className: _AttachFileModule.default.icon
    }, (_FILE_STATUS$LOADING$ = {}, _FILE_STATUS$LOADING$[FILE_STATUS.LOADING] = /*#__PURE__*/_react.default.createElement(_loader.default, {
      size: "m",
      color: "rgba(0, 0, 0, .24)"
    }), _FILE_STATUS$LOADING$[FILE_STATUS.SUCCESS] = previewUrl ? null : /*#__PURE__*/_react.default.createElement(_Document.default, null), _FILE_STATUS$LOADING$[FILE_STATUS.REMOVED] = /*#__PURE__*/_react.default.createElement(_TrashFilled.default, null), _FILE_STATUS$LOADING$[FILE_STATUS.ERROR] = /*#__PURE__*/_react.default.createElement(_AttentionFilled.default, null), _FILE_STATUS$LOADING$)[status])) : /*#__PURE__*/_react.default.createElement("div", {
      "data-qa-type": dataQaType + ".statusIcon",
      className: _AttachFileModule.default.icon
    }, (_FILE_STATUS$LOADING$2 = {}, _FILE_STATUS$LOADING$2[FILE_STATUS.LOADING] = /*#__PURE__*/_react.default.createElement(_loader.default, {
      size: "m"
    }), _FILE_STATUS$LOADING$2[FILE_STATUS.SUCCESS] = /*#__PURE__*/_react.default.createElement(_SuccessFilled.default, null), _FILE_STATUS$LOADING$2[FILE_STATUS.REMOVED] = /*#__PURE__*/_react.default.createElement(_TrashFilled.default, null), _FILE_STATUS$LOADING$2[FILE_STATUS.ERROR] = /*#__PURE__*/_react.default.createElement(_AttentionFilled.default, null), _FILE_STATUS$LOADING$2)[status]), /*#__PURE__*/_react.default.createElement("div", {
      className: _AttachFileModule.default.fileInfo
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _AttachFileModule.default.fileTitle
    }, /*#__PURE__*/_react.default.createElement("span", {
      "data-qa-type": dataQaType + ".fileName",
      className: _AttachFileModule.default.fileName
    }, name), extension && /*#__PURE__*/_react.default.createElement("span", {
      "data-qa-type": dataQaType + ".fileExtension"
    }, ".", extension), typeof file.size === 'number' && /*#__PURE__*/_react.default.createElement("span", {
      "data-qa-type": dataQaType + ".fileSize",
      className: _AttachFileModule.default.fileSize
    }, formatFileSize(file.size, sizeUnits))), message && /*#__PURE__*/_react.default.createElement("div", {
      id: index === errorIndex ? this.errorId : undefined,
      className: _AttachFileModule.default.message
    }, message), status === 'removed' && restorable && /*#__PURE__*/_react.default.createElement(_clickable.default, {
      "data-index": index,
      className: _AttachFileModule.default.restoreButton,
      onClick: this.handleRestoreButtonClick,
      "aria-label": callIfFn(restoreButtonAriaLabel, {
        file: file
      })
    }, restoreButtonLabel)), !readOnly && status !== 'removed' && removable && /*#__PURE__*/_react.default.createElement(_clickable.default, {
      "data-index": index,
      tabIndex: tabIndex,
      onClick: this.handleRemoveButtonClick,
      className: _AttachFileModule.default.removeButton,
      "aria-label": callIfFn(removeButtonAriaLabel, {
        file: file
      }),
      dataQaType: dataQaType + ".removeButton"
    }, /*#__PURE__*/_react.default.createElement(_Close.default, null))));
  };

  _proto.render = function render() {
    var _cn2;

    var _this$props4 = this.props,
        files = _this$props4.files,
        error = _this$props4.error,
        single = _this$props4.single,
        readOnly = _this$props4.readOnly,
        dataQaType = _this$props4.dataQaType,
        preview = _this$props4.preview,
        expandButtonLabel = _this$props4.expandButtonLabel,
        collapseButtonLabel = _this$props4.collapseButtonLabel;
    var _this$state = this.state,
        drag = _this$state.drag,
        dragHover = _this$state.dragHover,
        focused = _this$state.focused,
        isTouch = _this$state.isTouch,
        collapsed = _this$state.collapsed;
    var hasError = Boolean(files.find(function (x) {
      return x.status === FILE_STATUS.ERROR;
    }));
    var showInput = !(single && files.length > 0) && !readOnly;
    var collapsible = this.props.collapsible && files.length > 3 && !hasError;
    var viewFiles = collapsible && collapsed ? files.slice(0, 3) : files;
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-qa-type": dataQaType,
      className: (0, _classnames.default)(_AttachFileModule.default.root, (_cn2 = {}, _cn2[_AttachFileModule.default.root_focused] = focused, _cn2[_AttachFileModule.default.root_filled] = !showInput, _cn2[_AttachFileModule.default.root_isTouch] = isTouch, _cn2[_AttachFileModule.default.root_error] = error, _cn2[_AttachFileModule.default.root_dragHover] = dragHover, _cn2[_AttachFileModule.default.root_drag] = drag, _cn2[_AttachFileModule.default.root_readOnly] = readOnly, _cn2[_AttachFileModule.default.root_preview] = preview, _cn2[_AttachFileModule.default.root_collapsible] = collapsible, _cn2[_AttachFileModule.default.root_collapsed] = collapsible && collapsed, _cn2))
    }, showInput && this.renderLabel(), files.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: _AttachFileModule.default.listContainer
    }, /*#__PURE__*/_react.default.createElement("ul", {
      className: _AttachFileModule.default.list
    }, viewFiles.map(this.renderFile.bind(this))), collapsible && /*#__PURE__*/_react.default.createElement(_clickable.default, {
      tagName: "div",
      onClick: this.handleCollapseButtonClick,
      className: _AttachFileModule.default.collapseButton
    }, collapsed ? expandButtonLabel : collapseButtonLabel)));
  };

  return AttachFile;
}(_react.PureComponent);

AttachFile.defaultProps = {
  dataQaType: 'uikit/attachFile',
  files: [],
  single: false,
  focused: false,
  readOnly: false,
  preview: false,
  collapsible: false,
  labels: {},
  onBlur: noop,
  onFocus: noop,
  onAdd: noop,
  onRemove: noop,
  onRestore: noop,
  sizeUnits: ['Б', 'КБ', 'МБ', 'ГБ'],
  formatFileSize: formatFileSize,
  expandButtonLabel: 'Показать все',
  collapseButtonLabel: 'Скрыть',
  restoreButtonLabel: 'Восстановить',
  removeButtonAriaLabel: function removeButtonAriaLabel(_ref) {
    var file = _ref.file;
    return "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0444\u0430\u0439\u043B " + file.name;
  },
  restoreButtonAriaLabel: function restoreButtonAriaLabel(_ref2) {
    var file = _ref2.file;
    return "\u0412\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0444\u0430\u0439\u043B " + file.name;
  }
};
var _default = AttachFile;
exports.default = _default;