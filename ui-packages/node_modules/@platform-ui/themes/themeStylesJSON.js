"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var getMedia = function getMedia(themeKey) {
  return "@media(prefers-color-scheme:" + themeKey + ")";
};

var getDefaultOverrideSelector = function getDefaultOverrideSelector(rootSelector, themeKey) {
  return "[data-tds-theme=\"" + themeKey + "\"]";
};

var themeStylesJSON = function themeStylesJSON(themes, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$defaultThemeKey = _ref.defaultThemeKey,
      defaultThemeKey = _ref$defaultThemeKey === void 0 ? 'light' : _ref$defaultThemeKey,
      _ref$OSThemeKeys = _ref.OSThemeKeys,
      OSThemeKeys = _ref$OSThemeKeys === void 0 ? ['light', 'dark'] : _ref$OSThemeKeys,
      _ref$useOSTheme = _ref.useOSTheme,
      useOSTheme = _ref$useOSTheme === void 0 ? true : _ref$useOSTheme,
      _ref$useOverrideTheme = _ref.useOverrideTheme,
      useOverrideTheme = _ref$useOverrideTheme === void 0 ? true : _ref$useOverrideTheme,
      _ref$rootSelector = _ref.rootSelector,
      rootSelector = _ref$rootSelector === void 0 ? ':root' : _ref$rootSelector,
      _ref$getOverrideSelec = _ref.getOverrideSelector,
      getOverrideSelector = _ref$getOverrideSelec === void 0 ? getDefaultOverrideSelector : _ref$getOverrideSelec;

  var stylesJSON = {};
  var allThemeKeys = Object.keys(themes);

  var existsAndIsNotDefault = function existsAndIsNotDefault(themeKey) {
    return !!themes[themeKey] && themeKey !== defaultThemeKey;
  };

  var defaultThemeSelector = rootSelector;

  if (useOSTheme && useOverrideTheme && allThemeKeys.length > 1) {
    defaultThemeSelector += "," + getOverrideSelector(rootSelector, defaultThemeKey);
  }

  stylesJSON[defaultThemeSelector] = (0, _extends2.default)({}, themes[defaultThemeKey]);

  if (useOSTheme) {
    OSThemeKeys.filter(existsAndIsNotDefault).forEach(function (themeKey) {
      var _stylesJSON$getMedia;

      stylesJSON[getMedia(themeKey)] = (_stylesJSON$getMedia = {}, _stylesJSON$getMedia[rootSelector] = (0, _extends2.default)({}, themes[themeKey]), _stylesJSON$getMedia);
    });
  }

  if (useOverrideTheme) {
    allThemeKeys.filter(existsAndIsNotDefault).forEach(function (themeKey) {
      stylesJSON[getOverrideSelector(rootSelector, themeKey)] = (0, _extends2.default)({}, themes[themeKey]);
    });
  }

  return stylesJSON;
};

module.exports = {
  themeStylesJSON: themeStylesJSON
};