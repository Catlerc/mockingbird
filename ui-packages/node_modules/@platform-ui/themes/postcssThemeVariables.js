"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var csstree = require('css-tree');

var pick = require('@tinkoff/utils/object/pick');

var map = require('@tinkoff/utils/object/map');

var _require = require('./themeStylesJSON'),
    themeStylesJSON = _require.themeStylesJSON;

var jsonToCSS = function jsonToCSS(json) {
  return Object.keys(json).map(function (key) {
    var value = json[key];

    if (typeof value === 'object') {
      return key + "{" + jsonToCSS(value) + "}";
    }

    return key + ":" + value + ";";
  }).join('');
};

var postcssThemeVariables = function postcssThemeVariables(themes, options) {
  var theme = themes[Object.keys(themes)[0]];

  var OnceExit = function OnceExit(root) {
    var variablesFound = [];
    root.walkDecls(function (decl) {
      var valueAST = csstree.parse(decl.value, {
        context: 'value'
      });
      csstree.walk(valueAST, function (node) {
        if (node.type !== 'Function' || node.name !== 'var') {
          return;
        }

        var varName = node.children.first().name;

        if (!theme[varName]) {
          return;
        }

        variablesFound.push(varName);

        while (node.children.first() !== node.children.last()) {
          node.children.pop();
        }
      }); // eslint-disable-next-line no-param-reassign

      decl.value = csstree.generate(valueAST, {
        context: 'value '
      });
    });

    if (variablesFound.length === 0) {
      return;
    }

    var filteredThemes = map(pick(variablesFound), themes);
    var themesJSON = themeStylesJSON(filteredThemes, options);
    var themesCSS = jsonToCSS(themesJSON);
    root.prepend(themesCSS);
  };

  return {
    postcssPlugin: 'postcss-theme-variables',
    OnceExit: OnceExit
  };
};

var postcssThemeOutput = function postcssThemeOutput(themes, options) {
  if (options === void 0) {
    options = {};
  }

  return {
    postcssPlugin: 'postcss-theme-output',
    Once: function Once(root) {
      root.walkAtRules('tds-theme', function (rule) {
        var themeKey = rule.params;
        var ruleThemes = themes;
        var ruleOptions = options;

        if (themeKey) {
          var _ruleThemes;

          ruleThemes = (_ruleThemes = {}, _ruleThemes[themeKey] = ruleThemes[themeKey], _ruleThemes);
          ruleOptions = (0, _extends2.default)({}, ruleOptions, {
            defaultThemeKey: themeKey
          });
        }

        var themesJSON = themeStylesJSON(ruleThemes, ruleOptions);
        var themesCSS = jsonToCSS(themesJSON);
        rule.replaceWith(themesCSS);
      });
    }
  };
};

module.exports = {
  postcssThemeVariables: postcssThemeVariables,
  postcssThemeOutput: postcssThemeOutput
};