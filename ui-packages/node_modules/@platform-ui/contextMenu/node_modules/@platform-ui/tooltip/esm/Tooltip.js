import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["inline", "children", "withCorner", "theme", "popoverContent", "alignText", "overflow", "increasedTouchZone", "customPadding", "direction", "minArrowOffset", "hideOnTouchMove", "dataQaType", "cornerStyle", "pointerEvents", "portalTagName"];
import React, { useRef, useState } from 'react';
import generateId from '@platform-ui/generateId';
import Popover from '@platform-ui/popover';
import Bubble from './TooltipBubble/TooltipBubble';
import { equalStyles } from './utils';

const Tooltip = _ref => {
  let {
    inline = false,
    children,
    withCorner = true,
    theme,
    popoverContent,
    alignText = 'left',
    overflow = 'visible',
    increasedTouchZone = false,
    customPadding = 7,
    direction: directionProp = 'bottom',
    minArrowOffset = 10,
    hideOnTouchMove = true,
    dataQaType = 'uikit/tooltip',
    cornerStyle: propsCornerStyle,
    pointerEvents,
    portalTagName = 'span'
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const [direction, setDirection] = useState('bottom');
  const [cornerStyle, setCornerStyle] = useState({});
  const id = useRef(generateId(this));

  const handleActiveToggle = (dir, cornStyle) => {
    if (direction !== dir || !equalStyles(cornerStyle, cornStyle)) {
      setDirection(dir);
      setCornerStyle(cornStyle);
    }
  };

  const bubble = popoverContent && /*#__PURE__*/React.createElement(Bubble, {
    dataQaType: `${dataQaType}.bubble`,
    inline: inline,
    withCorner: withCorner,
    direction: direction,
    cornerStyle: propsCornerStyle || cornerStyle,
    theme: theme,
    alignText: alignText,
    id: id.current,
    overflow: overflow
  }, popoverContent);
  return /*#__PURE__*/React.createElement(Popover, Object.assign({
    popoverBlock: bubble,
    onActiveToggle: handleActiveToggle,
    increasedTouchZone: increasedTouchZone,
    customPadding: customPadding,
    direction: directionProp,
    minArrowOffset: minArrowOffset,
    hideOnTouchMove: hideOnTouchMove
  }, otherProps, {
    role: "tooltip",
    dataQaType: dataQaType,
    ariaDescribedBy: id.current,
    blockStyles: {
      pointerEvents
    },
    portalTagName: portalTagName
  }), children);
};

export default Tooltip;