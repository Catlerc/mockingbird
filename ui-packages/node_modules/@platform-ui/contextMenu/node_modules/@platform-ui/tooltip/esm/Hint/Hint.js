import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
const _excluded = ["hintColor", "focusable"];
import React from 'react';
import cn from 'classnames';
import Tooltip from '../Tooltip';
import { Hint as HintIcon } from '../icons';
import styles from './Hint.module.css';

const Hint = _ref => {
  let {
    hintColor = 'greyLighten20',
    focusable
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  const [opened, setOpened] = React.useState(false);

  const handleFocus = () => {
    setOpened(true);
  };

  const handleBlur = () => {
    setOpened(false);
  };

  const tooltipProps = focusable ? {
    isActive: otherProps.isActive || opened,
    isInactive: otherProps.isInactive || !opened,
    onShow: handleFocus,
    onClose: handleBlur
  } : {};
  const wrapperProps = focusable ? {
    tabIndex: 0,
    onFocus: handleFocus,
    onBlur: handleBlur
  } : {};
  return /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, otherProps, tooltipProps), /*#__PURE__*/React.createElement("span", Object.assign({}, wrapperProps, {
    className: cn({
      [styles.wrapper]: true,
      [styles[`wrapper_color_${hintColor}`]]: hintColor
    })
  }), /*#__PURE__*/React.createElement(HintIcon, null)));
};

export default Hint;