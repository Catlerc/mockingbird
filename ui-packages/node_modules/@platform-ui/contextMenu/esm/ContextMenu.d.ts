import type { HTMLAttributes } from 'react';
import React from 'react';
import type { DataQaInterface } from '@platform-ui/dataQa';
import type { Align, Direction, PopoverProps } from '@platform-ui/popover';
import type { FCC } from '@platform-ui/types';
import type { ContextMenuItemProps, ContextMenuItemSizes } from './ContextMenuItem/ContextMenuItem';
declare const popoverPositions: Record<'left' | 'right' | 'center' | 'left-side' | 'right-side', {
    direction: Direction;
    align: Align;
}>;
declare type MenuPositions = keyof typeof popoverPositions;
export declare type ItemClick = (e: React.MouseEvent, key: number, state: {
    opened?: boolean;
}, item: ContextMenuItem) => void;
export interface ContextMenuItem extends Omit<ContextMenuItemProps, 'itemSize'> {
    key?: string;
    active?: boolean;
    disabled?: boolean;
    items?: Array<Omit<ContextMenuItem, 'items'>>;
    id?: string;
    dataAttributes?: Record<string, any>;
    itemsSize?: ContextMenuItemProps['itemSize'];
}
export interface ContextMenuProps extends DataQaInterface, Pick<PopoverProps, 'align' | 'closeOnPopoverClick' | 'direction' | 'hideOnResize' | 'onClick' | 'onClickOutside' | 'smartDirection' | 'to' | 'zIndex' | 'customPadding' | 'blockStyles'>, Pick<HTMLAttributes<HTMLDivElement>, 'id'>, Pick<React.CSSProperties, 'maxHeight'> {
    /**
     * Массив пунктов меню
     */
    items: ContextMenuItem[];
    /**
     * Размер элементов меню
     */
    itemSize?: ContextMenuItemSizes;
    /**
     * Флаг, отвечающий за отображение открытого меню
     */
    opened?: boolean;
    /**
     * Положение меню относительно переключателя
     */
    position?: MenuPositions;
    /**
     * Флаг, отвечающий за отображение меню по ховеру
     */
    showOnHover?: boolean;
    /**
     * Флаг для цветного меню с отображением активного элемента
     */
    colored?: boolean;
    /**
     * Флаг для растягивания на всю ширину блока, к которому прикреплено меню
     */
    wide?: boolean;
    /**
     * Колбэк события отображения меню
     */
    onShow?: (e: null, params: {
        opened?: boolean;
    }) => void;
    /**
     * Колбэк события закрытия меню
     */
    onClose?: (e: null, params: {
        opened?: boolean;
    }) => void;
    /**
     * Квадратные чекбоксы
     */
    squareChecked?: boolean;
    contentBeforeList?: React.ReactNode;
    /**
     * Останавливает всплытие клика по кнопке вызова контекстного меню
     */
    preventDefaultClick?: boolean;
    /**
     * Вид меню с выделеным активным элементом
     */
    highlightActive?: boolean;
    /**
     * Элементы списка будут отмечаться.
     * У элементов меню резервируется отступ справа под чекбокс
     */
    markable?: boolean;
    /**
     * Неактивное состояние
     */
    disabled?: boolean;
    /**
     * aria-label для кнопки, открывающей меню
     */
    buttonAriaLabel?: string;
}
export declare const ContextMenu: FCC<ContextMenuProps>;
export {};
