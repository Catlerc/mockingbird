import _extends from "@babel/runtime/helpers/extends";
import React, { Fragment, useMemo } from 'react';
import cn from 'classnames';
import { isTouchDevice } from '@platform-ui/device-info';
import Tooltip from '@platform-ui/tooltip';
import { Int16Tip as IconCheck16, Int24Tip as IconCheck24 } from '@platform-ui/iconsPack';
import styles from './ContextMenuItem.module.css';
export const ContextMenuItem = props => {
  const {
    additionalContent,
    attributes = {},
    checked,
    disabled,
    isGroupTitle,
    itemSize = 'l',
    leftContent,
    markable,
    noTooltipHover = true,
    rightContent = additionalContent,
    squareChecked,
    tagName: TagName = 'span',
    title,
    tooltipContent,
    onClick
  } = props;
  const IconCheck = useMemo(() => itemSize === 'l' || itemSize === 'm' ? IconCheck24 : IconCheck16, [itemSize]);
  const staticChildren = useMemo(() => /*#__PURE__*/React.createElement(Fragment, null, leftContent ? /*#__PURE__*/React.createElement("span", {
    className: styles.additionalContent
  }, leftContent) : null, title ? /*#__PURE__*/React.createElement("span", {
    className: styles.title
  }, title) : null, rightContent ? /*#__PURE__*/React.createElement("span", {
    className: styles.additionalContent
  }, rightContent) : null), [leftContent, title, rightContent]);
  const dynamicChildren = checked || squareChecked ? /*#__PURE__*/React.createElement("span", {
    className: cn({
      [styles.iconWrapper]: true,
      [styles.iconWrapper_square]: squareChecked,
      [styles.iconWrapper_checked]: checked
    })
  }, checked && /*#__PURE__*/React.createElement(IconCheck, null)) : null;
  const item = /*#__PURE__*/React.createElement(TagName || 'span', _extends({}, attributes, {
    className: cn({
      [styles.item]: true,
      [styles[`item_size_${itemSize}`]]: itemSize,
      [styles.item_groupTitle]: isGroupTitle,
      [styles.item_markable]: checked && !squareChecked || markable,
      [styles.item_checkboxed]: squareChecked,
      [styles.item_disabled]: disabled
    }),
    onClick,
    role: 'menuItem'
  }), /*#__PURE__*/React.createElement(Fragment, null, staticChildren, dynamicChildren));
  return tooltipContent && !isTouchDevice() ? /*#__PURE__*/React.createElement(Tooltip, {
    theme: "dark",
    popoverContent: tooltipContent,
    direction: ['bottom', 'top'],
    align: "start",
    cornerStyle: {
      left: 16
    },
    additionalShift: 12,
    noBubbleHover: noTooltipHover,
    pointerEvents: "none"
  }, item) : item;
}; // TODO: убрать в мажорном обновлении

ContextMenuItem.defaultProps = {
  tagName: 'span',
  attributes: {},
  checked: false,
  squareChecked: false,
  isGroupTitle: false,
  onClick: () => {}
};