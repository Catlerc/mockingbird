"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.ContextMenuItem = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _deviceInfo = require("@platform-ui/device-info");

var _tooltip = _interopRequireDefault(require("@platform-ui/tooltip"));

var _iconsPack = require("@platform-ui/iconsPack");

var _ContextMenuItemModule = _interopRequireDefault(require("./ContextMenuItem.module.css"));

var ContextMenuItem = function ContextMenuItem(props) {
  var _cn, _cn2;

  var additionalContent = props.additionalContent,
      _props$attributes = props.attributes,
      attributes = _props$attributes === void 0 ? {} : _props$attributes,
      checked = props.checked,
      disabled = props.disabled,
      isGroupTitle = props.isGroupTitle,
      _props$itemSize = props.itemSize,
      itemSize = _props$itemSize === void 0 ? 'l' : _props$itemSize,
      leftContent = props.leftContent,
      markable = props.markable,
      _props$noTooltipHover = props.noTooltipHover,
      noTooltipHover = _props$noTooltipHover === void 0 ? true : _props$noTooltipHover,
      _props$rightContent = props.rightContent,
      rightContent = _props$rightContent === void 0 ? additionalContent : _props$rightContent,
      squareChecked = props.squareChecked,
      _props$tagName = props.tagName,
      TagName = _props$tagName === void 0 ? 'span' : _props$tagName,
      title = props.title,
      tooltipContent = props.tooltipContent,
      onClick = props.onClick;
  var IconCheck = (0, _react.useMemo)(function () {
    return itemSize === 'l' || itemSize === 'm' ? _iconsPack.Int24Tip : _iconsPack.Int16Tip;
  }, [itemSize]);
  var staticChildren = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, leftContent ? /*#__PURE__*/_react.default.createElement("span", {
      className: _ContextMenuItemModule.default.additionalContent
    }, leftContent) : null, title ? /*#__PURE__*/_react.default.createElement("span", {
      className: _ContextMenuItemModule.default.title
    }, title) : null, rightContent ? /*#__PURE__*/_react.default.createElement("span", {
      className: _ContextMenuItemModule.default.additionalContent
    }, rightContent) : null);
  }, [leftContent, title, rightContent]);
  var dynamicChildren = checked || squareChecked ? /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)((_cn = {}, _cn[_ContextMenuItemModule.default.iconWrapper] = true, _cn[_ContextMenuItemModule.default.iconWrapper_square] = squareChecked, _cn[_ContextMenuItemModule.default.iconWrapper_checked] = checked, _cn))
  }, checked && /*#__PURE__*/_react.default.createElement(IconCheck, null)) : null;

  var item = /*#__PURE__*/_react.default.createElement(TagName || 'span', (0, _extends2.default)({}, attributes, {
    className: (0, _classnames.default)((_cn2 = {}, _cn2[_ContextMenuItemModule.default.item] = true, _cn2[_ContextMenuItemModule.default["item_size_" + itemSize]] = itemSize, _cn2[_ContextMenuItemModule.default.item_groupTitle] = isGroupTitle, _cn2[_ContextMenuItemModule.default.item_markable] = checked && !squareChecked || markable, _cn2[_ContextMenuItemModule.default.item_checkboxed] = squareChecked, _cn2[_ContextMenuItemModule.default.item_disabled] = disabled, _cn2)),
    onClick: onClick,
    role: 'menuItem'
  }), /*#__PURE__*/_react.default.createElement(_react.Fragment, null, staticChildren, dynamicChildren));

  return tooltipContent && !(0, _deviceInfo.isTouchDevice)() ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    theme: "dark",
    popoverContent: tooltipContent,
    direction: ['bottom', 'top'],
    align: "start",
    cornerStyle: {
      left: 16
    },
    additionalShift: 12,
    noBubbleHover: noTooltipHover,
    pointerEvents: "none"
  }, item) : item;
}; // TODO: убрать в мажорном обновлении


exports.ContextMenuItem = ContextMenuItem;
ContextMenuItem.defaultProps = {
  tagName: 'span',
  attributes: {},
  checked: false,
  squareChecked: false,
  isGroupTitle: false,
  onClick: function onClick() {}
};