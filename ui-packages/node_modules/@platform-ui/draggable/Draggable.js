"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = exports.Draggable = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _noop = _interopRequireDefault(require("@tinkoff/utils/function/noop"));

var _mergeWith = _interopRequireDefault(require("@tinkoff/utils/object/mergeWith"));

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _excluded = ["tagName", "onDragStart", "onDrag", "onDragEnd", "dragTimeout", "dragThreshold", "allowDefaultAction", "dataQaType", "dataQaData", "touchable", "forwardedRef"];

var preventDefault = function preventDefault(e) {
  return e.preventDefault();
};

var touchEventListenerOptions = {
  passive: false
};
var getDelta = (0, _mergeWith.default)(function (start, next) {
  if (typeof start === 'object') {
    return getDelta(start, next);
  }

  return next - start;
});
var LEFT_MOUSE_BUTTON = 0;
var STATUS_IDLE = 'idle';
var STATUS_WAITING = 'waiting';
var STATUS_DRAGGING = 'dragging';

var Draggable = /*#__PURE__*/function (_PureComponent) {
  (0, _inheritsLoose2.default)(Draggable, _PureComponent);

  function Draggable() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.self = null;
    _this.drag = null;
    _this.startDrag = null;
    _this.lastRect = {
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      width: 0,
      height: 0
    };
    _this.status = STATUS_IDLE;

    _this.catchErr = function (err) {
      _this.status = STATUS_IDLE;

      if (err instanceof Error) {
        throw err;
      }
    };

    _this.selfRef = function (el) {
      _this.self = el;
      var forwardedRef = _this.props.forwardedRef;

      if (forwardedRef) {
        if (typeof forwardedRef === 'function') {
          forwardedRef(el);
        } else {
          forwardedRef.current = el;
        }
      }
    };

    _this.handleMove = null;
    _this.handleUp = null;

    _this.handleWrapper = function (handler) {
      return function (e) {
        var allowDefaultAction = _this.props.allowDefaultAction;

        if (!allowDefaultAction) {
          e.preventDefault();
          e.stopPropagation();
        }

        var touch;

        if ('touches' in e) {
          // тач-событие
          touch = e.touches[0] || _this.drag;
          _this.drag = touch; // touchEnd не возвращает координаты - запоминаем
        } else {
          // событие мыши
          if (e.button !== LEFT_MOUSE_BUTTON) {
            return;
          }

          touch = e;
        }

        var rect = _this.self && _this.self.getBoundingClientRect();

        if (rect) {
          _this.lastRect = rect;
        } else {
          rect = _this.lastRect;
        }

        var drag = {
          page: {
            x: touch.pageX,
            y: touch.pageY
          },
          client: {
            x: touch.clientX,
            y: touch.clientY
          },
          offset: {
            x: touch.clientX - rect.left,
            y: touch.clientY - rect.top
          },
          rect: rect
        };
        return handler(drag);
      };
    };

    _this.handleMouseDown = _this.handleWrapper(function (drag) {
      if (_this.status !== STATUS_IDLE) {
        return;
      }

      _this.startDrag = drag;
      _this.status = STATUS_WAITING;
      var onDragStart = _this.props.onDragStart; // eslint-disable-next-line consistent-return

      return (// eslint-disable-next-line compat/compat
        Promise.all([_this.waitForTimeout(), _this.waitForThreshold()]).then(function () {
          return onDragStart(_this.getNextDrag(drag));
        }) // eslint-disable-next-line promise/always-return
        .then(function () {
          _this.status = STATUS_DRAGGING;

          _this.addListeners(_this.handleMouseMove, _this.handleMouseUp);
        }).catch(_this.catchErr)
      );
    });
    _this.handleMouseMove = _this.handleWrapper(function (drag) {
      return _this.props.onDrag(_this.getNextDrag(drag));
    });
    _this.handleMouseUp = _this.handleWrapper(function (drag) {
      _this.removeListeners();

      var nextDrag = _this.getNextDrag(drag);

      var onDragEnd = _this.props.onDragEnd; // eslint-disable-next-line compat/compat

      Promise.resolve(onDragEnd(nextDrag)) // eslint-disable-next-line promise/always-return
      .then(function () {
        _this.status = STATUS_IDLE;
      }).catch(_this.catchErr);
    });
    return _this;
  }

  var _proto = Draggable.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var touchable = this.props.touchable;
    if (!this.self) return;
    this.self.addEventListener('mousedown', this.handleMouseDown);

    if (touchable) {
      this.self.addEventListener('touchstart', this.handleMouseDown, touchEventListenerOptions);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (!this.self) return;
    this.self.removeEventListener('mousedown', this.handleMouseDown);
    this.self.removeEventListener('touchstart', this.handleMouseDown, touchEventListenerOptions);
    this.removeListeners();
  };

  _proto.getNextDrag = function getNextDrag(drag) {
    return (0, _extends2.default)({}, drag, this.startDrag ? {
      start: (0, _extends2.default)({}, this.startDrag)
    } : {}, {
      delta: getDelta(this.startDrag, drag)
    });
  };

  _proto.waitForTimeout = function waitForTimeout() {
    var _this2 = this;

    // eslint-disable-next-line compat/compat
    return new Promise(function (resolve) {
      var dragTimeout = _this2.props.dragTimeout;

      if (dragTimeout === 0) {
        return resolve();
      }

      return setTimeout(resolve, dragTimeout);
    });
  };

  _proto.waitForThreshold = function waitForThreshold() {
    var _this3 = this;

    // eslint-disable-next-line compat/compat, consistent-return
    return new Promise(function (resolve, reject) {
      var dragThreshold = _this3.props.dragThreshold;

      if (dragThreshold === 0) {
        return resolve();
      }

      var handleMove = _this3.handleWrapper(function (drag) {
        var _getDelta = getDelta(_this3.startDrag && _this3.startDrag.page, drag.page),
            x = _getDelta.x,
            y = _getDelta.y;

        if (Math.sqrt(x * x + y * y) >= dragThreshold) {
          _this3.removeListeners();

          resolve();
        }
      });

      var handleUp = _this3.handleWrapper(function () {
        _this3.removeListeners();

        reject();
      });

      _this3.addListeners(handleMove, handleUp);
    });
  };

  _proto.addListeners = function addListeners(handleMove, handleUp) {
    this.removeListeners();
    this.handleMove = handleMove;
    this.handleUp = handleUp;
    document.addEventListener('mousemove', handleMove);
    document.addEventListener('touchmove', handleMove, touchEventListenerOptions);
    document.addEventListener('mouseup', handleUp);
    document.addEventListener('mouseleave', handleUp);
    document.addEventListener('touchend', handleUp);
  };

  _proto.removeListeners = function removeListeners() {
    if (this.handleMove) {
      document.removeEventListener('mousemove', this.handleMove);
      document.removeEventListener('touchmove', this.handleMove, touchEventListenerOptions);
      this.handleMove = null;
    }

    if (this.handleUp) {
      document.removeEventListener('mouseup', this.handleUp);
      document.removeEventListener('mouseleave', this.handleUp);
      document.removeEventListener('touchend', this.handleUp);
      this.handleUp = null;
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        tagName = _this$props.tagName,
        onDragStart = _this$props.onDragStart,
        onDrag = _this$props.onDrag,
        onDragEnd = _this$props.onDragEnd,
        dragTimeout = _this$props.dragTimeout,
        dragThreshold = _this$props.dragThreshold,
        allowDefaultAction = _this$props.allowDefaultAction,
        dataQaType = _this$props.dataQaType,
        dataQaData = _this$props.dataQaData,
        touchable = _this$props.touchable,
        forwardedRef = _this$props.forwardedRef,
        otherProps = (0, _objectWithoutPropertiesLoose2.default)(_this$props, _excluded);
    return /*#__PURE__*/_react.default.createElement(tagName, (0, _extends2.default)({}, (0, _dataQa.default)({
      dataQaType: dataQaType,
      dataQaData: dataQaData
    }), {
      ref: this.selfRef
    }, otherProps, {
      onDragOver: preventDefault,
      onDragEnd: preventDefault
    }));
  };

  return Draggable;
}(_react.PureComponent);

exports.Draggable = Draggable;
Draggable.defaultProps = {
  tagName: 'div',
  dataQaType: 'uikit/Draggable',
  touchable: false,
  onDragStart: _noop.default,
  onDrag: _noop.default,
  onDragEnd: _noop.default,
  dragTimeout: 0,
  dragThreshold: 0,
  allowDefaultAction: false
};

var _default = /*#__PURE__*/_react.default.forwardRef(function (props, forwardedRef) {
  return /*#__PURE__*/_react.default.createElement(Draggable, Object.assign({}, props, {
    forwardedRef: forwardedRef
  }));
});

exports.default = _default;