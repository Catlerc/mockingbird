import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
const _excluded = ["dataQaType", "dataQaData", "focused", "focusVisible", "checked", "indeterminate"];
import React, { forwardRef } from 'react';
import dataQa from '@platform-ui/dataQa';
import { useControlledFocus, useFocusVisible } from '@platform-ui/focusUtils';

const useEventParams = callback => event => {
  const {
    name,
    value,
    checked
  } = event.target;
  callback(event, {
    name,
    value,
    checked
  });
};

const Checkable = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const handleBlur = useEventParams(props.onBlur);
  const handleFocus = useEventParams(props.onFocus);
  const handleChange = useEventParams(props.onChange);

  const propsWithRefAndEventParams = _extends({}, props, {
    ref: forwardedRef,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onChange: handleChange
  });

  const propsWithControlledFocus = useControlledFocus(propsWithRefAndEventParams);
  const propsWithFocusVisible = useFocusVisible(propsWithControlledFocus);

  const {
    dataQaType,
    dataQaData,
    focusVisible,
    checked,
    indeterminate
  } = propsWithFocusVisible,
        restProps = _objectWithoutPropertiesLoose(propsWithFocusVisible, _excluded);

  return /*#__PURE__*/React.createElement("input", Object.assign({}, dataQa({
    dataQaType,
    dataQaData
  }), {
    role: propsWithFocusVisible.type,
    "aria-checked": indeterminate ? 'mixed' : checked,
    checked: checked
  }, restProps, {
    "data-focus-visible": focusVisible || undefined
  }));
});
export default Checkable;