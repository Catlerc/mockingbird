"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;
exports.getClipboardDataText = getClipboardDataText;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _iconsPack = require("@platform-ui/iconsPack");

var _dataQa = _interopRequireDefault(require("@platform-ui/dataQa"));

var _string = _interopRequireDefault(require("@tinkoff/utils/is/string"));

var _InlineEditModule = _interopRequireDefault(require("./InlineEdit.module.css"));

var _excluded = ["dataQaType", "dataQaData", "iconSize", "value", "hasIcon", "width", "maxLength", "onChange", "onBlur", "onFocus", "onKeyDown"];
var ICONS = {
  m: _iconsPack.Int16Edit,
  l: _iconsPack.Int24Edit
};

function getClipboardDataText(event) {
  return 'clipboardData' in event ? event.clipboardData && event.clipboardData.getData('text/plain').normalize() : event.target.ownerDocument.defaultView.clipboardData.getData('text');
}

var setSelection = function setSelection(node) {
  var selection = window.getSelection();
  var range = document.createRange();
  range.selectNodeContents(node);
  range.collapse(false);

  if (selection) {
    selection.removeAllRanges();
    selection.addRange(range);
  }

  node.focus();
};

var getContent = function getContent(node) {
  return (0, _string.default)(node == null ? void 0 : node.textContent) ? node == null ? void 0 : node.textContent : node == null ? void 0 : node.innerText;
};

function InlineEdit(_ref) {
  var _cn, _cn2;

  var _ref$dataQaType = _ref.dataQaType,
      dataQaType = _ref$dataQaType === void 0 ? 'uikit/inlineEdit' : _ref$dataQaType,
      dataQaData = _ref.dataQaData,
      _ref$iconSize = _ref.iconSize,
      iconSize = _ref$iconSize === void 0 ? 'm' : _ref$iconSize,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      _ref$hasIcon = _ref.hasIcon,
      hasIcon = _ref$hasIcon === void 0 ? true : _ref$hasIcon,
      width = _ref.width,
      maxLength = _ref.maxLength,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      onKeyDown = _ref.onKeyDown,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);

  var _useState = (0, _react.useState)(false),
      editable = _useState[0],
      setEditable = _useState[1];

  var controlRef = (0, _react.useRef)(null);
  var Icon = ICONS[iconSize];

  var handleClick = function handleClick() {
    setEditable(true);
  };

  var handleBlur = function handleBlur(event) {
    setEditable(false);
    onBlur && onBlur(event);
  };

  var handleFocus = function handleFocus(event) {
    controlRef.current && setSelection(controlRef.current);
    onFocus && onFocus(event);
  };

  var handleChange = function handleChange(event) {
    var newValue = controlRef.current && getContent(controlRef.current) || value;
    var maxLengthError = false;

    if (maxLength) {
      maxLengthError = (newValue == null ? void 0 : newValue.length) > maxLength;
    }

    onChange && onChange(event, {
      value: newValue,
      errors: {
        maxLengthError: maxLengthError
      }
    });
  };

  var handleKeyDown = function handleKeyDown(event) {
    var enterKey = event.key === 'Enter';
    var escapeKey = event.key === 'Escape';

    if (enterKey || escapeKey) {
      var _controlRef$current;

      event.preventDefault();
      setEditable(false);
      (_controlRef$current = controlRef.current) == null ? void 0 : _controlRef$current.blur();
    }

    onKeyDown && onKeyDown(event);
  };

  var handlePaste = function handlePaste(event) {
    event.preventDefault();
    var content = getClipboardDataText(event);
    document.execCommand('insertText', false, content);
    document.execCommand('paste', false, content);
  };

  var handleDrop = function handleDrop(event) {
    event.preventDefault();
  };

  (0, _react.useEffect)(function () {
    var control = controlRef.current;

    if (control) {
      control.addEventListener('paste', handlePaste);
      control.addEventListener('drop', handleDrop);
      return function () {
        control.removeEventListener('paste', handlePaste);
        control.removeEventListener('drop', handleDrop);
      };
    }
  });
  (0, _react.useEffect)(function () {
    if (controlRef.current) {
      controlRef.current.innerText = value;
      setSelection(controlRef.current);
    }
  }, [value]);
  (0, _react.useLayoutEffect)(function () {
    if (editable) {
      var _controlRef$current2;

      (_controlRef$current2 = controlRef.current) == null ? void 0 : _controlRef$current2.focus();
    }
  }, [editable]);
  return /*#__PURE__*/_react.default.createElement("span", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType,
    dataQaData: dataQaData
  }), {
    className: (0, _classnames.default)((_cn = {}, _cn[_InlineEditModule.default.root] = true, _cn[_InlineEditModule.default.root_editable] = editable, _cn[_InlineEditModule.default["root_iconSize_" + iconSize]] = true, _cn)),
    style: {
      width: width
    },
    onClick: handleClick
  }), /*#__PURE__*/_react.default.createElement("span", Object.assign({}, otherProps, (0, _dataQa.default)({
    dataQaType: dataQaType + ".input"
  }), {
    className: _InlineEditModule.default.input,
    ref: controlRef,
    contentEditable: editable,
    suppressContentEditableWarning: true,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onInput: handleChange,
    onKeyDown: handleKeyDown
  })), hasIcon && /*#__PURE__*/_react.default.createElement("span", Object.assign({}, (0, _dataQa.default)({
    dataQaType: dataQaType + ".icon"
  }), {
    className: (0, _classnames.default)(_InlineEditModule.default.iconWrapper, (_cn2 = {}, _cn2[_InlineEditModule.default.iconSize_l] = iconSize === 'l', _cn2))
  }), /*#__PURE__*/_react.default.createElement(Icon, {
    verticalAlign: "middle",
    cursor: "pointer"
  })));
}

var _default = InlineEdit;
exports.default = _default;